(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

// shim for using process in browser
var process = module.exports = {};

process.nextTick = function () {
  var canSetImmediate = typeof window !== 'undefined' && window.setImmediate;
  var canPost = typeof window !== 'undefined' && window.postMessage && window.addEventListener;

  if (canSetImmediate) {
    return function (f) {
      return window.setImmediate(f);
    };
  }

  if (canPost) {
    var queue = [];
    window.addEventListener('message', function (ev) {
      var source = ev.source;

      if ((source === window || source === null) && ev.data === 'process-tick') {
        ev.stopPropagation();

        if (queue.length > 0) {
          var fn = queue.shift();
          fn();
        }
      }
    }, true);
    return function nextTick(fn) {
      queue.push(fn);
      window.postMessage('process-tick', '*');
    };
  }

  return function nextTick(fn) {
    setTimeout(fn, 0);
  };
}();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
  throw new Error('process.binding is not supported');
}; // TODO(shtylman)


process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJyb3dzZXIuanMiXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXh0VGljayIsImNhblNldEltbWVkaWF0ZSIsIndpbmRvdyIsInNldEltbWVkaWF0ZSIsImNhblBvc3QiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJmIiwicXVldWUiLCJldiIsInNvdXJjZSIsImRhdGEiLCJzdG9wUHJvcGFnYXRpb24iLCJsZW5ndGgiLCJmbiIsInNoaWZ0IiwicHVzaCIsInNldFRpbWVvdXQiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2Iiwibm9vcCIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwiYmluZGluZyIsIm5hbWUiLCJFcnJvciIsImN3ZCIsImNoZGlyIiwiZGlyIl0sIm1hcHBpbmdzIjoiOztBQUFBO0FBRUEsSUFBSUEsT0FBTyxHQUFHQyxNQUFNLENBQUNDLE9BQVAsR0FBaUIsRUFBL0I7O0FBRUFGLE9BQU8sQ0FBQ0csUUFBUixHQUFvQixZQUFZO0FBQzVCLE1BQUlDLGVBQWUsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLElBQ25CQSxNQUFNLENBQUNDLFlBRFY7QUFFQSxNQUFJQyxPQUFPLEdBQUcsT0FBT0YsTUFBUCxLQUFrQixXQUFsQixJQUNYQSxNQUFNLENBQUNHLFdBREksSUFDV0gsTUFBTSxDQUFDSSxnQkFEaEM7O0FBSUEsTUFBSUwsZUFBSixFQUFxQjtBQUNqQixXQUFPLFVBQVVNLENBQVYsRUFBYTtBQUFFLGFBQU9MLE1BQU0sQ0FBQ0MsWUFBUCxDQUFvQkksQ0FBcEIsQ0FBUDtBQUErQixLQUFyRDtBQUNIOztBQUVELE1BQUlILE9BQUosRUFBYTtBQUNULFFBQUlJLEtBQUssR0FBRyxFQUFaO0FBQ0FOLElBQUFBLE1BQU0sQ0FBQ0ksZ0JBQVAsQ0FBd0IsU0FBeEIsRUFBbUMsVUFBVUcsRUFBVixFQUFjO0FBQzdDLFVBQUlDLE1BQU0sR0FBR0QsRUFBRSxDQUFDQyxNQUFoQjs7QUFDQSxVQUFJLENBQUNBLE1BQU0sS0FBS1IsTUFBWCxJQUFxQlEsTUFBTSxLQUFLLElBQWpDLEtBQTBDRCxFQUFFLENBQUNFLElBQUgsS0FBWSxjQUExRCxFQUEwRTtBQUN0RUYsUUFBQUEsRUFBRSxDQUFDRyxlQUFIOztBQUNBLFlBQUlKLEtBQUssQ0FBQ0ssTUFBTixHQUFlLENBQW5CLEVBQXNCO0FBQ2xCLGNBQUlDLEVBQUUsR0FBR04sS0FBSyxDQUFDTyxLQUFOLEVBQVQ7QUFDQUQsVUFBQUEsRUFBRTtBQUNMO0FBQ0o7QUFDSixLQVRELEVBU0csSUFUSDtBQVdBLFdBQU8sU0FBU2QsUUFBVCxDQUFrQmMsRUFBbEIsRUFBc0I7QUFDekJOLE1BQUFBLEtBQUssQ0FBQ1EsSUFBTixDQUFXRixFQUFYO0FBQ0FaLE1BQUFBLE1BQU0sQ0FBQ0csV0FBUCxDQUFtQixjQUFuQixFQUFtQyxHQUFuQztBQUNILEtBSEQ7QUFJSDs7QUFFRCxTQUFPLFNBQVNMLFFBQVQsQ0FBa0JjLEVBQWxCLEVBQXNCO0FBQ3pCRyxJQUFBQSxVQUFVLENBQUNILEVBQUQsRUFBSyxDQUFMLENBQVY7QUFDSCxHQUZEO0FBR0gsQ0FqQ2tCLEVBQW5COztBQW1DQWpCLE9BQU8sQ0FBQ3FCLEtBQVIsR0FBZ0IsU0FBaEI7QUFDQXJCLE9BQU8sQ0FBQ3NCLE9BQVIsR0FBa0IsSUFBbEI7QUFDQXRCLE9BQU8sQ0FBQ3VCLEdBQVIsR0FBYyxFQUFkO0FBQ0F2QixPQUFPLENBQUN3QixJQUFSLEdBQWUsRUFBZjs7QUFFQSxTQUFTQyxJQUFULEdBQWdCLENBQUU7O0FBRWxCekIsT0FBTyxDQUFDMEIsRUFBUixHQUFhRCxJQUFiO0FBQ0F6QixPQUFPLENBQUMyQixXQUFSLEdBQXNCRixJQUF0QjtBQUNBekIsT0FBTyxDQUFDNEIsSUFBUixHQUFlSCxJQUFmO0FBQ0F6QixPQUFPLENBQUM2QixHQUFSLEdBQWNKLElBQWQ7QUFDQXpCLE9BQU8sQ0FBQzhCLGNBQVIsR0FBeUJMLElBQXpCO0FBQ0F6QixPQUFPLENBQUMrQixrQkFBUixHQUE2Qk4sSUFBN0I7QUFDQXpCLE9BQU8sQ0FBQ2dDLElBQVIsR0FBZVAsSUFBZjs7QUFFQXpCLE9BQU8sQ0FBQ2lDLE9BQVIsR0FBa0IsVUFBVUMsSUFBVixFQUFnQjtBQUM5QixRQUFNLElBQUlDLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0gsQ0FGRCxDLENBSUE7OztBQUNBbkMsT0FBTyxDQUFDb0MsR0FBUixHQUFjLFlBQVk7QUFBRSxTQUFPLEdBQVA7QUFBWSxDQUF4Qzs7QUFDQXBDLE9BQU8sQ0FBQ3FDLEtBQVIsR0FBZ0IsVUFBVUMsR0FBVixFQUFlO0FBQzNCLFFBQU0sSUFBSUgsS0FBSixDQUFVLGdDQUFWLENBQU47QUFDSCxDQUZEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG5cbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxucHJvY2Vzcy5uZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNhblNldEltbWVkaWF0ZSA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnNldEltbWVkaWF0ZTtcbiAgICB2YXIgY2FuUG9zdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgJiYgd2luZG93LnBvc3RNZXNzYWdlICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyXG4gICAgO1xuXG4gICAgaWYgKGNhblNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGYpIHsgcmV0dXJuIHdpbmRvdy5zZXRJbW1lZGlhdGUoZikgfTtcbiAgICB9XG5cbiAgICBpZiAoY2FuUG9zdCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBmdW5jdGlvbiAoZXYpIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBldi5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoKHNvdXJjZSA9PT0gd2luZG93IHx8IHNvdXJjZSA9PT0gbnVsbCkgJiYgZXYuZGF0YSA9PT0gJ3Byb2Nlc3MtdGljaycpIHtcbiAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICBmbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIG5leHRUaWNrKGZuKSB7XG4gICAgICAgICAgICBxdWV1ZS5wdXNoKGZuKTtcbiAgICAgICAgICAgIHdpbmRvdy5wb3N0TWVzc2FnZSgncHJvY2Vzcy10aWNrJywgJyonKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dFRpY2soZm4pIHtcbiAgICAgICAgc2V0VGltZW91dChmbiwgMCk7XG4gICAgfTtcbn0pKCk7XG5cbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufVxuXG4vLyBUT0RPKHNodHlsbWFuKVxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG4iXX0=
},{}],2:[function(require,module,exports){
"use strict";

var Vue; // late bind

var version;
var map = Object.create(null);

if (typeof window !== 'undefined') {
  window.__VUE_HOT_MAP__ = map;
}

var installed = false;
var isBrowserify = false;
var initHookName = 'beforeCreate';

exports.install = function (vue, browserify) {
  if (installed) {
    return;
  }

  installed = true;
  Vue = vue.__esModule ? vue["default"] : vue;
  version = Vue.version.split('.').map(Number);
  isBrowserify = browserify; // compat with < 2.0.0-alpha.7

  if (Vue.config._lifecycleHooks.indexOf('init') > -1) {
    initHookName = 'init';
  }

  exports.compatible = version[0] >= 2;

  if (!exports.compatible) {
    console.warn('[HMR] You are using a version of vue-hot-reload-api that is ' + 'only compatible with Vue.js core ^2.0.0.');
    return;
  }
};
/**
 * Create a record for a hot module, which keeps track of its constructor
 * and instances
 *
 * @param {String} id
 * @param {Object} options
 */


exports.createRecord = function (id, options) {
  if (map[id]) {
    return;
  }

  var Ctor = null;

  if (typeof options === 'function') {
    Ctor = options;
    options = Ctor.options;
  }

  makeOptionsHot(id, options);
  map[id] = {
    Ctor: Ctor,
    options: options,
    instances: []
  };
};
/**
 * Check if module is recorded
 *
 * @param {String} id
 */


exports.isRecorded = function (id) {
  return typeof map[id] !== 'undefined';
};
/**
 * Make a Component options object hot.
 *
 * @param {String} id
 * @param {Object} options
 */


function makeOptionsHot(id, options) {
  if (options.functional) {
    var render = options.render;

    options.render = function (h, ctx) {
      var instances = map[id].instances;

      if (ctx && instances.indexOf(ctx.parent) < 0) {
        instances.push(ctx.parent);
      }

      return render(h, ctx);
    };
  } else {
    injectHook(options, initHookName, function () {
      var record = map[id];

      if (!record.Ctor) {
        record.Ctor = this.constructor;
      }

      record.instances.push(this);
    });
    injectHook(options, 'beforeDestroy', function () {
      var instances = map[id].instances;
      instances.splice(instances.indexOf(this), 1);
    });
  }
}
/**
 * Inject a hook to a hot reloadable component so that
 * we can keep track of it.
 *
 * @param {Object} options
 * @param {String} name
 * @param {Function} hook
 */


function injectHook(options, name, hook) {
  var existing = options[name];
  options[name] = existing ? Array.isArray(existing) ? existing.concat(hook) : [existing, hook] : [hook];
}

function tryWrap(fn) {
  return function (id, arg) {
    try {
      fn(id, arg);
    } catch (e) {
      console.error(e);
      console.warn('Something went wrong during Vue component hot-reload. Full reload required.');
    }
  };
}

function updateOptions(oldOptions, newOptions) {
  for (var key in oldOptions) {
    if (!(key in newOptions)) {
      delete oldOptions[key];
    }
  }

  for (var key$1 in newOptions) {
    oldOptions[key$1] = newOptions[key$1];
  }
}

exports.rerender = tryWrap(function (id, options) {
  var record = map[id];

  if (!options) {
    record.instances.slice().forEach(function (instance) {
      instance.$forceUpdate();
    });
    return;
  }

  if (typeof options === 'function') {
    options = options.options;
  }

  if (record.Ctor) {
    record.Ctor.options.render = options.render;
    record.Ctor.options.staticRenderFns = options.staticRenderFns;
    record.instances.slice().forEach(function (instance) {
      instance.$options.render = options.render;
      instance.$options.staticRenderFns = options.staticRenderFns; // reset static trees
      // pre 2.5, all static trees are cached together on the instance

      if (instance._staticTrees) {
        instance._staticTrees = [];
      } // 2.5.0


      if (Array.isArray(record.Ctor.options.cached)) {
        record.Ctor.options.cached = [];
      } // 2.5.3


      if (Array.isArray(instance.$options.cached)) {
        instance.$options.cached = [];
      } // post 2.5.4: v-once trees are cached on instance._staticTrees.
      // Pure static trees are cached on the staticRenderFns array
      // (both already reset above)
      // 2.6: temporarily mark rendered scoped slots as unstable so that
      // child components can be forced to update


      var restore = patchScopedSlots(instance);
      instance.$forceUpdate();
      instance.$nextTick(restore);
    });
  } else {
    // functional or no instance created yet
    record.options.render = options.render;
    record.options.staticRenderFns = options.staticRenderFns; // handle functional component re-render

    if (record.options.functional) {
      // rerender with full options
      if (Object.keys(options).length > 2) {
        updateOptions(record.options, options);
      } else {
        // template-only rerender.
        // need to inject the style injection code for CSS modules
        // to work properly.
        var injectStyles = record.options._injectStyles;

        if (injectStyles) {
          var render = options.render;

          record.options.render = function (h, ctx) {
            injectStyles.call(ctx);
            return render(h, ctx);
          };
        }
      }

      record.options._Ctor = null; // 2.5.3

      if (Array.isArray(record.options.cached)) {
        record.options.cached = [];
      }

      record.instances.slice().forEach(function (instance) {
        instance.$forceUpdate();
      });
    }
  }
});
exports.reload = tryWrap(function (id, options) {
  var record = map[id];

  if (options) {
    if (typeof options === 'function') {
      options = options.options;
    }

    makeOptionsHot(id, options);

    if (record.Ctor) {
      if (version[1] < 2) {
        // preserve pre 2.2 behavior for global mixin handling
        record.Ctor.extendOptions = options;
      }

      var newCtor = record.Ctor["super"].extend(options); // prevent record.options._Ctor from being overwritten accidentally

      newCtor.options._Ctor = record.options._Ctor;
      record.Ctor.options = newCtor.options;
      record.Ctor.cid = newCtor.cid;
      record.Ctor.prototype = newCtor.prototype;

      if (newCtor.release) {
        // temporary global mixin strategy used in < 2.0.0-alpha.6
        newCtor.release();
      }
    } else {
      updateOptions(record.options, options);
    }
  }

  record.instances.slice().forEach(function (instance) {
    if (instance.$vnode && instance.$vnode.context) {
      instance.$vnode.context.$forceUpdate();
    } else {
      console.warn('Root or manually mounted instance modified. Full reload required.');
    }
  });
}); // 2.6 optimizes template-compiled scoped slots and skips updates if child
// only uses scoped slots. We need to patch the scoped slots resolving helper
// to temporarily mark all scoped slots as unstable in order to force child
// updates.

function patchScopedSlots(instance) {
  if (!instance._u) {
    return;
  } // https://github.com/vuejs/vue/blob/dev/src/core/instance/render-helpers/resolve-scoped-slots.js


  var original = instance._u;

  instance._u = function (slots) {
    try {
      // 2.6.4 ~ 2.6.6
      return original(slots, true);
    } catch (e) {
      // 2.5 / >= 2.6.7
      return original(slots, null, true);
    }
  };

  return function () {
    instance._u = original;
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{}],3:[function(require,module,exports){
(function (global){
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
'use strict';
/*  */

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  _typeof(value) === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && _typeof(obj) === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val["catch"] === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function no(a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function identity(_) {
  return _;
};
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = ('__proto__' in {}); // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function isServerRendering() {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;
{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function classify(str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function warn(msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function tip(msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function formatComponentName(vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function repeat(str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function generateComponentTrace(vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */

var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function createEmptyVNode(text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) {
      args[len] = arguments[len];
    }

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if (customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if (isUndef(target) || isPrimitive(target)) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if (isUndef(target) || isPrimitive(target)) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
    warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */

function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function defaultStrat(parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child["extends"]) {
      parent = mergeOptions(parent, child["extends"], vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if (warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop["default"]; // warn against non-factory defaults for Object & Array

  if (isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = _typeof(value);

    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) {
    args[len] = arguments[len];
  }

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res["catch"](function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */

  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function timerFunc() {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function timerFunc() {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function timerFunc() {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function timerFunc() {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;
{
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function warnNonPresent(target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function warnReservedPrefix(target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals. ' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = (key in target);
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */

var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

var mark;
var measure;
{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function mark(tag) {
      return perf.mark(tag);
    };

    measure = function measure(name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
      warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }
      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key]["default"];
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots["default"] || (slots["default"] = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function normalized() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && _typeof(res) === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if (!isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function loop(key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) {
        loop(key);
      }
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    {
      warn("Invalid Component definition: " + String(Ctor), context);
    }
    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options["abstract"])) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function merged(a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      "default": children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if (isDef(data) && isDef(data.nativeOn)) {
        warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
      }

      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data["class"])) {
    traverse(data["class"]);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp["default"];
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function forceRender(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
      warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject("timeout (" + res.timeout + "ms)");
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }
    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options["abstract"]) {
    while (parent.$options["abstract"] && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options["abstract"]) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if (config.performance && mark) {
    updateComponent = function updateComponent() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function updateComponent() {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.

  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function getNow() {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString(); // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
      warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function loop(key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.

    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) {
    loop(key);
  }

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
    warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
      warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if (getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + _typeof(methods[key]) + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if (config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    {
      initProxy(vm);
    } // expose real self

    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor["super"]) {
    var superOptions = resolveConstructorOptions(Ctor["super"]);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if (!(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  "abstract": true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots["default"];
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }
  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue["delete"] = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.12';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function mustUseProp(tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function convertEnumeratedValue(key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function isXlink(name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function getXlinkProp(name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function isFalsyAttrValue(val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data["class"]);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    "class": isDef(child["class"]) ? [child["class"], parent["class"]] : parent["class"]
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function isReservedTag(tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
      warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;
    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function callInsert() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function blocker(e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data["class"]) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData["class"]))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

/*  */

/*  */

/*  */
// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.

function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecessary `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function setProp(el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (_typeof(def$$1) === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function end() {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function onEnd(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
    warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options["abstract"]) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function isNotTextNode(c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function isVShowDirective(d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  "abstract": true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots["default"];

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if (children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if (mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function performLeave() {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots["default"] || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if (config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


module.exports = Vue;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZ1ZS5ydW50aW1lLmNvbW1vbi5kZXYuanMiXSwibmFtZXMiOlsiZW1wdHlPYmplY3QiLCJPYmplY3QiLCJmcmVlemUiLCJpc1VuZGVmIiwidiIsInVuZGVmaW5lZCIsImlzRGVmIiwiaXNUcnVlIiwiaXNGYWxzZSIsImlzUHJpbWl0aXZlIiwidmFsdWUiLCJpc09iamVjdCIsIm9iaiIsIl90b1N0cmluZyIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwidG9SYXdUeXBlIiwiY2FsbCIsInNsaWNlIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJ2YWwiLCJuIiwicGFyc2VGbG9hdCIsIlN0cmluZyIsIk1hdGgiLCJmbG9vciIsImlzRmluaXRlIiwiaXNQcm9taXNlIiwidGhlbiIsIkFycmF5IiwiaXNBcnJheSIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0b051bWJlciIsImlzTmFOIiwibWFrZU1hcCIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJtYXAiLCJjcmVhdGUiLCJsaXN0Iiwic3BsaXQiLCJpIiwibGVuZ3RoIiwidG9Mb3dlckNhc2UiLCJpc0J1aWx0SW5UYWciLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwicmVtb3ZlIiwiYXJyIiwiaXRlbSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsImhhc093blByb3BlcnR5IiwiaGFzT3duIiwia2V5IiwiY2FjaGVkIiwiZm4iLCJjYWNoZSIsImNhY2hlZEZuIiwiaGl0IiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwicmVwbGFjZSIsIl8iLCJjIiwidG9VcHBlckNhc2UiLCJjYXBpdGFsaXplIiwiY2hhckF0IiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJwb2x5ZmlsbEJpbmQiLCJjdHgiLCJib3VuZEZuIiwiYSIsImwiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9sZW5ndGgiLCJuYXRpdmVCaW5kIiwiYmluZCIsIkZ1bmN0aW9uIiwidG9BcnJheSIsInN0YXJ0IiwicmV0IiwiZXh0ZW5kIiwidG8iLCJfZnJvbSIsInRvT2JqZWN0IiwicmVzIiwibm9vcCIsImIiLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJldmVyeSIsImUiLCJEYXRlIiwiZ2V0VGltZSIsImtleXNBIiwia2V5cyIsImtleXNCIiwibG9vc2VJbmRleE9mIiwib25jZSIsImNhbGxlZCIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJjb25maWciLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJjaGFyQ29kZUF0IiwiZGVmIiwiZW51bWVyYWJsZSIsImRlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJiYWlsUkUiLCJSZWdFeHAiLCJzb3VyY2UiLCJwYXJzZVBhdGgiLCJwYXRoIiwidGVzdCIsInNlZ21lbnRzIiwiaGFzUHJvdG8iLCJpbkJyb3dzZXIiLCJ3aW5kb3ciLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzQW5kcm9pZCIsImlzSU9TIiwiaXNDaHJvbWUiLCJpc1BoYW50b21KUyIsImlzRkYiLCJtYXRjaCIsIm5hdGl2ZVdhdGNoIiwid2F0Y2giLCJzdXBwb3J0c1Bhc3NpdmUiLCJvcHRzIiwiZ2V0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIl9pc1NlcnZlciIsImlzU2VydmVyUmVuZGVyaW5nIiwiZ2xvYmFsIiwiZW52IiwiVlVFX0VOViIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIkN0b3IiLCJoYXNTeW1ib2wiLCJTeW1ib2wiLCJSZWZsZWN0Iiwib3duS2V5cyIsIl9TZXQiLCJTZXQiLCJzZXQiLCJoYXMiLCJhZGQiLCJjbGVhciIsIndhcm4iLCJ0aXAiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJjb25zb2xlIiwiY2xhc3NpZnlSRSIsImNsYXNzaWZ5IiwibXNnIiwidm0iLCJ0cmFjZSIsImVycm9yIiwiaW5jbHVkZUZpbGUiLCIkcm9vdCIsIm9wdGlvbnMiLCJjaWQiLCJfaXNWdWUiLCIkb3B0aW9ucyIsImNvbnN0cnVjdG9yIiwibmFtZSIsIl9jb21wb25lbnRUYWciLCJmaWxlIiwiX19maWxlIiwicmVwZWF0IiwiJHBhcmVudCIsInRyZWUiLCJjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UiLCJsYXN0IiwicHVzaCIsImpvaW4iLCJ1aWQiLCJEZXAiLCJpZCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJ0YXJnZXQiLCJhZGREZXAiLCJub3RpZnkiLCJzb3J0IiwidXBkYXRlIiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwicG9wIiwiVk5vZGUiLCJ0YWciLCJkYXRhIiwiY2hpbGRyZW4iLCJ0ZXh0IiwiZWxtIiwiY29udGV4dCIsImNvbXBvbmVudE9wdGlvbnMiLCJhc3luY0ZhY3RvcnkiLCJucyIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImNvbXBvbmVudEluc3RhbmNlIiwicGFyZW50IiwicmF3IiwiaXNTdGF0aWMiLCJpc1Jvb3RJbnNlcnQiLCJpc0NvbW1lbnQiLCJpc0Nsb25lZCIsImlzT25jZSIsImFzeW5jTWV0YSIsImlzQXN5bmNQbGFjZWhvbGRlciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNoaWxkIiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwiZm9yRWFjaCIsIm1ldGhvZCIsIm9yaWdpbmFsIiwibXV0YXRvciIsImFyZ3MiLCJsZW4iLCJyZXN1bHQiLCJvYiIsIl9fb2JfXyIsImluc2VydGVkIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsIml0ZW1zIiwib2JzZXJ2ZSIsInNyYyIsIl9fcHJvdG9fXyIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwicmVhY3RpdmVHZXR0ZXIiLCJkZXBlbmRBcnJheSIsInJlYWN0aXZlU2V0dGVyIiwibmV3VmFsIiwibWF4IiwiZGVsIiwic3RyYXRzIiwiZWwiLCJwcm9wc0RhdGEiLCJkZWZhdWx0U3RyYXQiLCJtZXJnZURhdGEiLCJmcm9tIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwibWVyZ2VkRGF0YUZuIiwibWVyZ2VkSW5zdGFuY2VEYXRhRm4iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImNvbmNhdCIsImRlZHVwZUhvb2tzIiwiaG9va3MiLCJob29rIiwibWVyZ2VBc3NldHMiLCJhc3NlcnRPYmplY3RUeXBlIiwidHlwZSIsImtleSQxIiwicHJvcHMiLCJtZXRob2RzIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiY2hlY2tDb21wb25lbnRzIiwiY29tcG9uZW50cyIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsIm5vcm1hbGl6ZVByb3BzIiwibm9ybWFsaXplSW5qZWN0Iiwibm9ybWFsaXplZCIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMiLCJkaXJzIiwiZGlyZWN0aXZlcyIsImRlZiQkMSIsIm1lcmdlT3B0aW9ucyIsIl9iYXNlIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsIkJvb2xlYW4iLCJzdHJpbmdJbmRleCIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsImFzc2VydFByb3AiLCJfcHJvcHMiLCJnZXRUeXBlIiwicmVxdWlyZWQiLCJ2YWxpZCIsImV4cGVjdGVkVHlwZXMiLCJhc3NlcnRlZFR5cGUiLCJhc3NlcnRUeXBlIiwiZXhwZWN0ZWRUeXBlIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwidmFsaWRhdG9yIiwic2ltcGxlQ2hlY2tSRSIsInQiLCJpc1NhbWVUeXBlIiwibWVzc2FnZSIsInJlY2VpdmVkVHlwZSIsImV4cGVjdGVkVmFsdWUiLCJzdHlsZVZhbHVlIiwicmVjZWl2ZWRWYWx1ZSIsImlzRXhwbGljYWJsZSIsImlzQm9vbGVhbiIsIk51bWJlciIsImV4cGxpY2l0VHlwZXMiLCJzb21lIiwiZWxlbSIsImhhbmRsZUVycm9yIiwiZXJyIiwiaW5mbyIsImN1ciIsImVycm9yQ2FwdHVyZWQiLCJjYXB0dXJlIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsImhhbmRsZXIiLCJfaGFuZGxlZCIsImxvZ0Vycm9yIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInRpbWVyRnVuYyIsIlByb21pc2UiLCJwIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJNdXRhdGlvbk9ic2VydmVyIiwiY291bnRlciIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwiY2hhcmFjdGVyRGF0YSIsInNldEltbWVkaWF0ZSIsIm5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsImluaXRQcm94eSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJyZW5kZXIiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5Iiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibWFyayIsIm1lYXN1cmUiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjcmVhdGVGbkludm9rZXIiLCJmbnMiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbiIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJldmVudCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEiLCJhdHRycyIsImFsdEtleSIsImtleUluTG93ZXJDYXNlIiwiY2hlY2tQcm9wIiwiaGFzaCIsInByZXNlcnZlIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJpc1RleHROb2RlIiwibmVzdGVkSW5kZXgiLCJsYXN0SW5kZXgiLCJzaGlmdCIsIl9pc1ZMaXN0IiwiaW5pdFByb3ZpZGUiLCJfcHJvdmlkZWQiLCJpbml0SW5qZWN0aW9ucyIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsInJlbmRlclNsb3QiLCJmYWxsYmFjayIsImJpbmRPYmplY3QiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCJub2RlcyIsIiRzbG90cyIsIiRjcmVhdGVFbGVtZW50IiwicmVzb2x2ZUZpbHRlciIsImlzS2V5Tm90TWF0Y2giLCJleHBlY3QiLCJhY3R1YWwiLCJjaGVja0tleUNvZGVzIiwiZXZlbnRLZXlDb2RlIiwiYnVpbHRJbktleUNvZGUiLCJldmVudEtleU5hbWUiLCJidWlsdEluS2V5TmFtZSIsIm1hcHBlZEtleUNvZGUiLCJiaW5kT2JqZWN0UHJvcHMiLCJhc1Byb3AiLCJpc1N5bmMiLCJsb29wIiwiZG9tUHJvcHMiLCJjYW1lbGl6ZWRLZXkiLCJoeXBoZW5hdGVkS2V5IiwiJGV2ZW50IiwicmVuZGVyU3RhdGljIiwiaXNJbkZvciIsIl9zdGF0aWNUcmVlcyIsInN0YXRpY1JlbmRlckZucyIsIm1hcmtTdGF0aWMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWNOb2RlIiwiYmluZE9iamVjdExpc3RlbmVycyIsImV4aXN0aW5nIiwib3VycyIsInJlc29sdmVTY29wZWRTbG90cyIsImhhc0R5bmFtaWNLZXlzIiwiY29udGVudEhhc2hLZXkiLCJiaW5kRHluYW1pY0tleXMiLCJiYXNlT2JqIiwidmFsdWVzIiwicHJlcGVuZE1vZGlmaWVyIiwic3ltYm9sIiwiaW5zdGFsbFJlbmRlckhlbHBlcnMiLCJfbyIsIl9uIiwiX3MiLCJfbCIsIl90IiwiX3EiLCJfaSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX3YiLCJfZSIsIl91IiwiX2ciLCJfZCIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJ0aGlzJDEiLCJjb250ZXh0Vm0iLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJsaXN0ZW5lcnMiLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsIl9jIiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibWVyZ2VQcm9wcyIsInJlbmRlckNvbnRleHQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0Iiwidm5vZGVzIiwiY2xvbmUiLCJkZXZ0b29sc01ldGEiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaW5pdCIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIiwiYWN0aXZlSW5zdGFuY2UiLCIkbW91bnQiLCJvbGRWbm9kZSIsInVwZGF0ZUNoaWxkQ29tcG9uZW50IiwiaW5zZXJ0IiwiX2lzTW91bnRlZCIsImNhbGxIb29rIiwicXVldWVBY3RpdmF0ZWRDb21wb25lbnQiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGVzdHJveSIsIiRkZXN0cm95IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwicmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyIsIm1vZGVsIiwidHJhbnNmb3JtTW9kZWwiLCJmdW5jdGlvbmFsIiwibmF0aXZlT24iLCJpbnN0YWxsQ29tcG9uZW50SG9va3MiLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsInRvTWVyZ2UiLCJfbWVyZ2VkIiwibWVyZ2VIb29rJDEiLCJmMSIsImYyIiwiY2FsbGJhY2siLCJTSU1QTEVfTk9STUFMSVpFIiwiQUxXQVlTX05PUk1BTElaRSIsIm5vcm1hbGl6YXRpb25UeXBlIiwiYWx3YXlzTm9ybWFsaXplIiwiX2NyZWF0ZUVsZW1lbnQiLCJpcyIsIiR2bm9kZSIsInByZSIsImFwcGx5TlMiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsImZvcmNlIiwic3R5bGUiLCJpbml0UmVuZGVyIiwiX3Zub2RlIiwicGFyZW50Vm5vZGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJwYXJlbnREYXRhIiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwiX3BhcmVudExpc3RlbmVycyIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInJlbmRlck1peGluIiwiVnVlIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlZiIsInJlbmRlckVycm9yIiwiZW5zdXJlQ3RvciIsImNvbXAiLCJiYXNlIiwiX19lc01vZHVsZSIsInRvU3RyaW5nVGFnIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCIkZm9yY2VVcGRhdGUiLCJjbGVhclRpbWVvdXQiLCJyZWplY3QiLCJyZWFzb24iLCJjb21wb25lbnQiLCJkZWxheSIsInRpbWVvdXQiLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwiaW5pdEV2ZW50cyIsIl9ldmVudHMiLCJfaGFzSG9va0V2ZW50IiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwib2xkTGlzdGVuZXJzIiwiZXZlbnRzTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsIiRlbWl0IiwibG93ZXJDYXNlRXZlbnQiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImluaXRMaWZlY3ljbGUiLCIkY2hpbGRyZW4iLCIkcmVmcyIsIl93YXRjaGVyIiwiX2luYWN0aXZlIiwiX2RpcmVjdEluYWN0aXZlIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJsaWZlY3ljbGVNaXhpbiIsIl91cGRhdGUiLCJwcmV2RWwiLCIkZWwiLCJwcmV2Vm5vZGUiLCJyZXN0b3JlQWN0aXZlSW5zdGFuY2UiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwidGVhcmRvd24iLCJfd2F0Y2hlcnMiLCJfZGF0YSIsIm1vdW50Q29tcG9uZW50IiwidGVtcGxhdGUiLCJ1cGRhdGVDb21wb25lbnQiLCJfbmFtZSIsIl91aWQiLCJXYXRjaGVyIiwiYmVmb3JlIiwicmVuZGVyQ2hpbGRyZW4iLCJuZXdTY29wZWRTbG90cyIsIm9sZFNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY1Njb3BlZFNsb3QiLCJuZWVkc0ZvcmNlVXBkYXRlIiwiJGF0dHJzIiwiJGxpc3RlbmVycyIsInByb3BLZXlzIiwiX3Byb3BLZXlzIiwiaXNJbkluYWN0aXZlVHJlZSIsImRpcmVjdCIsImoiLCJNQVhfVVBEQVRFX0NPVU5UIiwicXVldWUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImNpcmN1bGFyIiwid2FpdGluZyIsImZsdXNoaW5nIiwicmVzZXRTY2hlZHVsZXJTdGF0ZSIsImN1cnJlbnRGbHVzaFRpbWVzdGFtcCIsImdldE5vdyIsIm5vdyIsImNyZWF0ZUV2ZW50IiwidGltZVN0YW1wIiwiZmx1c2hTY2hlZHVsZXJRdWV1ZSIsIndhdGNoZXIiLCJydW4iLCJ1c2VyIiwiZXhwcmVzc2lvbiIsImFjdGl2YXRlZFF1ZXVlIiwidXBkYXRlZFF1ZXVlIiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwiY2FsbFVwZGF0ZWRIb29rcyIsImVtaXQiLCJxdWV1ZVdhdGNoZXIiLCJ1aWQkMiIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJkZWVwIiwibGF6eSIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJjbGVhbnVwRGVwcyIsInRtcCIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24iLCJzb3VyY2VLZXkiLCJwcm94eUdldHRlciIsInByb3h5U2V0dGVyIiwiaW5pdFN0YXRlIiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJpbml0RGF0YSIsImluaXRDb21wdXRlZCIsImluaXRXYXRjaCIsInByb3BzT3B0aW9ucyIsImlzUm9vdCIsImdldERhdGEiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwid2F0Y2hlcnMiLCJfY29tcHV0ZWRXYXRjaGVycyIsImlzU1NSIiwidXNlckRlZiIsImRlZmluZUNvbXB1dGVkIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCJjb21wdXRlZEdldHRlciIsImNyZWF0ZVdhdGNoZXIiLCIkd2F0Y2giLCJzdGF0ZU1peGluIiwiZGF0YURlZiIsInByb3BzRGVmIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCJ1bndhdGNoRm4iLCJ1aWQkMyIsImluaXRNaXhpbiIsIl9pbml0IiwiaW5pdEludGVybmFsQ29tcG9uZW50IiwiX3NlbGYiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJzdXBlck9wdGlvbnMiLCJjYWNoZWRTdXBlck9wdGlvbnMiLCJtb2RpZmllZE9wdGlvbnMiLCJyZXNvbHZlTW9kaWZpZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsImluaXRVc2UiLCJ1c2UiLCJwbHVnaW4iLCJpbnN0YWxsZWRQbHVnaW5zIiwiX2luc3RhbGxlZFBsdWdpbnMiLCJ1bnNoaWZ0IiwiaW5zdGFsbCIsImluaXRNaXhpbiQxIiwibWl4aW4iLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIlZ1ZUNvbXBvbmVudCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJDb21wIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiZGVmaW5pdGlvbiIsImdldENvbXBvbmVudE5hbWUiLCJtYXRjaGVzIiwicGF0dGVybiIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImZpbHRlciIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiY2FjaGVkJCQxIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInJlZiQxIiwicGFyc2VJbnQiLCJidWlsdEluQ29tcG9uZW50cyIsImluaXRHbG9iYWxBUEkiLCJjb25maWdEZWYiLCJ1dGlsIiwiZGVmaW5lUmVhY3RpdmUiLCJvYnNlcnZhYmxlIiwic3NyQ29udGV4dCIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImF0dHIiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsImlzRmFsc3lBdHRyVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsIm5hbWVzcGFjZU1hcCIsInN2ZyIsIm1hdGgiLCJpc0hUTUxUYWciLCJpc1NWRyIsInVua25vd25FbGVtZW50Q2FjaGUiLCJIVE1MVW5rbm93bkVsZW1lbnQiLCJIVE1MRWxlbWVudCIsImlzVGV4dElucHV0VHlwZSIsInF1ZXJ5Iiwic2VsZWN0ZWQiLCJxdWVyeVNlbGVjdG9yIiwiY3JlYXRlRWxlbWVudCQxIiwidGFnTmFtZSIsIm11bHRpcGxlIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudE5TIiwibmFtZXNwYWNlIiwiY3JlYXRlQ29tbWVudCIsImluc2VydEJlZm9yZSIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwibm9kZU9wcyIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwic2FtZUlucHV0VHlwZSIsInR5cGVBIiwidHlwZUIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsImJhY2tlbmQiLCJtb2R1bGVzIiwiZW1wdHlOb2RlQXQiLCJjcmVhdGVSbUNiIiwiY2hpbGRFbG0iLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsImlubmVyTm9kZSIsInRyYW5zaXRpb24iLCJhY3RpdmF0ZSIsInJlZiQkMSIsImNoZWNrRHVwbGljYXRlS2V5cyIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsInJtIiwidXBkYXRlQ2hpbGRyZW4iLCJvbGRDaCIsIm5ld0NoIiwicmVtb3ZlT25seSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJjYW5Nb3ZlIiwicGF0Y2hWbm9kZSIsImZpbmRJZHhJbk9sZCIsInNlZW5LZXlzIiwiZW5kIiwiaHlkcmF0ZSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaHlkcmF0aW9uQmFpbGVkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJpbm5lckhUTUwiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmdWxsSW52b2tlIiwibm9kZVR5cGUiLCJwYXRjaCIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImRpciIsImNhbGxIb29rJDEiLCJvbGRBcmciLCJhcmciLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ1cGRhdGVDbGFzcyIsIm9sZERhdGEiLCJjbHMiLCJ0cmFuc2l0aW9uQ2xhc3MiLCJfdHJhbnNpdGlvbkNsYXNzZXMiLCJfcHJldkNsYXNzIiwia2xhc3MiLCJSQU5HRV9UT0tFTiIsIkNIRUNLQk9YX1JBRElPX1RPS0VOIiwibm9ybWFsaXplRXZlbnRzIiwiY2hhbmdlIiwidGFyZ2V0JDEiLCJjcmVhdGVPbmNlSGFuZGxlciQxIiwicmVtb3ZlJDIiLCJ1c2VNaWNyb3Rhc2tGaXgiLCJhZGQkMSIsImF0dGFjaGVkVGltZXN0YW1wIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJEb2N1bWVudCIsInVwZGF0ZURPTUxpc3RlbmVycyIsImV2ZW50cyIsInN2Z0NvbnRhaW5lciIsInVwZGF0ZURPTVByb3BzIiwib2xkUHJvcHMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwiaXNOb3RJbkZvY3VzQW5kRGlydHkiLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsIm5vdEluRm9jdXMiLCJhY3RpdmVFbGVtZW50IiwiX3ZNb2RpZmllcnMiLCJudW1iZXIiLCJ0cmltIiwicGFyc2VTdHlsZVRleHQiLCJjc3NUZXh0IiwibGlzdERlbGltaXRlciIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJnZXRTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJjc3MiLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJjYW5jZWxsZWQiLCJfZW50ZXJDYiIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYmVmb3JlRW50ZXIiLCJhZnRlckVudGVyIiwiZW50ZXJDYW5jZWxsZWQiLCJiZWZvcmVBcHBlYXIiLCJhcHBlYXIiLCJhZnRlckFwcGVhciIsImFwcGVhckNhbmNlbGxlZCIsImR1cmF0aW9uIiwidHJhbnNpdGlvbk5vZGUiLCJpc0FwcGVhciIsInN0YXJ0Q2xhc3MiLCJhY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJiZWZvcmVFbnRlckhvb2siLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImVudGVyQ2FuY2VsbGVkSG9vayIsImV4cGxpY2l0RW50ZXJEdXJhdGlvbiIsImNoZWNrRHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwiYmVmb3JlTGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwicGVyZm9ybUxlYXZlIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBsYXRmb3JtTW9kdWxlcyIsInZtb2RlbCIsInRyaWdnZXIiLCJkaXJlY3RpdmUiLCJiaW5kaW5nIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJnZXRWYWx1ZSIsIm9uQ29tcG9zaXRpb25TdGFydCIsIm9uQ29tcG9zaXRpb25FbmQiLCJwcmV2T3B0aW9ucyIsImN1ck9wdGlvbnMiLCJvIiwibmVlZFJlc2V0IiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwib3B0aW9uIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2NhdGVOb2RlIiwidHJhbnNpdGlvbiQkMSIsIm9yaWdpbmFsRGlzcGxheSIsIl9fdk9yaWdpbmFsRGlzcGxheSIsImRpc3BsYXkiLCJ1bmJpbmQiLCJwbGF0Zm9ybURpcmVjdGl2ZXMiLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsImgiLCJyYXdDaGlsZCIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJpc1NhbWVDaGlsZCIsIm9sZENoaWxkIiwiaXNOb3RUZXh0Tm9kZSIsImlzVlNob3dEaXJlY3RpdmUiLCJUcmFuc2l0aW9uIiwiX2xlYXZpbmciLCJvbGRSYXdDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwicG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidXBkYXRlZCIsImhhc01vdmUiLCJjYWxsUGVuZGluZ0NicyIsInJlY29yZFBvc2l0aW9uIiwiYXBwbHlUcmFuc2xhdGlvbiIsIl9yZWZsb3ciLCJib2R5Iiwib2Zmc2V0SGVpZ2h0IiwibW92ZWQiLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJfbW92ZUNiIiwicHJvcGVydHlOYW1lIiwiX2hhc01vdmUiLCJjbG9uZU5vZGUiLCJuZXdQb3MiLCJvbGRQb3MiLCJkeCIsImxlZnQiLCJkeSIsInRvcCIsInBsYXRmb3JtQ29tcG9uZW50cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBO0FBRUE7Ozs7QUFFQSxJQUFJQSxXQUFXLEdBQUdDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLEVBQWQsQ0FBbEIsQyxDQUVBO0FBQ0E7O0FBQ0EsU0FBU0MsT0FBVCxDQUFrQkMsQ0FBbEIsRUFBcUI7QUFDbkIsU0FBT0EsQ0FBQyxLQUFLQyxTQUFOLElBQW1CRCxDQUFDLEtBQUssSUFBaEM7QUFDRDs7QUFFRCxTQUFTRSxLQUFULENBQWdCRixDQUFoQixFQUFtQjtBQUNqQixTQUFPQSxDQUFDLEtBQUtDLFNBQU4sSUFBbUJELENBQUMsS0FBSyxJQUFoQztBQUNEOztBQUVELFNBQVNHLE1BQVQsQ0FBaUJILENBQWpCLEVBQW9CO0FBQ2xCLFNBQU9BLENBQUMsS0FBSyxJQUFiO0FBQ0Q7O0FBRUQsU0FBU0ksT0FBVCxDQUFrQkosQ0FBbEIsRUFBcUI7QUFDbkIsU0FBT0EsQ0FBQyxLQUFLLEtBQWI7QUFDRDtBQUVEOzs7OztBQUdBLFNBQVNLLFdBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQzNCLFNBQ0UsT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUNBLE9BQU9BLEtBQVAs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dEI7QUFDRCxPQUZELE1BRU87QUFDTHRkLFFBQUFBLE9BQU8sQ0FBQ0EsT0FBTyxDQUFDNE0sSUFBUixHQUFlLE1BQWYsR0FBd0IsS0FBekIsQ0FBUCxDQUNFLCtFQUNBLHVDQUZGO0FBSUQ7QUFDRjs7QUFDRCxRQUFJN1IsTUFBTSxDQUFDRyxhQUFQLEtBQXlCLEtBQXpCLElBQ0YsT0FBTzhFLE9BQVAsS0FBbUIsV0FEckIsRUFFRTtBQUNBQSxNQUFBQSxPQUFPLENBQUNBLE9BQU8sQ0FBQzRNLElBQVIsR0FBZSxNQUFmLEdBQXdCLEtBQXpCLENBQVAsQ0FDRSwrQ0FDQSx1RUFEQSxHQUVBLDBEQUhGO0FBS0Q7QUFDRixHQXBCUyxFQW9CUCxDQXBCTyxDQUFWO0FBcUJEO0FBRUQ7OztBQUVBaTRCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQnhuQixHQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogVnVlLmpzIHYyLjYuMTJcbiAqIChjKSAyMDE0LTIwMjAgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAqL1xuICBkZXZ0b29sczogXCJkZXZlbG9wbWVudFwiICE9PSAncHJvZHVjdGlvbicsXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gcmVjb3JkIHBlcmZcbiAgICovXG4gIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAvKipcbiAgICogRXJyb3IgaGFuZGxlciBmb3Igd2F0Y2hlciBlcnJvcnNcbiAgICovXG4gIGVycm9ySGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAqL1xuICB3YXJuSGFuZGxlcjogbnVsbCxcblxuICAvKipcbiAgICogSWdub3JlIGNlcnRhaW4gY3VzdG9tIGVsZW1lbnRzXG4gICAqL1xuICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gdXNlciBrZXkgYWxpYXNlcyBmb3Igdi1vblxuICAgKi9cbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIGtleUNvZGVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSByZWdpc3RlcmVkIGFzIGFcbiAgICogY29tcG9uZW50LiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZFRhZzogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAqIHByb3AuIFRoaXMgaXMgcGxhdGZvcm0tZGVwZW5kZW50IGFuZCBtYXkgYmUgb3ZlcndyaXR0ZW4uXG4gICAqL1xuICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgdGFnIGlzIGFuIHVua25vd24gZWxlbWVudC5cbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgaXNVbmtub3duRWxlbWVudDogbm8sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbmFtZXNwYWNlIG9mIGFuIGVsZW1lbnRcbiAgICovXG4gIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAvKipcbiAgICogUGFyc2UgdGhlIHJlYWwgdGFnIG5hbWUgZm9yIHRoZSBzcGVjaWZpYyBwbGF0Zm9ybS5cbiAgICovXG4gIHBhcnNlUGxhdGZvcm1UYWdOYW1lOiBpZGVudGl0eSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgKi9cbiAgbXVzdFVzZVByb3A6IG5vLFxuXG4gIC8qKlxuICAgKiBQZXJmb3JtIHVwZGF0ZXMgYXN5bmNocm9ub3VzbHkuIEludGVuZGVkIHRvIGJlIHVzZWQgYnkgVnVlIFRlc3QgVXRpbHNcbiAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICovXG4gIGFzeW5jOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBFeHBvc2VkIGZvciBsZWdhY3kgcmVhc29uc1xuICAgKi9cbiAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1Ncbn0pO1xuXG4vKiAgKi9cblxuLyoqXG4gKiB1bmljb2RlIGxldHRlcnMgdXNlZCBmb3IgcGFyc2luZyBodG1sIHRhZ3MsIGNvbXBvbmVudCBuYW1lcyBhbmQgcHJvcGVydHkgcGF0aHMuXG4gKiB1c2luZyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUzL3NlbWFudGljcy1zY3JpcHRpbmcuaHRtbCNwb3RlbnRpYWxjdXN0b21lbGVtZW50bmFtZVxuICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICovXG52YXIgdW5pY29kZVJlZ0V4cCA9IC9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELztcblxuLyoqXG4gKiBDaGVjayBpZiBhIHN0cmluZyBzdGFydHMgd2l0aCAkIG9yIF9cbiAqL1xuZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gIHZhciBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbnZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuZnVuY3Rpb24gcGFyc2VQYXRoIChwYXRoKSB7XG4gIGlmIChiYWlsUkUudGVzdChwYXRoKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgeyByZXR1cm4gfVxuICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIG9ialxuICB9XG59XG5cbi8qICAqL1xuXG4vLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbnZhciBoYXNQcm90byA9ICdfX3Byb3RvX18nIGluIHt9O1xuXG4vLyBCcm93c2VyIGVudmlyb25tZW50IHNuaWZmaW5nXG52YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG52YXIgaW5XZWV4ID0gdHlwZW9mIFdYRW52aXJvbm1lbnQgIT09ICd1bmRlZmluZWQnICYmICEhV1hFbnZpcm9ubWVudC5wbGF0Zm9ybTtcbnZhciB3ZWV4UGxhdGZvcm0gPSBpbldlZXggJiYgV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpO1xudmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG52YXIgaXNJRSA9IFVBICYmIC9tc2llfHRyaWRlbnQvLnRlc3QoVUEpO1xudmFyIGlzSUU5ID0gVUEgJiYgVUEuaW5kZXhPZignbXNpZSA5LjAnKSA+IDA7XG52YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG52YXIgaXNBbmRyb2lkID0gKFVBICYmIFVBLmluZGV4T2YoJ2FuZHJvaWQnKSA+IDApIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdhbmRyb2lkJyk7XG52YXIgaXNJT1MgPSAoVUEgJiYgL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KFVBKSkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2lvcycpO1xudmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG52YXIgaXNQaGFudG9tSlMgPSBVQSAmJiAvcGhhbnRvbWpzLy50ZXN0KFVBKTtcbnZhciBpc0ZGID0gVUEgJiYgVUEubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKTtcblxuLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxudmFyIG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxudmFyIHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIHZhciBvcHRzID0ge307XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbnZhciBfaXNTZXJ2ZXI7XG52YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gIGlmIChfaXNTZXJ2ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIGRldGVjdCBwcmVzZW5jZSBvZiB2dWUtc2VydmVyLXJlbmRlcmVyIGFuZCBhdm9pZFxuICAgICAgLy8gV2VicGFjayBzaGltbWluZyB0aGUgcHJvY2Vzc1xuICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgIH0gZWxzZSB7XG4gICAgICBfaXNTZXJ2ZXIgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9pc1NlcnZlclxufTtcblxuLy8gZGV0ZWN0IGRldnRvb2xzXG52YXIgZGV2dG9vbHMgPSBpbkJyb3dzZXIgJiYgd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpc05hdGl2ZSAoQ3Rvcikge1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT09ICdmdW5jdGlvbicgJiYgL25hdGl2ZSBjb2RlLy50ZXN0KEN0b3IudG9TdHJpbmcoKSlcbn1cblxudmFyIGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbnZhciBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5zZXRba2V5XSA9PT0gdHJ1ZVxuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgdGhpcy5zZXRba2V5XSA9IHRydWU7XG4gICAgfTtcbiAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH07XG5cbiAgICByZXR1cm4gU2V0O1xuICB9KCkpO1xufVxuXG4vKiAgKi9cblxudmFyIHdhcm4gPSBub29wO1xudmFyIHRpcCA9IG5vb3A7XG52YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xudmFyIGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbntcbiAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBjbGFzc2lmeVJFID0gLyg/Ol58Wy1fXSkoXFx3KS9nO1xuICB2YXIgY2xhc3NpZnkgPSBmdW5jdGlvbiAoc3RyKSB7IHJldHVybiBzdHJcbiAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgIC5yZXBsYWNlKC9bLV9dL2csICcnKTsgfTtcblxuICB3YXJuID0gZnVuY3Rpb24gKG1zZywgdm0pIHtcbiAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICBpZiAoY29uZmlnLndhcm5IYW5kbGVyKSB7XG4gICAgICBjb25maWcud2FybkhhbmRsZXIuY2FsbChudWxsLCBtc2csIHZtLCB0cmFjZSk7XG4gICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoKFwiW1Z1ZSB3YXJuXTogXCIgKyBtc2cgKyB0cmFjZSkpO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgIHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJ1xuICAgICAgKSk7XG4gICAgfVxuICB9O1xuXG4gIGZvcm1hdENvbXBvbmVudE5hbWUgPSBmdW5jdGlvbiAodm0sIGluY2x1ZGVGaWxlKSB7XG4gICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgcmV0dXJuICc8Um9vdD4nXG4gICAgfVxuICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIHZhciBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgIGlmICghbmFtZSAmJiBmaWxlKSB7XG4gICAgICB2YXIgbWF0Y2ggPSBmaWxlLm1hdGNoKC8oW14vXFxcXF0rKVxcLnZ1ZSQvKTtcbiAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAoZmlsZSAmJiBpbmNsdWRlRmlsZSAhPT0gZmFsc2UgPyAoXCIgYXQgXCIgKyBmaWxlKSA6ICcnKVxuICAgIClcbiAgfTtcblxuICB2YXIgcmVwZWF0ID0gZnVuY3Rpb24gKHN0ciwgbikge1xuICAgIHZhciByZXMgPSAnJztcbiAgICB3aGlsZSAobikge1xuICAgICAgaWYgKG4gJSAyID09PSAxKSB7IHJlcyArPSBzdHI7IH1cbiAgICAgIGlmIChuID4gMSkgeyBzdHIgKz0gc3RyOyB9XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IGZ1bmN0aW9uICh2bSkge1xuICAgIGlmICh2bS5faXNWdWUgJiYgdm0uJHBhcmVudCkge1xuICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgIHZhciBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbGFzdCA9IHRyZWVbdHJlZS5sZW5ndGggLSAxXTtcbiAgICAgICAgICBpZiAobGFzdC5jb25zdHJ1Y3RvciA9PT0gdm0uY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgIHRyZWVbdHJlZS5sZW5ndGggLSAxXSA9IFtsYXN0LCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2VdO1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdHJlZS5wdXNoKHZtKTtcbiAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgfVxuICAgICAgcmV0dXJuICdcXG5cXG5mb3VuZCBpblxcblxcbicgKyB0cmVlXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICA/ICgoZm9ybWF0Q29tcG9uZW50TmFtZSh2bVswXSkpICsgXCIuLi4gKFwiICsgKHZtWzFdKSArIFwiIHJlY3Vyc2l2ZSBjYWxscylcIilcbiAgICAgICAgICAgIDogZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpKTsgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcXG5cXG4oZm91bmQgaW4gXCIgKyAoZm9ybWF0Q29tcG9uZW50TmFtZSh2bSkpICsgXCIpXCIpXG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCA9IDA7XG5cbi8qKlxuICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gKiBkaXJlY3RpdmVzIHN1YnNjcmliaW5nIHRvIGl0LlxuICovXG52YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgdGhpcy5pZCA9IHVpZCsrO1xuICB0aGlzLnN1YnMgPSBbXTtcbn07XG5cbkRlcC5wcm90b3R5cGUuYWRkU3ViID0gZnVuY3Rpb24gYWRkU3ViIChzdWIpIHtcbiAgdGhpcy5zdWJzLnB1c2goc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUucmVtb3ZlU3ViID0gZnVuY3Rpb24gcmVtb3ZlU3ViIChzdWIpIHtcbiAgcmVtb3ZlKHRoaXMuc3Vicywgc3ViKTtcbn07XG5cbkRlcC5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgaWYgKERlcC50YXJnZXQpIHtcbiAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgfVxufTtcblxuRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICB2YXIgc3VicyA9IHRoaXMuc3Vicy5zbGljZSgpO1xuICBpZiAoIWNvbmZpZy5hc3luYykge1xuICAgIC8vIHN1YnMgYXJlbid0IHNvcnRlZCBpbiBzY2hlZHVsZXIgaWYgbm90IHJ1bm5pbmcgYXN5bmNcbiAgICAvLyB3ZSBuZWVkIHRvIHNvcnQgdGhlbSBub3cgdG8gbWFrZSBzdXJlIHRoZXkgZmlyZSBpbiBjb3JyZWN0XG4gICAgLy8gb3JkZXJcbiAgICBzdWJzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGEuaWQgLSBiLmlkOyB9KTtcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgc3Vic1tpXS51cGRhdGUoKTtcbiAgfVxufTtcblxuLy8gVGhlIGN1cnJlbnQgdGFyZ2V0IHdhdGNoZXIgYmVpbmcgZXZhbHVhdGVkLlxuLy8gVGhpcyBpcyBnbG9iYWxseSB1bmlxdWUgYmVjYXVzZSBvbmx5IG9uZSB3YXRjaGVyXG4vLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbkRlcC50YXJnZXQgPSBudWxsO1xudmFyIHRhcmdldFN0YWNrID0gW107XG5cbmZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICB0YXJnZXRTdGFjay5wdXNoKHRhcmdldCk7XG4gIERlcC50YXJnZXQgPSB0YXJnZXQ7XG59XG5cbmZ1bmN0aW9uIHBvcFRhcmdldCAoKSB7XG4gIHRhcmdldFN0YWNrLnBvcCgpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG59XG5cbi8qICAqL1xuXG52YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIHRleHQsXG4gIGVsbSxcbiAgY29udGV4dCxcbiAgY29tcG9uZW50T3B0aW9ucyxcbiAgYXN5bmNGYWN0b3J5XG4pIHtcbiAgdGhpcy50YWcgPSB0YWc7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgdGhpcy5lbG0gPSBlbG07XG4gIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIHRoaXMuZm5Db250ZXh0ID0gdW5kZWZpbmVkO1xuICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gIHRoaXMua2V5ID0gZGF0YSAmJiBkYXRhLmtleTtcbiAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gIHRoaXMucmF3ID0gZmFsc2U7XG4gIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgdGhpcy5pc1Jvb3RJbnNlcnQgPSB0cnVlO1xuICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gIHRoaXMuaXNPbmNlID0gZmFsc2U7XG4gIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXIgPSBmYWxzZTtcbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGNoaWxkOiB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH07XG5cbi8vIERFUFJFQ0FURUQ6IGFsaWFzIGZvciBjb21wb25lbnRJbnN0YW5jZSBmb3IgYmFja3dhcmRzIGNvbXBhdC5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5wcm90b3R5cGVBY2Nlc3NvcnMuY2hpbGQuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZVxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIFZOb2RlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbnZhciBjcmVhdGVFbXB0eVZOb2RlID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgdmFyIG5vZGUgPSBuZXcgVk5vZGUoKTtcbiAgbm9kZS50ZXh0ID0gdGV4dDtcbiAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICByZXR1cm4gbm9kZVxufTtcblxuZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgcmV0dXJuIG5ldyBWTm9kZSh1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBTdHJpbmcodmFsKSlcbn1cblxuLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbi8vIHVzZWQgZm9yIHN0YXRpYyBub2RlcyBhbmQgc2xvdCBub2RlcyBiZWNhdXNlIHRoZXkgbWF5IGJlIHJldXNlZCBhY3Jvc3Ncbi8vIG11bHRpcGxlIHJlbmRlcnMsIGNsb25pbmcgdGhlbSBhdm9pZHMgZXJyb3JzIHdoZW4gRE9NIG1hbmlwdWxhdGlvbnMgcmVseVxuLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbmZ1bmN0aW9uIGNsb25lVk5vZGUgKHZub2RlKSB7XG4gIHZhciBjbG9uZWQgPSBuZXcgVk5vZGUoXG4gICAgdm5vZGUudGFnLFxuICAgIHZub2RlLmRhdGEsXG4gICAgLy8gIzc5NzVcbiAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAvLyBhIGNoaWxkLlxuICAgIHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLnNsaWNlKCksXG4gICAgdm5vZGUudGV4dCxcbiAgICB2bm9kZS5lbG0sXG4gICAgdm5vZGUuY29udGV4dCxcbiAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgIHZub2RlLmFzeW5jRmFjdG9yeVxuICApO1xuICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgY2xvbmVkLmlzU3RhdGljID0gdm5vZGUuaXNTdGF0aWM7XG4gIGNsb25lZC5rZXkgPSB2bm9kZS5rZXk7XG4gIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gIGNsb25lZC5mbkNvbnRleHQgPSB2bm9kZS5mbkNvbnRleHQ7XG4gIGNsb25lZC5mbk9wdGlvbnMgPSB2bm9kZS5mbk9wdGlvbnM7XG4gIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gIGNsb25lZC5hc3luY01ldGEgPSB2bm9kZS5hc3luY01ldGE7XG4gIGNsb25lZC5pc0Nsb25lZCA9IHRydWU7XG4gIHJldHVybiBjbG9uZWRcbn1cblxuLypcbiAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlXG4gKi9cblxudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG52YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTtcblxudmFyIG1ldGhvZHNUb1BhdGNoID0gW1xuICAncHVzaCcsXG4gICdwb3AnLFxuICAnc2hpZnQnLFxuICAndW5zaGlmdCcsXG4gICdzcGxpY2UnLFxuICAnc29ydCcsXG4gICdyZXZlcnNlJ1xuXTtcblxuLyoqXG4gKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAqL1xubWV0aG9kc1RvUGF0Y2guZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7XG4gIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICB2YXIgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgdmFyIHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgIHZhciBpbnNlcnRlZDtcbiAgICBzd2l0Y2ggKG1ldGhvZCkge1xuICAgICAgY2FzZSAncHVzaCc6XG4gICAgICBjYXNlICd1bnNoaWZ0JzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzO1xuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnc3BsaWNlJzpcbiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzLnNsaWNlKDIpO1xuICAgICAgICBicmVha1xuICAgIH1cbiAgICBpZiAoaW5zZXJ0ZWQpIHsgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTsgfVxuICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9KTtcbn0pO1xuXG4vKiAgKi9cblxudmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbnZhciBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbnZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIHRoaXMuZGVwID0gbmV3IERlcCgpO1xuICB0aGlzLnZtQ291bnQgPSAwO1xuICBkZWYodmFsdWUsICdfX29iX18nLCB0aGlzKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICBwcm90b0F1Z21lbnQodmFsdWUsIGFycmF5TWV0aG9kcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgfVxuICAgIHRoaXMub2JzZXJ2ZUFycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLndhbGsodmFsdWUpO1xuICB9XG59O1xuXG4vKipcbiAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICogdmFsdWUgdHlwZSBpcyBPYmplY3QuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgfVxufTtcblxuLyoqXG4gKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAqL1xuT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvYnNlcnZlKGl0ZW1zW2ldKTtcbiAgfVxufTtcblxuLy8gaGVscGVyc1xuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGludGVyY2VwdGluZ1xuICogdGhlIHByb3RvdHlwZSBjaGFpbiB1c2luZyBfX3Byb3RvX19cbiAqL1xuZnVuY3Rpb24gcHJvdG9BdWdtZW50ICh0YXJnZXQsIHNyYykge1xuICAvKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXByb3RvICovXG59XG5cbi8qKlxuICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgZGVmaW5pbmdcbiAqIGhpZGRlbiBwcm9wZXJ0aWVzLlxuICovXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gY29weUF1Z21lbnQgKHRhcmdldCwgc3JjLCBrZXlzKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgdmFyIGRlcCA9IG5ldyBEZXAoKTtcblxuICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgaWYgKHByb3BlcnR5ICYmIHByb3BlcnR5LmNvbmZpZ3VyYWJsZSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGNhdGVyIGZvciBwcmUtZGVmaW5lZCBnZXR0ZXIvc2V0dGVyc1xuICB2YXIgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICBpZiAoKCFnZXR0ZXIgfHwgc2V0dGVyKSAmJiBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgdmFsID0gb2JqW2tleV07XG4gIH1cblxuICB2YXIgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUodmFsKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiByZWFjdGl2ZUdldHRlciAoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgZGVwLmRlcGVuZCgpO1xuICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgIGNoaWxkT2IuZGVwLmRlcGVuZCgpO1xuICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgd2FybihcbiAgICAgICdBdm9pZCBhZGRpbmcgcmVhY3RpdmUgcHJvcGVydGllcyB0byBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKCFvYikge1xuICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBkZWZpbmVSZWFjdGl2ZSQkMShvYi52YWx1ZSwga2V5LCB2YWwpO1xuICBvYi5kZXAubm90aWZ5KCk7XG4gIHJldHVybiB2YWxcbn1cblxuLyoqXG4gKiBEZWxldGUgYSBwcm9wZXJ0eSBhbmQgdHJpZ2dlciBjaGFuZ2UgaWYgbmVjZXNzYXJ5LlxuICovXG5mdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gIGlmIChpc1VuZGVmKHRhcmdldCkgfHwgaXNQcmltaXRpdmUodGFyZ2V0KVxuICApIHtcbiAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAodmFyIGUgPSAodm9pZCAwKSwgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBlID0gdmFsdWVbaV07XG4gICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZSkpIHtcbiAgICAgIGRlcGVuZEFycmF5KGUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBPcHRpb24gb3ZlcndyaXRpbmcgc3RyYXRlZ2llcyBhcmUgZnVuY3Rpb25zIHRoYXQgaGFuZGxlXG4gKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICogdmFsdWUgaW50byB0aGUgZmluYWwgdmFsdWUuXG4gKi9cbnZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xue1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIm9wdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgXCIgK1xuICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gIH07XG59XG5cbi8qKlxuICogSGVscGVyIHRoYXQgcmVjdXJzaXZlbHkgbWVyZ2VzIHR3byBkYXRhIG9iamVjdHMgdG9nZXRoZXIuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgaWYgKCFmcm9tKSB7IHJldHVybiB0byB9XG4gIHZhciBrZXksIHRvVmFsLCBmcm9tVmFsO1xuXG4gIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgdG9WYWwgPSB0b1trZXldO1xuICAgIGZyb21WYWwgPSBmcm9tW2tleV07XG4gICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgIHNldCh0bywga2V5LCBmcm9tVmFsKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QodG9WYWwpICYmXG4gICAgICBpc1BsYWluT2JqZWN0KGZyb21WYWwpXG4gICAgKSB7XG4gICAgICBtZXJnZURhdGEodG9WYWwsIGZyb21WYWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBEYXRhXG4gKi9cbmZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bVxuKSB7XG4gIGlmICghdm0pIHtcbiAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgIGlmICghY2hpbGRWYWwpIHtcbiAgICAgIHJldHVybiBwYXJlbnRWYWxcbiAgICB9XG4gICAgaWYgKCFwYXJlbnRWYWwpIHtcbiAgICAgIHJldHVybiBjaGlsZFZhbFxuICAgIH1cbiAgICAvLyB3aGVuIHBhcmVudFZhbCAmIGNoaWxkVmFsIGFyZSBib3RoIHByZXNlbnQsXG4gICAgLy8gd2UgbmVlZCB0byByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlXG4gICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgLy8gY2hlY2sgaWYgcGFyZW50VmFsIGlzIGEgZnVuY3Rpb24gaGVyZSBiZWNhdXNlXG4gICAgLy8gaXQgaGFzIHRvIGJlIGEgZnVuY3Rpb24gdG8gcGFzcyBwcmV2aW91cyBtZXJnZXMuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhKFxuICAgICAgICB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbicgPyBjaGlsZFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogY2hpbGRWYWwsXG4gICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkSW5zdGFuY2VEYXRhRm4gKCkge1xuICAgICAgLy8gaW5zdGFuY2UgbWVyZ2VcbiAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBjaGlsZFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBjaGlsZFZhbDtcbiAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgdmFyIHJlcyA9IGNoaWxkVmFsXG4gICAgPyBwYXJlbnRWYWxcbiAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZFZhbClcbiAgICAgICAgPyBjaGlsZFZhbFxuICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICA6IHBhcmVudFZhbDtcbiAgcmV0dXJuIHJlc1xuICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgIDogcmVzXG59XG5cbmZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgcmVzLnB1c2goaG9va3NbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkxJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gIHN0cmF0c1tob29rXSA9IG1lcmdlSG9vaztcbn0pO1xuXG4vKipcbiAqIEFzc2V0c1xuICpcbiAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAqIGEgdGhyZWUtd2F5IG1lcmdlIGJldHdlZW4gY29uc3RydWN0b3Igb3B0aW9ucywgaW5zdGFuY2VcbiAqIG9wdGlvbnMgYW5kIHBhcmVudCBvcHRpb25zLlxuICovXG5mdW5jdGlvbiBtZXJnZUFzc2V0cyAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCk7XG4gIGlmIChjaGlsZFZhbCkge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IHt9O1xuICBleHRlbmQocmV0LCBwYXJlbnRWYWwpO1xuICBmb3IgKHZhciBrZXkkMSBpbiBjaGlsZFZhbCkge1xuICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgIHZhciBjaGlsZCA9IGNoaWxkVmFsW2tleSQxXTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5JDFdID0gcGFyZW50XG4gICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGQpID8gY2hpbGQgOiBbY2hpbGRdO1xuICB9XG4gIHJldHVybiByZXRcbn07XG5cbi8qKlxuICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAqL1xuc3RyYXRzLnByb3BzID1cbnN0cmF0cy5tZXRob2RzID1cbnN0cmF0cy5pbmplY3QgPVxuc3RyYXRzLmNvbXB1dGVkID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgaWYgKGNoaWxkVmFsICYmIFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKCdwcm9wcyBtdXN0IGJlIHN0cmluZ3Mgd2hlbiB1c2luZyBhcnJheSBzeW50YXguJyk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QocHJvcHMpKSB7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3YXJuKFxuICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKHByb3BzKSkgKyBcIi5cIixcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICBvcHRpb25zLnByb3BzID0gcmVzO1xufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhbGwgaW5qZWN0aW9ucyBpbnRvIE9iamVjdC1iYXNlZCBmb3JtYXRcbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplSW5qZWN0IChvcHRpb25zLCB2bSkge1xuICB2YXIgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gIHZhciBub3JtYWxpemVkID0gb3B0aW9ucy5pbmplY3QgPSB7fTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBub3JtYWxpemVkW2luamVjdFtpXV0gPSB7IGZyb206IGluamVjdFtpXSB9O1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICB2YXIgdmFsID0gaW5qZWN0W2tleV07XG4gICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyBleHRlbmQoeyBmcm9tOiBrZXkgfSwgdmFsKVxuICAgICAgICA6IHsgZnJvbTogdmFsIH07XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgdmFyIGtleTtcbiAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgbWVyZ2VGaWVsZChrZXkpO1xuICB9XG4gIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgaWYgKCFoYXNPd24ocGFyZW50LCBrZXkpKSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG1lcmdlRmllbGQgKGtleSkge1xuICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICBvcHRpb25zW2tleV0gPSBzdHJhdChwYXJlbnRba2V5XSwgY2hpbGRba2V5XSwgdm0sIGtleSk7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuLyoqXG4gKiBSZXNvbHZlIGFuIGFzc2V0LlxuICogVGhpcyBmdW5jdGlvbiBpcyB1c2VkIGJlY2F1c2UgY2hpbGQgaW5zdGFuY2VzIG5lZWQgYWNjZXNzXG4gKiB0byBhc3NldHMgZGVmaW5lZCBpbiBpdHMgYW5jZXN0b3IgY2hhaW4uXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVBc3NldCAoXG4gIG9wdGlvbnMsXG4gIHR5cGUsXG4gIGlkLFxuICB3YXJuTWlzc2luZ1xuKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodHlwZW9mIGlkICE9PSAnc3RyaW5nJykge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSB7IHJldHVybiBhc3NldHNbaWRdIH1cbiAgdmFyIGNhbWVsaXplZElkID0gY2FtZWxpemUoaWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgdmFyIFBhc2NhbENhc2VJZCA9IGNhcGl0YWxpemUoY2FtZWxpemVkSWQpO1xuICBpZiAoaGFzT3duKGFzc2V0cywgUGFzY2FsQ2FzZUlkKSkgeyByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF0gfVxuICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgdmFyIHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAoaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciB0eXBlID0gcHJvcC50eXBlO1xuICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICB2YXIgZXhwZWN0ZWRUeXBlcyA9IFtdO1xuICBpZiAodHlwZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgdHlwZSA9IFt0eXBlXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgdmFyIGFzc2VydGVkVHlwZSA9IGFzc2VydFR5cGUodmFsdWUsIHR5cGVbaV0pO1xuICAgICAgZXhwZWN0ZWRUeXBlcy5wdXNoKGFzc2VydGVkVHlwZS5leHBlY3RlZFR5cGUgfHwgJycpO1xuICAgICAgdmFsaWQgPSBhc3NlcnRlZFR5cGUudmFsaWQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF2YWxpZCkge1xuICAgIHdhcm4oXG4gICAgICBnZXRJbnZhbGlkVHlwZU1lc3NhZ2UobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHNpbXBsZUNoZWNrUkUgPSAvXihTdHJpbmd8TnVtYmVyfEJvb2xlYW58RnVuY3Rpb258U3ltYm9sKSQvO1xuXG5mdW5jdGlvbiBhc3NlcnRUeXBlICh2YWx1ZSwgdHlwZSkge1xuICB2YXIgdmFsaWQ7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICBpZiAoc2ltcGxlQ2hlY2tSRS50ZXN0KGV4cGVjdGVkVHlwZSkpIHtcbiAgICB2YXIgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgZXhwZWN0ZWRUeXBlOiBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICB2YXIgbWF0Y2ggPSBmbiAmJiBmbi50b1N0cmluZygpLm1hdGNoKC9eXFxzKmZ1bmN0aW9uIChcXHcrKS8pO1xuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsxXSA6ICcnXG59XG5cbmZ1bmN0aW9uIGlzU2FtZVR5cGUgKGEsIGIpIHtcbiAgcmV0dXJuIGdldFR5cGUoYSkgPT09IGdldFR5cGUoYilcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZUluZGV4ICh0eXBlLCBleHBlY3RlZFR5cGVzKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShleHBlY3RlZFR5cGVzKSkge1xuICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGV4cGVjdGVkVHlwZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgcmV0dXJuIGlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgdmFyIG1lc3NhZ2UgPSBcIkludmFsaWQgcHJvcDogdHlwZSBjaGVjayBmYWlsZWQgZm9yIHByb3AgXFxcIlwiICsgbmFtZSArIFwiXFxcIi5cIiArXG4gICAgXCIgRXhwZWN0ZWQgXCIgKyAoZXhwZWN0ZWRUeXBlcy5tYXAoY2FwaXRhbGl6ZSkuam9pbignLCAnKSk7XG4gIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICB2YXIgcmVjZWl2ZWRUeXBlID0gdG9SYXdUeXBlKHZhbHVlKTtcbiAgdmFyIGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgcmVjZWl2ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIHJlY2VpdmVkVHlwZSk7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICBpZiAoZXhwZWN0ZWRUeXBlcy5sZW5ndGggPT09IDEgJiZcbiAgICAgIGlzRXhwbGljYWJsZShleHBlY3RlZFR5cGUpICYmXG4gICAgICAhaXNCb29sZWFuKGV4cGVjdGVkVHlwZSwgcmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCIgd2l0aCB2YWx1ZSBcIiArIGV4cGVjdGVkVmFsdWU7XG4gIH1cbiAgbWVzc2FnZSArPSBcIiwgZ290IFwiICsgcmVjZWl2ZWRUeXBlICsgXCIgXCI7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IFwid2l0aCB2YWx1ZSBcIiArIHJlY2VpdmVkVmFsdWUgKyBcIi5cIjtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiAoXCJcIiArIChOdW1iZXIodmFsdWUpKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gKFwiXCIgKyB2YWx1ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0V4cGxpY2FibGUgKHZhbHVlKSB7XG4gIHZhciBleHBsaWNpdFR5cGVzID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgcmV0dXJuIGV4cGxpY2l0VHlwZXMuc29tZShmdW5jdGlvbiAoZWxlbSkgeyByZXR1cm4gdmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gZWxlbTsgfSlcbn1cblxuZnVuY3Rpb24gaXNCb29sZWFuICgpIHtcbiAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICByZXR1cm4gYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiBlbGVtLnRvTG93ZXJDYXNlKCkgPT09ICdib29sZWFuJzsgfSlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIC8vIERlYWN0aXZhdGUgZGVwcyB0cmFja2luZyB3aGlsZSBwcm9jZXNzaW5nIGVycm9yIGhhbmRsZXIgdG8gYXZvaWQgcG9zc2libGUgaW5maW5pdGUgcmVuZGVyaW5nLlxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICBpZiAodm0pIHtcbiAgICAgIHZhciBjdXIgPSB2bTtcbiAgICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICBpZiAoaG9va3MpIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB2YXIgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICAgIGlmIChjYXB0dXJlKSB7IHJldHVybiB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGUsIGN1ciwgJ2Vycm9yQ2FwdHVyZWQgaG9vaycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBnbG9iYWxIYW5kbGVFcnJvcihlcnIsIHZtLCBpbmZvKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBwb3BUYXJnZXQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgdmFyIHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpICYmICFyZXMuX2hhbmRsZWQpIHtcbiAgICAgIHJlcy5jYXRjaChmdW5jdGlvbiAoZSkgeyByZXR1cm4gaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8gKyBcIiAoUHJvbWlzZS9hc3luYylcIik7IH0pO1xuICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgIC8vIGF2b2lkIGNhdGNoIHRyaWdnZXJpbmcgbXVsdGlwbGUgdGltZXMgd2hlbiBuZXN0ZWQgY2FsbHNcbiAgICAgIHJlcy5faGFuZGxlZCA9IHRydWU7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgdm0sIGluZm8pO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKGNvbmZpZy5lcnJvckhhbmRsZXIpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGlmIHRoZSB1c2VyIGludGVudGlvbmFsbHkgdGhyb3dzIHRoZSBvcmlnaW5hbCBlcnJvciBpbiB0aGUgaGFuZGxlcixcbiAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgIGlmIChlICE9PSBlcnIpIHtcbiAgICAgICAgbG9nRXJyb3IoZSwgbnVsbCwgJ2NvbmZpZy5lcnJvckhhbmRsZXInKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG59XG5cbmZ1bmN0aW9uIGxvZ0Vycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxue1xuICB2YXIgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgb3IgbWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UgYnV0IFwiICtcbiAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgJ2VpdGhlciBpbiB0aGUgZGF0YSBvcHRpb24sIG9yIGZvciBjbGFzcy1iYXNlZCBjb21wb25lbnRzLCBieSAnICtcbiAgICAgICdpbml0aWFsaXppbmcgdGhlIHByb3BlcnR5LiAnICtcbiAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgd2FyblJlc2VydmVkUHJlZml4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgd2FybihcbiAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscy4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgdGFyZ2V0XG4gICAgKTtcbiAgfTtcblxuICB2YXIgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIHZhciBpc0J1aWx0SW5Nb2RpZmllciA9IG1ha2VNYXAoJ3N0b3AscHJldmVudCxzZWxmLGN0cmwsc2hpZnQsYWx0LG1ldGEsZXhhY3QnKTtcbiAgICBjb25maWcua2V5Q29kZXMgPSBuZXcgUHJveHkoY29uZmlnLmtleUNvZGVzLCB7XG4gICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybigoXCJBdm9pZCBvdmVyd3JpdGluZyBidWlsdC1pbiBtb2RpZmllciBpbiBjb25maWcua2V5Q29kZXM6IC5cIiArIGtleSkpO1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIGhhc0hhbmRsZXIgPSB7XG4gICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICB2YXIgaGFzID0ga2V5IGluIHRhcmdldDtcbiAgICAgIHZhciBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhcyB8fCAhaXNBbGxvd2VkXG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRIYW5kbGVyID0ge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmICEoa2V5IGluIHRhcmdldCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0YXJnZXQuJGRhdGEpIHsgd2FyblJlc2VydmVkUHJlZml4KHRhcmdldCwga2V5KTsgfVxuICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGFyZ2V0W2tleV1cbiAgICB9XG4gIH07XG5cbiAgaW5pdFByb3h5ID0gZnVuY3Rpb24gaW5pdFByb3h5ICh2bSkge1xuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgLy8gZGV0ZXJtaW5lIHdoaWNoIHByb3h5IGhhbmRsZXIgdG8gdXNlXG4gICAgICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBzZWVuT2JqZWN0cyA9IG5ldyBfU2V0KCk7XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAqIGdldHRlcnMsIHNvIHRoYXQgZXZlcnkgbmVzdGVkIHByb3BlcnR5IGluc2lkZSB0aGUgb2JqZWN0XG4gKiBpcyBjb2xsZWN0ZWQgYXMgYSBcImRlZXBcIiBkZXBlbmRlbmN5LlxuICovXG5mdW5jdGlvbiB0cmF2ZXJzZSAodmFsKSB7XG4gIF90cmF2ZXJzZSh2YWwsIHNlZW5PYmplY3RzKTtcbiAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbn1cblxuZnVuY3Rpb24gX3RyYXZlcnNlICh2YWwsIHNlZW4pIHtcbiAgdmFyIGksIGtleXM7XG4gIHZhciBpc0EgPSBBcnJheS5pc0FycmF5KHZhbCk7XG4gIGlmICgoIWlzQSAmJiAhaXNPYmplY3QodmFsKSkgfHwgT2JqZWN0LmlzRnJvemVuKHZhbCkgfHwgdmFsIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsLl9fb2JfXykge1xuICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtpXSwgc2Vlbik7IH1cbiAgfSBlbHNlIHtcbiAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICBpID0ga2V5cy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICB9XG59XG5cbnZhciBtYXJrO1xudmFyIG1lYXN1cmU7XG5cbntcbiAgdmFyIHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IGZ1bmN0aW9uICh0YWcpIHsgcmV0dXJuIHBlcmYubWFyayh0YWcpOyB9O1xuICAgIG1lYXN1cmUgPSBmdW5jdGlvbiAobmFtZSwgc3RhcnRUYWcsIGVuZFRhZykge1xuICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKHN0YXJ0VGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhlbmRUYWcpO1xuICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgfTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIG5vcm1hbGl6ZUV2ZW50ID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgbmFtZSA9IHBhc3NpdmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIHZhciBjYXB0dXJlID0gbmFtZS5jaGFyQXQoMCkgPT09ICchJztcbiAgbmFtZSA9IGNhcHR1cmUgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBuYW1lLFxuICAgIG9uY2U6IG9uY2UkJDEsXG4gICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICBwYXNzaXZlOiBwYXNzaXZlXG4gIH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVGbkludm9rZXIgKGZucywgdm0pIHtcbiAgZnVuY3Rpb24gaW52b2tlciAoKSB7XG4gICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgdmFyIGZucyA9IGludm9rZXIuZm5zO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGZucykpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzJDEsIHZtLCBcInYtb24gaGFuZGxlclwiKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gcmV0dXJuIGhhbmRsZXIgcmV0dXJuIHZhbHVlIGZvciBzaW5nbGUgaGFuZGxlcnNcbiAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICB2YXIgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgdmFyIGludm9rZXI7XG4gIHZhciBvbGRIb29rID0gZGVmW2hvb2tLZXldO1xuXG4gIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICBob29rLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgLy8gaW1wb3J0YW50OiByZW1vdmUgbWVyZ2VkIGhvb2sgdG8gZW5zdXJlIGl0J3MgY2FsbGVkIG9ubHkgb25jZVxuICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgcmVtb3ZlKGludm9rZXIuZm5zLCB3cmFwcGVkSG9vayk7XG4gIH1cblxuICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgIC8vIG5vIGV4aXN0aW5nIGhvb2tcbiAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFt3cmFwcGVkSG9va10pO1xuICB9IGVsc2Uge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihvbGRIb29rLmZucykgJiYgaXNUcnVlKG9sZEhvb2subWVyZ2VkKSkge1xuICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICBpbnZva2VyID0gb2xkSG9vaztcbiAgICAgIGludm9rZXIuZm5zLnB1c2god3JhcHBlZEhvb2spO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBleGlzdGluZyBwbGFpbiBob29rXG4gICAgICBpbnZva2VyID0gY3JlYXRlRm5JbnZva2VyKFtvbGRIb29rLCB3cmFwcGVkSG9va10pO1xuICAgIH1cbiAgfVxuXG4gIGludm9rZXIubWVyZ2VkID0gdHJ1ZTtcbiAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICBkYXRhLFxuICBDdG9yLFxuICB0YWdcbikge1xuICAvLyB3ZSBhcmUgb25seSBleHRyYWN0aW5nIHJhdyB2YWx1ZXMgaGVyZS5cbiAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gIC8vIGNvbXBvbmVudCBpdHNlbGYuXG4gIHZhciBwcm9wT3B0aW9ucyA9IEN0b3Iub3B0aW9ucy5wcm9wcztcbiAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzO1xuICB2YXIgcHJvcHMgPSBkYXRhLnByb3BzO1xuICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgdmFyIGFsdEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAge1xuICAgICAgICB2YXIga2V5SW5Mb3dlckNhc2UgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICBhdHRycyAmJiBoYXNPd24oYXR0cnMsIGtleUluTG93ZXJDYXNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIlByb3AgXFxcIlwiICsga2V5SW5Mb3dlckNhc2UgKyBcIlxcXCIgaXMgcGFzc2VkIHRvIGNvbXBvbmVudCBcIiArXG4gICAgICAgICAgICAoZm9ybWF0Q29tcG9uZW50TmFtZSh0YWcgfHwgQ3RvcikpICsgXCIsIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzXCIgK1xuICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgXCIgK1xuICAgICAgICAgICAgXCJwcm9wcyBuZWVkIHRvIHVzZSB0aGVpciBrZWJhYi1jYXNlIGVxdWl2YWxlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIFwiICtcbiAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICB2YXIgcmVzID0gW107XG4gIHZhciBpLCBjLCBsYXN0SW5kZXgsIGxhc3Q7XG4gIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICBpZiAoaXNVbmRlZihjKSB8fCB0eXBlb2YgYyA9PT0gJ2Jvb2xlYW4nKSB7IGNvbnRpbnVlIH1cbiAgICBsYXN0SW5kZXggPSByZXMubGVuZ3RoIC0gMTtcbiAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgLy8gIG5lc3RlZFxuICAgIGlmIChBcnJheS5pc0FycmF5KGMpKSB7XG4gICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGMgPSBub3JtYWxpemVBcnJheUNoaWxkcmVuKGMsICgobmVzdGVkSW5kZXggfHwgJycpICsgXCJfXCIgKyBpKSk7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIChjWzBdKS50ZXh0KTtcbiAgICAgICAgICBjLnNoaWZ0KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2guYXBwbHkocmVzLCBjKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgLy8gZXNzZW50aWFsbHkgbWVyZ2VkIHdoZW4gcmVuZGVyZWQgdG8gSFRNTCBzdHJpbmdzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMpO1xuICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAvLyBjb252ZXJ0IHByaW1pdGl2ZSB0byB2bm9kZVxuICAgICAgICByZXMucHVzaChjcmVhdGVUZXh0Vk5vZGUoYykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNUZXh0Tm9kZShjKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYy50ZXh0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgIGlmIChpc1RydWUoY2hpbGRyZW4uX2lzVkxpc3QpICYmXG4gICAgICAgICAgaXNEZWYoYy50YWcpICYmXG4gICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICBpc0RlZihuZXN0ZWRJbmRleCkpIHtcbiAgICAgICAgICBjLmtleSA9IFwiX192bGlzdFwiICsgbmVzdGVkSW5kZXggKyBcIl9cIiArIGkgKyBcIl9fXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gIGlmIChwcm92aWRlKSB7XG4gICAgdm0uX3Byb3ZpZGVkID0gdHlwZW9mIHByb3ZpZGUgPT09ICdmdW5jdGlvbidcbiAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgOiBwcm92aWRlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRJbmplY3Rpb25zICh2bSkge1xuICB2YXIgcmVzdWx0ID0gcmVzb2x2ZUluamVjdCh2bS4kb3B0aW9ucy5pbmplY3QsIHZtKTtcbiAgaWYgKHJlc3VsdCkge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgdmFyIHNsb3RzID0ge307XG4gIGZvciAodmFyIGkgPSAwLCBsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICB2YXIgbmFtZSA9IGRhdGEuc2xvdDtcbiAgICAgIHZhciBzbG90ID0gKHNsb3RzW25hbWVdIHx8IChzbG90c1tuYW1lXSA9IFtdKSk7XG4gICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgIHNsb3QucHVzaC5hcHBseShzbG90LCBjaGlsZC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgfVxuICB9XG4gIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICBmb3IgKHZhciBuYW1lJDEgaW4gc2xvdHMpIHtcbiAgICBpZiAoc2xvdHNbbmFtZSQxXS5ldmVyeShpc1doaXRlc3BhY2UpKSB7XG4gICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICB2YXIgcmVzO1xuICB2YXIgaGFzTm9ybWFsU2xvdHMgPSBPYmplY3Qua2V5cyhub3JtYWxTbG90cykubGVuZ3RoID4gMDtcbiAgdmFyIGlzU3RhYmxlID0gc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiAhaGFzTm9ybWFsU2xvdHM7XG4gIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBpc1N0YWJsZSAmJlxuICAgIHByZXZTbG90cyAmJlxuICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICBrZXkgPT09IHByZXZTbG90cy4ka2V5ICYmXG4gICAgIWhhc05vcm1hbFNsb3RzICYmXG4gICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICkge1xuICAgIC8vIGZhc3QgcGF0aCAyOiBzdGFibGUgc2NvcGVkIHNsb3RzIHcvIG5vIG5vcm1hbCBzbG90cyB0byBwcm94eSxcbiAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICByZXR1cm4gcHJldlNsb3RzXG4gIH0gZWxzZSB7XG4gICAgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5JDEgaW4gc2xvdHMpIHtcbiAgICAgIGlmIChzbG90c1trZXkkMV0gJiYga2V5JDFbMF0gIT09ICckJykge1xuICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGV4cG9zZSBub3JtYWwgc2xvdHMgb24gc2NvcGVkU2xvdHNcbiAgZm9yICh2YXIga2V5JDIgaW4gbm9ybWFsU2xvdHMpIHtcbiAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICByZXNba2V5JDJdID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkkMik7XG4gICAgfVxuICB9XG4gIC8vIGF2b3JpYXogc2VlbXMgdG8gbW9jayBhIG5vbi1leHRlbnNpYmxlICRzY29wZWRTbG90cyBvYmplY3RcbiAgLy8gYW5kIHdoZW4gdGhhdCBpcyBwYXNzZWQgZG93biB0aGlzIHdvdWxkIGNhdXNlIGFuIGVycm9yXG4gIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgIChzbG90cykuX25vcm1hbGl6ZWQgPSByZXM7XG4gIH1cbiAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gIGRlZihyZXMsICcka2V5Jywga2V5KTtcbiAgZGVmKHJlcywgJyRoYXNOb3JtYWwnLCBoYXNOb3JtYWxTbG90cyk7XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5LCBmbikge1xuICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVzID0gYXJndW1lbnRzLmxlbmd0aCA/IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cykgOiBmbih7fSk7XG4gICAgcmVzID0gcmVzICYmIHR5cGVvZiByZXMgPT09ICdvYmplY3QnICYmICFBcnJheS5pc0FycmF5KHJlcylcbiAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICA6IG5vcm1hbGl6ZUNoaWxkcmVuKHJlcyk7XG4gICAgcmV0dXJuIHJlcyAmJiAoXG4gICAgICByZXMubGVuZ3RoID09PSAwIHx8XG4gICAgICAocmVzLmxlbmd0aCA9PT0gMSAmJiByZXNbMF0uaXNDb21tZW50KSAvLyAjOTY1OFxuICAgICkgPyB1bmRlZmluZWRcbiAgICAgIDogcmVzXG4gIH07XG4gIC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpc1xuICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gIGlmIChmbi5wcm94eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cblxuZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNsb3RzW2tleV07IH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICAgIHZhciBpdGVyYXRvciA9IHZhbFtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICByZXQucHVzaChyZW5kZXIocmVzdWx0LnZhbHVlLCByZXQubGVuZ3RoKSk7XG4gICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICByZXQgPSBuZXcgQXJyYXkoa2V5cy5sZW5ndGgpO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxba2V5XSwga2V5LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc0RlZihyZXQpKSB7XG4gICAgcmV0ID0gW107XG4gIH1cbiAgKHJldCkuX2lzVkxpc3QgPSB0cnVlO1xuICByZXR1cm4gcmV0XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgPHNsb3Q+XG4gKi9cbmZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICBuYW1lLFxuICBmYWxsYmFjayxcbiAgcHJvcHMsXG4gIGJpbmRPYmplY3Rcbikge1xuICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gIHZhciBub2RlcztcbiAgaWYgKHNjb3BlZFNsb3RGbikgeyAvLyBzY29wZWQgc2xvdFxuICAgIHByb3BzID0gcHJvcHMgfHwge307XG4gICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICd2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCBvciBBcnJheSB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHZhciBoYXNoO1xuICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGtleSA9PT0gJ2NsYXNzJyB8fFxuICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgIGlzUmVzZXJ2ZWRBdHRyaWJ1dGUoa2V5KVxuICAgICAgICApIHtcbiAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgdHlwZSA9IGRhdGEuYXR0cnMgJiYgZGF0YS5hdHRycy50eXBlO1xuICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgPyBkYXRhLmRvbVByb3BzIHx8IChkYXRhLmRvbVByb3BzID0ge30pXG4gICAgICAgICAgICA6IGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICBoYXNoW2tleV0gPSB2YWx1ZVtrZXldO1xuXG4gICAgICAgICAgaWYgKGlzU3luYykge1xuICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgIG9uWyhcInVwZGF0ZTpcIiArIGtleSldID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkgbG9vcCgga2V5ICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgc3RhdGljIHRyZWVzLlxuICovXG5mdW5jdGlvbiByZW5kZXJTdGF0aWMgKFxuICBpbmRleCxcbiAgaXNJbkZvclxuKSB7XG4gIHZhciBjYWNoZWQgPSB0aGlzLl9zdGF0aWNUcmVlcyB8fCAodGhpcy5fc3RhdGljVHJlZXMgPSBbXSk7XG4gIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgLy8gaWYgaGFzIGFscmVhZHktcmVuZGVyZWQgc3RhdGljIHRyZWUgYW5kIG5vdCBpbnNpZGUgdi1mb3IsXG4gIC8vIHdlIGNhbiByZXVzZSB0aGUgc2FtZSB0cmVlLlxuICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgIHJldHVybiB0cmVlXG4gIH1cbiAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICB0cmVlID0gY2FjaGVkW2luZGV4XSA9IHRoaXMuJG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zW2luZGV4XS5jYWxsKFxuICAgIHRoaXMuX3JlbmRlclByb3h5LFxuICAgIG51bGwsXG4gICAgdGhpcyAvLyBmb3IgcmVuZGVyIGZucyBnZW5lcmF0ZWQgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IHRlbXBsYXRlc1xuICApO1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgKGtleSArIFwiX1wiICsgaSksIGlzT25jZSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgbm9kZS5pc1N0YXRpYyA9IHRydWU7XG4gIG5vZGUua2V5ID0ga2V5O1xuICBub2RlLmlzT25jZSA9IGlzT25jZTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmICghaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICd2LW9uIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QgdmFsdWUnLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgb24gPSBkYXRhLm9uID0gZGF0YS5vbiA/IGV4dGVuZCh7fSwgZGF0YS5vbikgOiB7fTtcbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSBvbltrZXldO1xuICAgICAgICB2YXIgb3VycyA9IHZhbHVlW2tleV07XG4gICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVNjb3BlZFNsb3RzIChcbiAgZm5zLCAvLyBzZWUgZmxvdy92bm9kZVxuICByZXMsXG4gIC8vIHRoZSBmb2xsb3dpbmcgYXJlIGFkZGVkIGluIDIuNlxuICBoYXNEeW5hbWljS2V5cyxcbiAgY29udGVudEhhc2hLZXlcbikge1xuICByZXMgPSByZXMgfHwgeyAkc3RhYmxlOiAhaGFzRHluYW1pY0tleXMgfTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2xvdCA9IGZuc1tpXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbG90KSkge1xuICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgIH0gZWxzZSBpZiAoc2xvdCkge1xuICAgICAgLy8gbWFya2VyIGZvciByZXZlcnNlIHByb3h5aW5nIHYtc2xvdCB3aXRob3V0IHNjb3BlIG9uIHRoaXMuJHNsb3RzXG4gICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICBzbG90LmZuLnByb3h5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgIH1cbiAgfVxuICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAocmVzKS4ka2V5ID0gY29udGVudEhhc2hLZXk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICB2YXIga2V5ID0gdmFsdWVzW2ldO1xuICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgIGJhc2VPYmpbdmFsdWVzW2ldXSA9IHZhbHVlc1tpICsgMV07XG4gICAgfSBlbHNlIGlmIChrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICB7XG4gICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gIH1cbiAgaWYgKGRhdGEuc2xvdCkge1xuICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICB9XG4gIHJldHVybiBjbG9uZVxufVxuXG5mdW5jdGlvbiBtZXJnZVByb3BzICh0bywgZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICB9XG59XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbmxpbmUgaG9va3MgdG8gYmUgaW52b2tlZCBvbiBjb21wb25lbnQgVk5vZGVzIGR1cmluZyBwYXRjaFxudmFyIGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgdmFyIG1vdW50ZWROb2RlID0gdm5vZGU7IC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIGNvbXBvbmVudFZOb2RlSG9va3MucHJlcGF0Y2gobW91bnRlZE5vZGUsIG1vdW50ZWROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlKFxuICAgICAgICB2bm9kZSxcbiAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICk7XG4gICAgICBjaGlsZC4kbW91bnQoaHlkcmF0aW5nID8gdm5vZGUuZWxtIDogdW5kZWZpbmVkLCBoeWRyYXRpbmcpO1xuICAgIH1cbiAgfSxcblxuICBwcmVwYXRjaDogZnVuY3Rpb24gcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IG9sZFZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgIHVwZGF0ZUNoaWxkQ29tcG9uZW50KFxuICAgICAgY2hpbGQsXG4gICAgICBvcHRpb25zLnByb3BzRGF0YSwgLy8gdXBkYXRlZCBwcm9wc1xuICAgICAgb3B0aW9ucy5saXN0ZW5lcnMsIC8vIHVwZGF0ZWQgbGlzdGVuZXJzXG4gICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgb3B0aW9ucy5jaGlsZHJlbiAvLyBuZXcgY2hpbGRyZW5cbiAgICApO1xuICB9LFxuXG4gIGluc2VydDogZnVuY3Rpb24gaW5zZXJ0ICh2bm9kZSkge1xuICAgIHZhciBjb250ZXh0ID0gdm5vZGUuY29udGV4dDtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQpIHtcbiAgICAgIGNvbXBvbmVudEluc3RhbmNlLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgfVxuICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAvLyB2dWUtcm91dGVyIzEyMTJcbiAgICAgICAgLy8gRHVyaW5nIHVwZGF0ZXMsIGEga2VwdC1hbGl2ZSBjb21wb25lbnQncyBjaGlsZCBjb21wb25lbnRzIG1heVxuICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgLy8gb24gaW5jb3JyZWN0IGNoaWxkcmVuLiBJbnN0ZWFkIHdlIHB1c2ggdGhlbSBpbnRvIGEgcXVldWUgd2hpY2ggd2lsbFxuICAgICAgICAvLyBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIHdob2xlIHBhdGNoIHByb2Nlc3MgZW5kZWQuXG4gICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQoY29tcG9uZW50SW5zdGFuY2UsIHRydWUgLyogZGlyZWN0ICovKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBpZiAoIWNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCkge1xuICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG52YXIgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGJhc2VDdG9yID0gY29udGV4dC4kb3B0aW9ucy5fYmFzZTtcblxuICAvLyBwbGFpbiBvcHRpb25zIG9iamVjdDogdHVybiBpdCBpbnRvIGEgY29uc3RydWN0b3JcbiAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgQ3RvciA9IGJhc2VDdG9yLmV4dGVuZChDdG9yKTtcbiAgfVxuXG4gIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgLy8gcmVqZWN0LlxuICBpZiAodHlwZW9mIEN0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB7XG4gICAgICB3YXJuKChcIkludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246IFwiICsgKFN0cmluZyhDdG9yKSkpLCBjb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBhc3luYyBjb21wb25lbnRcbiAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgaWYgKGlzVW5kZWYoQ3Rvci5jaWQpKSB7XG4gICAgYXN5bmNGYWN0b3J5ID0gQ3RvcjtcbiAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgIGlmIChDdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIHJldHVybiBhIHBsYWNlaG9sZGVyIG5vZGUgZm9yIGFzeW5jIGNvbXBvbmVudCwgd2hpY2ggaXMgcmVuZGVyZWRcbiAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgLy8gdGhlIGluZm9ybWF0aW9uIHdpbGwgYmUgdXNlZCBmb3IgYXN5bmMgc2VydmVyLXJlbmRlcmluZyBhbmQgaHlkcmF0aW9uLlxuICAgICAgcmV0dXJuIGNyZWF0ZUFzeW5jUGxhY2Vob2xkZXIoXG4gICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgZGF0YSxcbiAgICAgICAgY29udGV4dCxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHRhZ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIGRhdGEgPSBkYXRhIHx8IHt9O1xuXG4gIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgLy8gY29tcG9uZW50IGNvbnN0cnVjdG9yIGNyZWF0aW9uXG4gIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvcik7XG5cbiAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICBpZiAoaXNEZWYoZGF0YS5tb2RlbCkpIHtcbiAgICB0cmFuc2Zvcm1Nb2RlbChDdG9yLm9wdGlvbnMsIGRhdGEpO1xuICB9XG5cbiAgLy8gZXh0cmFjdCBwcm9wc1xuICB2YXIgcHJvcHNEYXRhID0gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YShkYXRhLCBDdG9yLCB0YWcpO1xuXG4gIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gIGlmIChpc1RydWUoQ3Rvci5vcHRpb25zLmZ1bmN0aW9uYWwpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQoQ3RvciwgcHJvcHNEYXRhLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbilcbiAgfVxuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzLCBzaW5jZSB0aGVzZSBuZWVkcyB0byBiZSB0cmVhdGVkIGFzXG4gIC8vIGNoaWxkIGNvbXBvbmVudCBsaXN0ZW5lcnMgaW5zdGVhZCBvZiBET00gbGlzdGVuZXJzXG4gIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgdmFyIHNsb3QgPSBkYXRhLnNsb3Q7XG4gICAgZGF0YSA9IHt9O1xuICAgIGlmIChzbG90KSB7XG4gICAgICBkYXRhLnNsb3QgPSBzbG90O1xuICAgIH1cbiAgfVxuXG4gIC8vIGluc3RhbGwgY29tcG9uZW50IG1hbmFnZW1lbnQgaG9va3Mgb250byB0aGUgcGxhY2Vob2xkZXIgbm9kZVxuICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgdm5vZGVcbiAgdmFyIG5hbWUgPSBDdG9yLm9wdGlvbnMubmFtZSB8fCB0YWc7XG4gIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAoXCJ2dWUtY29tcG9uZW50LVwiICsgKEN0b3IuY2lkKSArIChuYW1lID8gKFwiLVwiICsgbmFtZSkgOiAnJykpLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKTtcblxuICByZXR1cm4gdm5vZGVcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSAoXG4gIHZub2RlLCAvLyB3ZSBrbm93IGl0J3MgTW91bnRlZENvbXBvbmVudFZOb2RlIGJ1dCBmbG93IGRvZXNuJ3RcbiAgcGFyZW50IC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIHZhciBvcHRpb25zID0ge1xuICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICBfcGFyZW50Vm5vZGU6IHZub2RlLFxuICAgIHBhcmVudDogcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIHZhciBpbmxpbmVUZW1wbGF0ZSA9IHZub2RlLmRhdGEuaW5saW5lVGVtcGxhdGU7XG4gIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICBvcHRpb25zLnJlbmRlciA9IGlubGluZVRlbXBsYXRlLnJlbmRlcjtcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IGlubGluZVRlbXBsYXRlLnN0YXRpY1JlbmRlckZucztcbiAgfVxuICByZXR1cm4gbmV3IHZub2RlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgdmFyIGhvb2tzID0gZGF0YS5ob29rIHx8IChkYXRhLmhvb2sgPSB7fSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3NUb01lcmdlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICB2YXIgZXhpc3RpbmcgPSBob29rc1trZXldO1xuICAgIHZhciB0b01lcmdlID0gY29tcG9uZW50Vk5vZGVIb29rc1trZXldO1xuICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICBob29rc1trZXldID0gZXhpc3RpbmcgPyBtZXJnZUhvb2skMSh0b01lcmdlLCBleGlzdGluZykgOiB0b01lcmdlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtZXJnZUhvb2skMSAoZjEsIGYyKSB7XG4gIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgdmFyIHByb3AgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLnByb3ApIHx8ICd2YWx1ZSc7XG4gIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgOyhkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pKVtwcm9wXSA9IGRhdGEubW9kZWwudmFsdWU7XG4gIHZhciBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgdmFyIGNhbGxiYWNrID0gZGF0YS5tb2RlbC5jYWxsYmFjaztcbiAgaWYgKGlzRGVmKGV4aXN0aW5nKSkge1xuICAgIGlmIChcbiAgICAgIEFycmF5LmlzQXJyYXkoZXhpc3RpbmcpXG4gICAgICAgID8gZXhpc3RpbmcuaW5kZXhPZihjYWxsYmFjaykgPT09IC0xXG4gICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgKSB7XG4gICAgICBvbltldmVudF0gPSBbY2FsbGJhY2tdLmNvbmNhdChleGlzdGluZyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG9uW2V2ZW50XSA9IGNhbGxiYWNrO1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG52YXIgQUxXQVlTX05PUk1BTElaRSA9IDI7XG5cbi8vIHdyYXBwZXIgZnVuY3Rpb24gZm9yIHByb3ZpZGluZyBhIG1vcmUgZmxleGlibGUgaW50ZXJmYWNlXG4vLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZSxcbiAgYWx3YXlzTm9ybWFsaXplXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICBub3JtYWxpemF0aW9uVHlwZSA9IGNoaWxkcmVuO1xuICAgIGNoaWxkcmVuID0gZGF0YTtcbiAgICBkYXRhID0gdW5kZWZpbmVkO1xuICB9XG4gIGlmIChpc1RydWUoYWx3YXlzTm9ybWFsaXplKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgfVxuICByZXR1cm4gX2NyZWF0ZUVsZW1lbnQoY29udGV4dCwgdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUpXG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVFbGVtZW50IChcbiAgY29udGV4dCxcbiAgdGFnLFxuICBkYXRhLFxuICBjaGlsZHJlbixcbiAgbm9ybWFsaXphdGlvblR5cGVcbikge1xuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoKGRhdGEpLl9fb2JfXykpIHtcbiAgICB3YXJuKFxuICAgICAgXCJBdm9pZCB1c2luZyBvYnNlcnZlZCBkYXRhIG9iamVjdCBhcyB2bm9kZSBkYXRhOiBcIiArIChKU09OLnN0cmluZ2lmeShkYXRhKSkgKyBcIlxcblwiICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgdmFyIHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLm5hdGl2ZU9uKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlRoZSAubmF0aXZlIG1vZGlmaWVyIGZvciB2LW9uIGlzIG9ubHkgdmFsaWQgb24gY29tcG9uZW50cyBidXQgaXQgd2FzIHVzZWQgb24gPFwiICsgdGFnICsgXCI+LlwiKSxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgLy8gY29tcG9uZW50XG4gICAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudChDdG9yLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbiwgdGFnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdW5rbm93biBvciB1bmxpc3RlZCBuYW1lc3BhY2VkIGVsZW1lbnRzXG4gICAgICAvLyBjaGVjayBhdCBydW50aW1lIGJlY2F1c2UgaXQgbWF5IGdldCBhc3NpZ25lZCBhIG5hbWVzcGFjZSB3aGVuIGl0c1xuICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICB0YWcsIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gZGlyZWN0IGNvbXBvbmVudCBvcHRpb25zIC8gY29uc3RydWN0b3JcbiAgICB2bm9kZSA9IGNyZWF0ZUNvbXBvbmVudCh0YWcsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICBpZiAoaXNEZWYobnMpKSB7IGFwcGx5TlModm5vZGUsIG5zKTsgfVxuICAgIGlmIChpc0RlZihkYXRhKSkgeyByZWdpc3RlckRlZXBCaW5kaW5ncyhkYXRhKTsgfVxuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICBpc1VuZGVmKGNoaWxkLm5zKSB8fCAoaXNUcnVlKGZvcmNlKSAmJiBjaGlsZC50YWcgIT09ICdzdmcnKSkpIHtcbiAgICAgICAgYXBwbHlOUyhjaGlsZCwgbnMsIGZvcmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gcmVmICM1MzE4XG4vLyBuZWNlc3NhcnkgdG8gZW5zdXJlIHBhcmVudCByZS1yZW5kZXIgd2hlbiBkZWVwIGJpbmRpbmdzIGxpa2UgOnN0eWxlIGFuZFxuLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbmZ1bmN0aW9uIHJlZ2lzdGVyRGVlcEJpbmRpbmdzIChkYXRhKSB7XG4gIGlmIChpc09iamVjdChkYXRhLnN0eWxlKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICB9XG4gIGlmIChpc09iamVjdChkYXRhLmNsYXNzKSkge1xuICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0UmVuZGVyICh2bSkge1xuICB2bS5fdm5vZGUgPSBudWxsOyAvLyB0aGUgcm9vdCBvZiB0aGUgY2hpbGQgdHJlZVxuICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gIHZhciBvcHRpb25zID0gdm0uJG9wdGlvbnM7XG4gIHZhciBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiwgcmVuZGVyQ29udGV4dCk7XG4gIHZtLiRzY29wZWRTbG90cyA9IGVtcHR5T2JqZWN0O1xuICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgLy8gc28gdGhhdCB3ZSBnZXQgcHJvcGVyIHJlbmRlciBjb250ZXh0IGluc2lkZSBpdC5cbiAgLy8gYXJncyBvcmRlcjogdGFnLCBkYXRhLCBjaGlsZHJlbiwgbm9ybWFsaXphdGlvblR5cGUsIGFsd2F5c05vcm1hbGl6ZVxuICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICB2bS5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCBmYWxzZSk7IH07XG4gIC8vIG5vcm1hbGl6YXRpb24gaXMgYWx3YXlzIGFwcGxpZWQgZm9yIHRoZSBwdWJsaWMgdmVyc2lvbiwgdXNlZCBpblxuICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgdm0uJGNyZWF0ZUVsZW1lbnQgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgdHJ1ZSk7IH07XG5cbiAgLy8gJGF0dHJzICYgJGxpc3RlbmVycyBhcmUgZXhwb3NlZCBmb3IgZWFzaWVyIEhPQyBjcmVhdGlvbi5cbiAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICB2YXIgcGFyZW50RGF0YSA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmRhdGE7XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkYXR0cnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRsaXN0ZW5lcnMgaXMgcmVhZG9ubHkuXCIsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxufVxuXG52YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgdmFyIHJlbmRlciA9IHJlZi5yZW5kZXI7XG4gICAgdmFyIF9wYXJlbnRWbm9kZSA9IHJlZi5fcGFyZW50Vm5vZGU7XG5cbiAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICB2bS4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhcbiAgICAgICAgX3BhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgdm0uJHNjb3BlZFNsb3RzXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIHNldCBwYXJlbnQgdm5vZGUuIHRoaXMgYWxsb3dzIHJlbmRlciBmdW5jdGlvbnMgdG8gaGF2ZSBhY2Nlc3NcbiAgICAvLyB0byB0aGUgZGF0YSBvbiB0aGUgcGxhY2Vob2xkZXIgbm9kZS5cbiAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgLy8gcmVuZGVyIHNlbGZcbiAgICB2YXIgdm5vZGU7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBtYWludGFpbiBhIHN0YWNrIGJlY2F1c2UgYWxsIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gc2VwYXJhdGVseSBmcm9tIG9uZSBhbm90aGVyLiBOZXN0ZWQgY29tcG9uZW50J3MgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IHZtO1xuICAgICAgdm5vZGUgPSByZW5kZXIuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJyZW5kZXJcIik7XG4gICAgICAvLyByZXR1cm4gZXJyb3IgcmVuZGVyIHJlc3VsdCxcbiAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHZtLiRvcHRpb25zLnJlbmRlckVycm9yKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQsIGUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgd2FybihcbiAgICAgICAgXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6IFwiICsgKFN0cmluZyhmYWN0b3J5KSkgK1xuICAgICAgICAocmVhc29uID8gKFwiXFxuUmVhc29uOiBcIiArIHJlYXNvbikgOiAnJylcbiAgICAgICk7XG4gICAgICBpZiAoaXNEZWYoZmFjdG9yeS5lcnJvckNvbXApKSB7XG4gICAgICAgIGZhY3RvcnkuZXJyb3IgPSB0cnVlO1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICBpZiAoaXNPYmplY3QocmVzKSkge1xuICAgICAgaWYgKGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShyZXMuY29tcG9uZW50KSkge1xuICAgICAgICByZXMuY29tcG9uZW50LnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgIGZhY3RvcnkuZXJyb3JDb21wID0gZW5zdXJlQ3RvcihyZXMuZXJyb3IsIGJhc2VDdG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICBmYWN0b3J5LmxvYWRpbmdDb21wID0gZW5zdXJlQ3RvcihyZXMubG9hZGluZywgYmFzZUN0b3IpO1xuICAgICAgICAgIGlmIChyZXMuZGVsYXkgPT09IDApIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSAmJiBpc1VuZGVmKGZhY3RvcnkuZXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlcy5kZWxheSB8fCAyMDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc0RlZihyZXMudGltZW91dCkpIHtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRpbWVyVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgXCJ0aW1lb3V0IChcIiArIChyZXMudGltZW91dCkgKyBcIm1zKVwiXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgcmVzLnRpbWVvdXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3luYyA9IGZhbHNlO1xuICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nXG4gICAgICA/IGZhY3RvcnkubG9hZGluZ0NvbXBcbiAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpc0FzeW5jUGxhY2Vob2xkZXIgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUuaXNDb21tZW50ICYmIG5vZGUuYXN5bmNGYWN0b3J5XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBnZXRGaXJzdENvbXBvbmVudENoaWxkIChjaGlsZHJlbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgdmFyIGxpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGlmIChsaXN0ZW5lcnMpIHtcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycyk7XG4gIH1cbn1cblxudmFyIHRhcmdldDtcblxuZnVuY3Rpb24gYWRkIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMSAoZXZlbnQsIGZuKSB7XG4gIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyIChldmVudCwgZm4pIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gIFZ1ZS5wcm90b3R5cGUuJG9uID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2bS4kb24oZXZlbnRbaV0sIGZuKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHZtLl9ldmVudHNbZXZlbnRdIHx8ICh2bS5fZXZlbnRzW2V2ZW50XSA9IFtdKSkucHVzaChmbik7XG4gICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgLy8gaW5zdGVhZCBvZiBhIGhhc2ggbG9va3VwXG4gICAgICBpZiAoaG9va1JFLnRlc3QoZXZlbnQpKSB7XG4gICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvbmNlID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYWxsXG4gICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICAvLyBhcnJheSBvZiBldmVudHNcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnRbaSQxXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgIGlmICghY2JzKSB7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgaWYgKCFmbikge1xuICAgICAgdm0uX2V2ZW50c1tldmVudF0gPSBudWxsO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGhhbmRsZXJcbiAgICB2YXIgY2I7XG4gICAgdmFyIGkgPSBjYnMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcbiAgICAgICAgY2JzLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCh2bS4kb3B0aW9ucy50ZW1wbGF0ZSAmJiB2bS4kb3B0aW9ucy50ZW1wbGF0ZS5jaGFyQXQoMCkgIT09ICcjJykgfHxcbiAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IGFyZSB1c2luZyB0aGUgcnVudGltZS1vbmx5IGJ1aWxkIG9mIFZ1ZSB3aGVyZSB0aGUgdGVtcGxhdGUgJyArXG4gICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgJ3JlbmRlciBmdW5jdGlvbnMsIG9yIHVzZSB0aGUgY29tcGlsZXItaW5jbHVkZWQgYnVpbGQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gIHZhciB1cGRhdGVDb21wb25lbnQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IHRydWU7XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgd2hldGhlciBjb21wb25lbnQgaGFzIHNsb3QgY2hpbGRyZW5cbiAgLy8gd2UgbmVlZCB0byBkbyB0aGlzIGJlZm9yZSBvdmVyd3JpdGluZyAkb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4uXG5cbiAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAvLyBkeW5hbWljIHNsb3QgbmFtZXMpLiBTdGF0aWMgc2NvcGVkIHNsb3RzIGNvbXBpbGVkIGZyb20gdGVtcGxhdGUgaGFzIHRoZVxuICAvLyBcIiRzdGFibGVcIiBtYXJrZXIuXG4gIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gIHZhciBvbGRTY29wZWRTbG90cyA9IHZtLiRzY29wZWRTbG90cztcbiAgdmFyIGhhc0R5bmFtaWNTY29wZWRTbG90ID0gISEoXG4gICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChvbGRTY29wZWRTbG90cyAhPT0gZW1wdHlPYmplY3QgJiYgIW9sZFNjb3BlZFNsb3RzLiRzdGFibGUpIHx8XG4gICAgKG5ld1Njb3BlZFNsb3RzICYmIHZtLiRzY29wZWRTbG90cy4ka2V5ICE9PSBuZXdTY29wZWRTbG90cy4ka2V5KVxuICApO1xuXG4gIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgLy8gdXBkYXRlLiBEeW5hbWljIHNjb3BlZCBzbG90cyBtYXkgYWxzbyBoYXZlIGNoYW5nZWQuIEluIHN1Y2ggY2FzZXMsIGEgZm9yY2VkXG4gIC8vIHVwZGF0ZSBpcyBuZWNlc3NhcnkgdG8gZW5zdXJlIGNvcnJlY3RuZXNzLlxuICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzO1xuICAgIHZhciBwcm9wS2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyB8fCBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICB2YXIgcHJvcE9wdGlvbnMgPSB2bS4kb3B0aW9ucy5wcm9wczsgLy8gd3RmIGZsb3c/XG4gICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgIH1cbiAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YSA9IHByb3BzRGF0YTtcbiAgfVxuXG4gIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgbGlzdGVuZXJzID0gbGlzdGVuZXJzIHx8IGVtcHR5T2JqZWN0O1xuICB2YXIgb2xkTGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzKHZtLCBsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyk7XG5cbiAgLy8gcmVzb2x2ZSBzbG90cyArIGZvcmNlIHVwZGF0ZSBpZiBoYXMgY2hpbGRyZW5cbiAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMocmVuZGVyQ2hpbGRyZW4sIHBhcmVudFZub2RlLmNvbnRleHQpO1xuICAgIHZtLiRmb3JjZVVwZGF0ZSgpO1xuICB9XG5cbiAge1xuICAgIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW5JbmFjdGl2ZVRyZWUgKHZtKSB7XG4gIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgIGlmICh2bS5faW5hY3RpdmUpIHsgcmV0dXJuIHRydWUgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHZhciBoYW5kbGVycyA9IHZtLiRvcHRpb25zW2hvb2tdO1xuICB2YXIgaW5mbyA9IGhvb2sgKyBcIiBob29rXCI7XG4gIGlmIChoYW5kbGVycykge1xuICAgIGZvciAodmFyIGkgPSAwLCBqID0gaGFuZGxlcnMubGVuZ3RoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhoYW5kbGVyc1tpXSwgdm0sIG51bGwsIHZtLCBpbmZvKTtcbiAgICB9XG4gIH1cbiAgaWYgKHZtLl9oYXNIb29rRXZlbnQpIHtcbiAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gIH1cbiAgcG9wVGFyZ2V0KCk7XG59XG5cbi8qICAqL1xuXG52YXIgTUFYX1VQREFURV9DT1VOVCA9IDEwMDtcblxudmFyIHF1ZXVlID0gW107XG52YXIgYWN0aXZhdGVkQ2hpbGRyZW4gPSBbXTtcbnZhciBoYXMgPSB7fTtcbnZhciBjaXJjdWxhciA9IHt9O1xudmFyIHdhaXRpbmcgPSBmYWxzZTtcbnZhciBmbHVzaGluZyA9IGZhbHNlO1xudmFyIGluZGV4ID0gMDtcblxuLyoqXG4gKiBSZXNldCB0aGUgc2NoZWR1bGVyJ3Mgc3RhdGUuXG4gKi9cbmZ1bmN0aW9uIHJlc2V0U2NoZWR1bGVyU3RhdGUgKCkge1xuICBpbmRleCA9IHF1ZXVlLmxlbmd0aCA9IGFjdGl2YXRlZENoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIGhhcyA9IHt9O1xuICB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAoaGFzW2lkXSAhPSBudWxsKSB7XG4gICAgICBjaXJjdWxhcltpZF0gPSAoY2lyY3VsYXJbaWRdIHx8IDApICsgMTtcbiAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBtYXkgaGF2ZSBhbiBpbmZpbml0ZSB1cGRhdGUgbG9vcCAnICsgKFxuICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgID8gKFwiaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIilcbiAgICAgICAgICAgICAgOiBcImluIGEgY29tcG9uZW50IHJlbmRlciBmdW5jdGlvbi5cIlxuICAgICAgICAgICksXG4gICAgICAgICAgd2F0Y2hlci52bVxuICAgICAgICApO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGtlZXAgY29waWVzIG9mIHBvc3QgcXVldWVzIGJlZm9yZSByZXNldHRpbmcgc3RhdGVcbiAgdmFyIGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgcmVzZXRTY2hlZHVsZXJTdGF0ZSgpO1xuXG4gIC8vIGNhbGwgY29tcG9uZW50IHVwZGF0ZWQgYW5kIGFjdGl2YXRlZCBob29rc1xuICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICBjYWxsVXBkYXRlZEhvb2tzKHVwZGF0ZWRRdWV1ZSk7XG5cbiAgLy8gZGV2dG9vbCBob29rXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZGV2dG9vbHMgJiYgY29uZmlnLmRldnRvb2xzKSB7XG4gICAgZGV2dG9vbHMuZW1pdCgnZmx1c2gnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsVXBkYXRlZEhvb2tzIChxdWV1ZSkge1xuICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciB3YXRjaGVyID0gcXVldWVbaV07XG4gICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICB2YXIgaWQgPSB3YXRjaGVyLmlkO1xuICBpZiAoaGFzW2lkXSA9PSBudWxsKSB7XG4gICAgaGFzW2lkXSA9IHRydWU7XG4gICAgaWYgKCFmbHVzaGluZykge1xuICAgICAgcXVldWUucHVzaCh3YXRjaGVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaWYgYWxyZWFkeSBmbHVzaGluZywgc3BsaWNlIHRoZSB3YXRjaGVyIGJhc2VkIG9uIGl0cyBpZFxuICAgICAgLy8gaWYgYWxyZWFkeSBwYXN0IGl0cyBpZCwgaXQgd2lsbCBiZSBydW4gbmV4dCBpbW1lZGlhdGVseS5cbiAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgIHdoaWxlIChpID4gaW5kZXggJiYgcXVldWVbaV0uaWQgPiB3YXRjaGVyLmlkKSB7XG4gICAgICAgIGktLTtcbiAgICAgIH1cbiAgICAgIHF1ZXVlLnNwbGljZShpICsgMSwgMCwgd2F0Y2hlcik7XG4gICAgfVxuICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgIGlmICghd2FpdGluZykge1xuICAgICAgd2FpdGluZyA9IHRydWU7XG5cbiAgICAgIGlmICghY29uZmlnLmFzeW5jKSB7XG4gICAgICAgIGZsdXNoU2NoZWR1bGVyUXVldWUoKTtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBuZXh0VGljayhmbHVzaFNjaGVkdWxlclF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cblxuXG52YXIgdWlkJDIgPSAwO1xuXG4vKipcbiAqIEEgd2F0Y2hlciBwYXJzZXMgYW4gZXhwcmVzc2lvbiwgY29sbGVjdHMgZGVwZW5kZW5jaWVzLFxuICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAqIFRoaXMgaXMgdXNlZCBmb3IgYm90aCB0aGUgJHdhdGNoKCkgYXBpIGFuZCBkaXJlY3RpdmVzLlxuICovXG52YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgY2IsXG4gIG9wdGlvbnMsXG4gIGlzUmVuZGVyV2F0Y2hlclxuKSB7XG4gIHRoaXMudm0gPSB2bTtcbiAgaWYgKGlzUmVuZGVyV2F0Y2hlcikge1xuICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgfVxuICB2bS5fd2F0Y2hlcnMucHVzaCh0aGlzKTtcbiAgLy8gb3B0aW9uc1xuICBpZiAob3B0aW9ucykge1xuICAgIHRoaXMuZGVlcCA9ICEhb3B0aW9ucy5kZWVwO1xuICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgIHRoaXMubGF6eSA9ICEhb3B0aW9ucy5sYXp5O1xuICAgIHRoaXMuc3luYyA9ICEhb3B0aW9ucy5zeW5jO1xuICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5kZWVwID0gdGhpcy51c2VyID0gdGhpcy5sYXp5ID0gdGhpcy5zeW5jID0gZmFsc2U7XG4gIH1cbiAgdGhpcy5jYiA9IGNiO1xuICB0aGlzLmlkID0gKyt1aWQkMjsgLy8gdWlkIGZvciBiYXRjaGluZ1xuICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gIHRoaXMuZGlydHkgPSB0aGlzLmxhenk7IC8vIGZvciBsYXp5IHdhdGNoZXJzXG4gIHRoaXMuZGVwcyA9IFtdO1xuICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgdGhpcy5kZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLm5ld0RlcElkcyA9IG5ldyBfU2V0KCk7XG4gIHRoaXMuZXhwcmVzc2lvbiA9IGV4cE9yRm4udG9TdHJpbmcoKTtcbiAgLy8gcGFyc2UgZXhwcmVzc2lvbiBmb3IgZ2V0dGVyXG4gIGlmICh0eXBlb2YgZXhwT3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmdldHRlciA9IHBhcnNlUGF0aChleHBPckZuKTtcbiAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICB0aGlzLmdldHRlciA9IG5vb3A7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgJ1dhdGNoZXIgb25seSBhY2NlcHRzIHNpbXBsZSBkb3QtZGVsaW1pdGVkIHBhdGhzLiAnICtcbiAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHRoaXMudmFsdWUgPSB0aGlzLmxhenlcbiAgICA/IHVuZGVmaW5lZFxuICAgIDogdGhpcy5nZXQoKTtcbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiBnZXQgKCkge1xuICBwdXNoVGFyZ2V0KHRoaXMpO1xuICB2YXIgdmFsdWU7XG4gIHZhciB2bSA9IHRoaXMudm07XG4gIHRyeSB7XG4gICAgdmFsdWUgPSB0aGlzLmdldHRlci5jYWxsKHZtLCB2bSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICBoYW5kbGVFcnJvcihlLCB2bSwgKFwiZ2V0dGVyIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICBpZiAodGhpcy5kZWVwKSB7XG4gICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgfVxuICByZXR1cm4gdmFsdWVcbn07XG5cbi8qKlxuICogQWRkIGEgZGVwZW5kZW5jeSB0byB0aGlzIGRpcmVjdGl2ZS5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuYWRkRGVwID0gZnVuY3Rpb24gYWRkRGVwIChkZXApIHtcbiAgdmFyIGlkID0gZGVwLmlkO1xuICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICB0aGlzLm5ld0RlcElkcy5hZGQoaWQpO1xuICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICBkZXAuYWRkU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5jbGVhbnVwRGVwcyA9IGZ1bmN0aW9uIGNsZWFudXBEZXBzICgpIHtcbiAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIGRlcCA9IHRoaXMuZGVwc1tpXTtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgfVxuICB2YXIgdG1wID0gdGhpcy5kZXBJZHM7XG4gIHRoaXMuZGVwSWRzID0gdGhpcy5uZXdEZXBJZHM7XG4gIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICB0bXAgPSB0aGlzLmRlcHM7XG4gIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICB0aGlzLm5ld0RlcHMubGVuZ3RoID0gMDtcbn07XG5cbi8qKlxuICogU3Vic2NyaWJlciBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiB1cGRhdGUgKCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodGhpcy5sYXp5KSB7XG4gICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgdGhpcy5ydW4oKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gIH1cbn07XG5cbi8qKlxuICogU2NoZWR1bGVyIGpvYiBpbnRlcmZhY2UuXG4gKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiBydW4gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmIChcbiAgICAgIHZhbHVlICE9PSB0aGlzLnZhbHVlIHx8XG4gICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgIC8vIGhhdmUgbXV0YXRlZC5cbiAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgdGhpcy5kZWVwXG4gICAgKSB7XG4gICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoaXMuY2IuY2FsbCh0aGlzLnZtLCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdGhpcy52bSwgKFwiY2FsbGJhY2sgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICogVGhpcyBvbmx5IGdldHMgY2FsbGVkIGZvciBsYXp5IHdhdGNoZXJzLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgdGhpcy52YWx1ZSA9IHRoaXMuZ2V0KCk7XG4gIHRoaXMuZGlydHkgPSBmYWxzZTtcbn07XG5cbi8qKlxuICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmRlcGVuZCA9IGZ1bmN0aW9uIGRlcGVuZCAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHRoaXMuZGVwc1tpXS5kZXBlbmQoKTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZW1vdmUgc2VsZiBmcm9tIGFsbCBkZXBlbmRlbmNpZXMnIHN1YnNjcmliZXIgbGlzdC5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAvLyB0aGlzIGlzIGEgc29tZXdoYXQgZXhwZW5zaXZlIG9wZXJhdGlvbiBzbyB3ZSBza2lwIGl0XG4gICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgIHJlbW92ZSh0aGlzLnZtLl93YXRjaGVycywgdGhpcyk7XG4gICAgfVxuICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgIH1cbiAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlO1xuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICB2YXIgb3B0cyA9IHZtLiRvcHRpb25zO1xuICBpZiAob3B0cy5wcm9wcykgeyBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpOyB9XG4gIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICBpZiAob3B0cy53YXRjaCAmJiBvcHRzLndhdGNoICE9PSBuYXRpdmVXYXRjaCkge1xuICAgIGluaXRXYXRjaCh2bSwgb3B0cy53YXRjaCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzICh2bSwgcHJvcHNPcHRpb25zKSB7XG4gIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gIHZhciBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgdmFyIGtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgPSBbXTtcbiAgdmFyIGlzUm9vdCA9ICF2bS4kcGFyZW50O1xuICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgaWYgKCFpc1Jvb3QpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICB9XG4gIHZhciBsb29wID0gZnVuY3Rpb24gKCBrZXkgKSB7XG4gICAga2V5cy5wdXNoKGtleSk7XG4gICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIlxcXCJcIiArIGh5cGhlbmF0ZWRLZXkgKyBcIlxcXCIgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUgYW5kIGNhbm5vdCBiZSB1c2VkIGFzIGNvbXBvbmVudCBwcm9wLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBcIkF2b2lkIG11dGF0aW5nIGEgcHJvcCBkaXJlY3RseSBzaW5jZSB0aGUgdmFsdWUgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgIFwiSW5zdGVhZCwgdXNlIGEgZGF0YSBvciBjb21wdXRlZCBwcm9wZXJ0eSBiYXNlZCBvbiB0aGUgcHJvcCdzIFwiICtcbiAgICAgICAgICAgIFwidmFsdWUuIFByb3AgYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBzdGF0aWMgcHJvcHMgYXJlIGFscmVhZHkgcHJveGllZCBvbiB0aGUgY29tcG9uZW50J3MgcHJvdG90eXBlXG4gICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAvLyBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgfVxuICB9O1xuXG4gIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICB2YXIgZGF0YSA9IHZtLiRvcHRpb25zLmRhdGE7XG4gIGRhdGEgPSB2bS5fZGF0YSA9IHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nXG4gICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgIDogZGF0YSB8fCB7fTtcbiAgaWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG4gICAgZGF0YSA9IHt9O1xuICAgIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICB7XG4gICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgKFwiR2V0dGVyIGlzIG1pc3NpbmcgZm9yIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIi5cIiksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAoc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAge1xuICAgICAgaWYgKHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIHR5cGUgXFxcIlwiICsgKHR5cGVvZiBtZXRob2RzW2tleV0pICsgXCJcXFwiIGluIHRoZSBjb21wb25lbnQgZGVmaW5pdGlvbi4gXCIgK1xuICAgICAgICAgIFwiRGlkIHlvdSByZWZlcmVuY2UgdGhlIGZ1bmN0aW9uIGNvcnJlY3RseT9cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIChcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5cIiksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIk1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggYW4gZXhpc3RpbmcgVnVlIGluc3RhbmNlIG1ldGhvZC4gXCIgK1xuICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2bVtrZXldID0gdHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJyA/IG5vb3AgOiBiaW5kKG1ldGhvZHNba2V5XSwgdm0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRXYXRjaCAodm0sIHdhdGNoKSB7XG4gIGZvciAodmFyIGtleSBpbiB3YXRjaCkge1xuICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhdGNoZXIgKFxuICB2bSxcbiAgZXhwT3JGbixcbiAgaGFuZGxlcixcbiAgb3B0aW9uc1xuKSB7XG4gIGlmIChpc1BsYWluT2JqZWN0KGhhbmRsZXIpKSB7XG4gICAgb3B0aW9ucyA9IGhhbmRsZXI7XG4gICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgfVxuICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICB9XG4gIHJldHVybiB2bS4kd2F0Y2goZXhwT3JGbiwgaGFuZGxlciwgb3B0aW9ucylcbn1cblxuZnVuY3Rpb24gc3RhdGVNaXhpbiAoVnVlKSB7XG4gIC8vIGZsb3cgc29tZWhvdyBoYXMgcHJvYmxlbXMgd2l0aCBkaXJlY3RseSBkZWNsYXJlZCBkZWZpbml0aW9uIG9iamVjdFxuICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgLy8gdGhlIG9iamVjdCBoZXJlLlxuICB2YXIgZGF0YURlZiA9IHt9O1xuICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgdmFyIHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckcHJvcHMnLCBwcm9wc0RlZik7XG5cbiAgVnVlLnByb3RvdHlwZS4kc2V0ID0gc2V0O1xuICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgVnVlLnByb3RvdHlwZS4kd2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgZXhwT3JGbixcbiAgICBjYixcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgIGlmIChvcHRpb25zLmltbWVkaWF0ZSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY2IuY2FsbCh2bSwgd2F0Y2hlci52YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBoYW5kbGVFcnJvcihlcnJvciwgdm0sIChcImNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbnZhciB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgLy8gYSB1aWRcbiAgICB2bS5fdWlkID0gdWlkJDMrKztcblxuICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyAodm0uX3VpZCk7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKChcInZ1ZSBcIiArICh2bS5fbmFtZSkgKyBcIiBpbml0XCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9XG5cbiAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgIHZtLiRtb3VudCh2bS4kb3B0aW9ucy5lbCk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0SW50ZXJuYWxDb21wb25lbnQgKHZtLCBvcHRpb25zKSB7XG4gIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAvLyBkb2luZyB0aGlzIGJlY2F1c2UgaXQncyBmYXN0ZXIgdGhhbiBkeW5hbWljIGVudW1lcmF0aW9uLlxuICB2YXIgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICB2YXIgdm5vZGVDb21wb25lbnRPcHRpb25zID0gcGFyZW50Vm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xuICBvcHRzLl9wYXJlbnRMaXN0ZW5lcnMgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMubGlzdGVuZXJzO1xuICBvcHRzLl9yZW5kZXJDaGlsZHJlbiA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5jaGlsZHJlbjtcbiAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztcblxuICBpZiAob3B0aW9ucy5yZW5kZXIpIHtcbiAgICBvcHRzLnJlbmRlciA9IG9wdGlvbnMucmVuZGVyO1xuICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgaWYgKEN0b3Iuc3VwZXIpIHtcbiAgICB2YXIgc3VwZXJPcHRpb25zID0gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yLnN1cGVyKTtcbiAgICB2YXIgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgdmFyIG1vZGlmaWVkT3B0aW9ucyA9IHJlc29sdmVNb2RpZmllZE9wdGlvbnMoQ3Rvcik7XG4gICAgICAvLyB1cGRhdGUgYmFzZSBleHRlbmQgb3B0aW9uc1xuICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xuICAgICAgICBleHRlbmQoQ3Rvci5leHRlbmRPcHRpb25zLCBtb2RpZmllZE9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7XG4gICAgICBpZiAob3B0aW9ucy5uYW1lKSB7XG4gICAgICAgIG9wdGlvbnMuY29tcG9uZW50c1tvcHRpb25zLm5hbWVdID0gQ3RvcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnNcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyAoQ3Rvcikge1xuICB2YXIgbW9kaWZpZWQ7XG4gIHZhciBsYXRlc3QgPSBDdG9yLm9wdGlvbnM7XG4gIHZhciBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICBpZiAobGF0ZXN0W2tleV0gIT09IHNlYWxlZFtrZXldKSB7XG4gICAgICBpZiAoIW1vZGlmaWVkKSB7IG1vZGlmaWVkID0ge307IH1cbiAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vZGlmaWVkXG59XG5cbmZ1bmN0aW9uIFZ1ZSAob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChuYW1lKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUobmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgdmFyIHByb3BzID0gQ29tcC5vcHRpb25zLnByb3BzO1xuICBmb3IgKHZhciBrZXkgaW4gcHJvcHMpIHtcbiAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICB2YXIgY29tcHV0ZWQgPSBDb21wLm9wdGlvbnMuY29tcHV0ZWQ7XG4gIGZvciAodmFyIGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgIGlkLFxuICAgICAgZGVmaW5pdGlvblxuICAgICkge1xuICAgICAgaWYgKCFkZWZpbml0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnKSB7XG4gICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NvbXBvbmVudCcgJiYgaXNQbGFpbk9iamVjdChkZWZpbml0aW9uKSkge1xuICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICBkZWZpbml0aW9uID0gdGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChkZWZpbml0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBkZWZpbml0aW9uID0geyBiaW5kOiBkZWZpbml0aW9uLCB1cGRhdGU6IGRlZmluaXRpb24gfTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25cbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gIHJldHVybiBvcHRzICYmIChvcHRzLkN0b3Iub3B0aW9ucy5uYW1lIHx8IG9wdHMudGFnKVxufVxuXG5mdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHBhdHRlcm4pKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhdHRlcm4uc3BsaXQoJywnKS5pbmRleE9mKG5hbWUpID4gLTFcbiAgfSBlbHNlIGlmIChpc1JlZ0V4cChwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZSAoa2VlcEFsaXZlSW5zdGFuY2UsIGZpbHRlcikge1xuICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgdmFyIGtleXMgPSBrZWVwQWxpdmVJbnN0YW5jZS5rZXlzO1xuICB2YXIgX3Zub2RlID0ga2VlcEFsaXZlSW5zdGFuY2UuX3Zub2RlO1xuICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICB2YXIgY2FjaGVkTm9kZSA9IGNhY2hlW2tleV07XG4gICAgaWYgKGNhY2hlZE5vZGUpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjYWNoZWROb2RlLmNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgaWYgKG5hbWUgJiYgIWZpbHRlcihuYW1lKSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleSwga2V5cywgX3Zub2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJ1bmVDYWNoZUVudHJ5IChcbiAgY2FjaGUsXG4gIGtleSxcbiAga2V5cyxcbiAgY3VycmVudFxuKSB7XG4gIHZhciBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbnZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxudmFyIEtlZXBBbGl2ZSA9IHtcbiAgbmFtZTogJ2tlZXAtYWxpdmUnLFxuICBhYnN0cmFjdDogdHJ1ZSxcblxuICBwcm9wczoge1xuICAgIGluY2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgbWF4OiBbU3RyaW5nLCBOdW1iZXJdXG4gIH0sXG5cbiAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgdGhpcy5jYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdGhpcy5rZXlzID0gW107XG4gIH0sXG5cbiAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAodmFyIGtleSBpbiB0aGlzLmNhY2hlKSB7XG4gICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgIH1cbiAgfSxcblxuICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcHJ1bmVDYWNoZSh0aGlzJDEsIGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiAhbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChjb21wb25lbnRPcHRpb25zKSB7XG4gICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICB2YXIgcmVmID0gdGhpcztcbiAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICB2YXIgZXhjbHVkZSA9IHJlZi5leGNsdWRlO1xuICAgICAgaWYgKFxuICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgKGluY2x1ZGUgJiYgKCFuYW1lIHx8ICFtYXRjaGVzKGluY2x1ZGUsIG5hbWUpKSkgfHxcbiAgICAgICAgLy8gZXhjbHVkZWRcbiAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiB2bm9kZVxuICAgICAgfVxuXG4gICAgICB2YXIgcmVmJDEgPSB0aGlzO1xuICAgICAgdmFyIGNhY2hlID0gcmVmJDEuY2FjaGU7XG4gICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICB2YXIga2V5ID0gdm5vZGUua2V5ID09IG51bGxcbiAgICAgICAgLy8gc2FtZSBjb25zdHJ1Y3RvciBtYXkgZ2V0IHJlZ2lzdGVyZWQgYXMgZGlmZmVyZW50IGxvY2FsIGNvbXBvbmVudHNcbiAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICA/IGNvbXBvbmVudE9wdGlvbnMuQ3Rvci5jaWQgKyAoY29tcG9uZW50T3B0aW9ucy50YWcgPyAoXCI6OlwiICsgKGNvbXBvbmVudE9wdGlvbnMudGFnKSkgOiAnJylcbiAgICAgICAgOiB2bm9kZS5rZXk7XG4gICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNhY2hlW2tleV0uY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIC8vIG1ha2UgY3VycmVudCBrZXkgZnJlc2hlc3RcbiAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FjaGVba2V5XSA9IHZub2RlO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgLy8gcHJ1bmUgb2xkZXN0IGVudHJ5XG4gICAgICAgIGlmICh0aGlzLm1heCAmJiBrZXlzLmxlbmd0aCA+IHBhcnNlSW50KHRoaXMubWF4KSkge1xuICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHZub2RlIHx8IChzbG90ICYmIHNsb3RbMF0pXG4gIH1cbn07XG5cbnZhciBidWlsdEluQ29tcG9uZW50cyA9IHtcbiAgS2VlcEFsaXZlOiBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIHZhciBjb25maWdEZWYgPSB7fTtcbiAgY29uZmlnRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbmZpZzsgfTtcbiAge1xuICAgIGNvbmZpZ0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZSwgJ2NvbmZpZycsIGNvbmZpZ0RlZik7XG5cbiAgLy8gZXhwb3NlZCB1dGlsIG1ldGhvZHMuXG4gIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAvLyB0aGVtIHVubGVzcyB5b3UgYXJlIGF3YXJlIG9mIHRoZSByaXNrLlxuICBWdWUudXRpbCA9IHtcbiAgICB3YXJuOiB3YXJuLFxuICAgIGV4dGVuZDogZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9uczogbWVyZ2VPcHRpb25zLFxuICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICB9O1xuXG4gIFZ1ZS5zZXQgPSBzZXQ7XG4gIFZ1ZS5kZWxldGUgPSBkZWw7XG4gIFZ1ZS5uZXh0VGljayA9IG5leHRUaWNrO1xuXG4gIC8vIDIuNiBleHBsaWNpdCBvYnNlcnZhYmxlIEFQSVxuICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBvYnNlcnZlKG9iaik7XG4gICAgcmV0dXJuIG9ialxuICB9O1xuXG4gIFZ1ZS5vcHRpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgfSk7XG5cbiAgLy8gdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBcImJhc2VcIiBjb25zdHJ1Y3RvciB0byBleHRlbmQgYWxsIHBsYWluLW9iamVjdFxuICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgVnVlLm9wdGlvbnMuX2Jhc2UgPSBWdWU7XG5cbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIGJ1aWx0SW5Db21wb25lbnRzKTtcblxuICBpbml0VXNlKFZ1ZSk7XG4gIGluaXRNaXhpbiQxKFZ1ZSk7XG4gIGluaXRFeHRlbmQoVnVlKTtcbiAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG59XG5cbmluaXRHbG9iYWxBUEkoVnVlKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gIGdldDogaXNTZXJ2ZXJSZW5kZXJpbmdcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7XG4gIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFxufSk7XG5cblZ1ZS52ZXJzaW9uID0gJzIuNi4xMic7XG5cbi8qICAqL1xuXG4vLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbi8vIGR1cmluZyB0ZW1wbGF0ZSBjb21waWxhdGlvblxudmFyIGlzUmVzZXJ2ZWRBdHRyID0gbWFrZU1hcCgnc3R5bGUsY2xhc3MnKTtcblxuLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xudmFyIGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xudmFyIG11c3RVc2VQcm9wID0gZnVuY3Rpb24gKHRhZywgdHlwZSwgYXR0cikge1xuICByZXR1cm4gKFxuICAgIChhdHRyID09PSAndmFsdWUnICYmIGFjY2VwdFZhbHVlKHRhZykpICYmIHR5cGUgIT09ICdidXR0b24nIHx8XG4gICAgKGF0dHIgPT09ICdzZWxlY3RlZCcgJiYgdGFnID09PSAnb3B0aW9uJykgfHxcbiAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAoYXR0ciA9PT0gJ211dGVkJyAmJiB0YWcgPT09ICd2aWRlbycpXG4gIClcbn07XG5cbnZhciBpc0VudW1lcmF0ZWRBdHRyID0gbWFrZU1hcCgnY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrJyk7XG5cbnZhciBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbnZhciBjb252ZXJ0RW51bWVyYXRlZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpIHx8IHZhbHVlID09PSAnZmFsc2UnXG4gICAgPyAnZmFsc2UnXG4gICAgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlXG4gICAgOiBrZXkgPT09ICdjb250ZW50ZWRpdGFibGUnICYmIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSh2YWx1ZSlcbiAgICAgID8gdmFsdWVcbiAgICAgIDogJ3RydWUnXG59O1xuXG52YXIgaXNCb29sZWFuQXR0ciA9IG1ha2VNYXAoXG4gICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAnZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLCcgK1xuICAnZW5hYmxlZCxmb3Jtbm92YWxpZGF0ZSxoaWRkZW4saW5kZXRlcm1pbmF0ZSxpbmVydCxpc21hcCxpdGVtc2NvcGUsbG9vcCxtdWx0aXBsZSwnICtcbiAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICdyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLCcgK1xuICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbik7XG5cbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG52YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBuYW1lLmNoYXJBdCg1KSA9PT0gJzonICYmIG5hbWUuc2xpY2UoMCwgNSkgPT09ICd4bGluaydcbn07XG5cbnZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4gaXNYbGluayhuYW1lKSA/IG5hbWUuc2xpY2UoNiwgbmFtZS5sZW5ndGgpIDogJydcbn07XG5cbnZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgdmFyIGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIHZhciBzdHJpbmdpZmllZDtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICByZXMgKz0gc3RyaW5naWZpZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICB2YXIgcmVzID0gJyc7XG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbnZhciBuYW1lc3BhY2VNYXAgPSB7XG4gIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgbWF0aDogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnXG59O1xuXG52YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgJ2h0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLCcgK1xuICAnYWRkcmVzcyxhcnRpY2xlLGFzaWRlLGZvb3RlcixoZWFkZXIsaDEsaDIsaDMsaDQsaDUsaDYsaGdyb3VwLG5hdixzZWN0aW9uLCcgK1xuICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICdhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnksJyArXG4gICdzLHNhbXAsc21hbGwsc3BhbixzdHJvbmcsc3ViLHN1cCx0aW1lLHUsdmFyLHdicixhcmVhLGF1ZGlvLG1hcCx0cmFjayx2aWRlbywnICtcbiAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAnY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsJyArXG4gICdidXR0b24sZGF0YWxpc3QsZmllbGRzZXQsZm9ybSxpbnB1dCxsYWJlbCxsZWdlbmQsbWV0ZXIsb3B0Z3JvdXAsb3B0aW9uLCcgK1xuICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSwnICtcbiAgJ2NvbnRlbnQsZWxlbWVudCxzaGFkb3csdGVtcGxhdGUsYmxvY2txdW90ZSxpZnJhbWUsdGZvb3QnXG4pO1xuXG4vLyB0aGlzIG1hcCBpcyBpbnRlbnRpb25hbGx5IHNlbGVjdGl2ZSwgb25seSBjb3ZlcmluZyBTVkcgZWxlbWVudHMgdGhhdCBtYXlcbi8vIGNvbnRhaW4gY2hpbGQgZWxlbWVudHMuXG52YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxudmFyIGlzUmVzZXJ2ZWRUYWcgPSBmdW5jdGlvbiAodGFnKSB7XG4gIHJldHVybiBpc0hUTUxUYWcodGFnKSB8fCBpc1NWRyh0YWcpXG59O1xuXG5mdW5jdGlvbiBnZXRUYWdOYW1lc3BhY2UgKHRhZykge1xuICBpZiAoaXNTVkcodGFnKSkge1xuICAgIHJldHVybiAnc3ZnJ1xuICB9XG4gIC8vIGJhc2ljIHN1cHBvcnQgZm9yIE1hdGhNTFxuICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gIGlmICh0YWcgPT09ICdtYXRoJykge1xuICAgIHJldHVybiAnbWF0aCdcbiAgfVxufVxuXG52YXIgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBpZiAodGFnLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gKFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnQgfHxcbiAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICApKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgfVxufVxuXG52YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuLyogICovXG5cbi8qKlxuICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5IChlbCkge1xuICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgIHZhciBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gIGlmICh0YWdOYW1lICE9PSAnc2VsZWN0Jykge1xuICAgIHJldHVybiBlbG1cbiAgfVxuICAvLyBmYWxzZSBvciBudWxsIHdpbGwgcmVtb3ZlIHRoZSBhdHRyaWJ1dGUgYnV0IHVuZGVmaW5lZCB3aWxsIG5vdFxuICBpZiAodm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLmF0dHJzICYmIHZub2RlLmRhdGEuYXR0cnMubXVsdGlwbGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gIH1cbiAgcmV0dXJuIGVsbVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50TlMgKG5hbWVzcGFjZSwgdGFnTmFtZSkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZU1hcFtuYW1lc3BhY2VdLCB0YWdOYW1lKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Tm9kZSAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodGV4dClcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tbWVudCAodGV4dCkge1xuICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0ZXh0KVxufVxuXG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUgKHBhcmVudE5vZGUsIG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpIHtcbiAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLnJlbW92ZUNoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUuYXBwZW5kQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBwYXJlbnROb2RlIChub2RlKSB7XG4gIHJldHVybiBub2RlLnBhcmVudE5vZGVcbn1cblxuZnVuY3Rpb24gbmV4dFNpYmxpbmcgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmdcbn1cblxuZnVuY3Rpb24gdGFnTmFtZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS50YWdOYW1lXG59XG5cbmZ1bmN0aW9uIHNldFRleHRDb250ZW50IChub2RlLCB0ZXh0KSB7XG4gIG5vZGUudGV4dENvbnRlbnQgPSB0ZXh0O1xufVxuXG5mdW5jdGlvbiBzZXRTdHlsZVNjb3BlIChub2RlLCBzY29wZUlkKSB7XG4gIG5vZGUuc2V0QXR0cmlidXRlKHNjb3BlSWQsICcnKTtcbn1cblxudmFyIG5vZGVPcHMgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG4gIGNyZWF0ZUVsZW1lbnQ6IGNyZWF0ZUVsZW1lbnQkMSxcbiAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gIGNyZWF0ZVRleHROb2RlOiBjcmVhdGVUZXh0Tm9kZSxcbiAgY3JlYXRlQ29tbWVudDogY3JlYXRlQ29tbWVudCxcbiAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gIHJlbW92ZUNoaWxkOiByZW1vdmVDaGlsZCxcbiAgYXBwZW5kQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICBuZXh0U2libGluZzogbmV4dFNpYmxpbmcsXG4gIHRhZ05hbWU6IHRhZ05hbWUsXG4gIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgc2V0U3R5bGVTY29wZTogc2V0U3R5bGVTY29wZVxufSk7XG5cbi8qICAqL1xuXG52YXIgcmVmID0ge1xuICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICByZWdpc3RlclJlZihvbGRWbm9kZSwgdHJ1ZSk7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfVxuICB9LFxuICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95ICh2bm9kZSkge1xuICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgdmFyIGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHsgcmV0dXJuIH1cblxuICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICB2YXIgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICB2YXIgcmVmcyA9IHZtLiRyZWZzO1xuICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgcmVtb3ZlKHJlZnNba2V5XSwgcmVmKTtcbiAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICByZWZzW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh2bm9kZS5kYXRhLnJlZkluRm9yKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkocmVmc1trZXldKSkge1xuICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgIH0gZWxzZSBpZiAocmVmc1trZXldLmluZGV4T2YocmVmKSA8IDApIHtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBWaXJ0dWFsIERPTSBwYXRjaGluZyBhbGdvcml0aG0gYmFzZWQgb24gU25hYmJkb20gYnlcbiAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICogaHR0cHM6Ly9naXRodWIuY29tL3BhbGRlcGluZC9zbmFiYmRvbS9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKlxuICogbW9kaWZpZWQgYnkgRXZhbiBZb3UgKEB5eXg5OTA4MDMpXG4gKlxuICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICogb2YgbWFraW5nIGZsb3cgdW5kZXJzdGFuZCBpdCBpcyBub3Qgd29ydGggaXQuXG4gKi9cblxudmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxudmFyIGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHsgcmV0dXJuIHRydWUgfVxuICB2YXIgaTtcbiAgdmFyIHR5cGVBID0gaXNEZWYoaSA9IGEuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgdmFyIHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIHZhciBpLCBrZXk7XG4gIHZhciBtYXAgPSB7fTtcbiAgZm9yIChpID0gYmVnaW5JZHg7IGkgPD0gZW5kSWR4OyArK2kpIHtcbiAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgaWYgKGlzRGVmKGtleSkpIHsgbWFwW2tleV0gPSBpOyB9XG4gIH1cbiAgcmV0dXJuIG1hcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVQYXRjaEZ1bmN0aW9uIChiYWNrZW5kKSB7XG4gIHZhciBpLCBqO1xuICB2YXIgY2JzID0ge307XG5cbiAgdmFyIG1vZHVsZXMgPSBiYWNrZW5kLm1vZHVsZXM7XG4gIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gbm9kZU9wcy5wYXJlbnROb2RlKGVsKTtcbiAgICAvLyBlbGVtZW50IG1heSBoYXZlIGFscmVhZHkgYmVlbiByZW1vdmVkIGR1ZSB0byB2LWh0bWwgLyB2LXRleHRcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgbm9kZU9wcy5yZW1vdmVDaGlsZChwYXJlbnQsIGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50JCQxICh2bm9kZSwgaW5WUHJlKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICFpblZQcmUgJiZcbiAgICAgICF2bm9kZS5ucyAmJlxuICAgICAgIShcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5zb21lKGZ1bmN0aW9uIChpZ25vcmUpIHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgdmFyIGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7XG4gICAgICAgIGkodm5vZGUsIGZhbHNlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICB9XG4gICAgICAvLyBhZnRlciBjYWxsaW5nIHRoZSBpbml0IGhvb2ssIGlmIHRoZSB2bm9kZSBpcyBhIGNoaWxkIGNvbXBvbmVudFxuICAgICAgLy8gaXQgc2hvdWxkJ3ZlIGNyZWF0ZWQgYSBjaGlsZCBpbnN0YW5jZSBhbmQgbW91bnRlZCBpdC4gdGhlIGNoaWxkXG4gICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBjYW4ganVzdCByZXR1cm4gdGhlIGVsZW1lbnQgYW5kIGJlIGRvbmUuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgICAgaWYgKGlzVHJ1ZShpc1JlYWN0aXZhdGVkKSkge1xuICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpKSB7XG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaC5hcHBseShpbnNlcnRlZFZub2RlUXVldWUsIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCk7XG4gICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgIH1cbiAgICB2bm9kZS5lbG0gPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZS4kZWw7XG4gICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVtcHR5IGNvbXBvbmVudCByb290LlxuICAgICAgLy8gc2tpcCBhbGwgZWxlbWVudC1yZWxhdGVkIG1vZHVsZXMgZXhjZXB0IGZvciByZWYgKCMzNDU1KVxuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgLy8gbWFrZSBzdXJlIHRvIGludm9rZSB0aGUgaW5zZXJ0IGhvb2tcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFjdGl2YXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIHZhciBpO1xuICAgIC8vIGhhY2sgZm9yICM0MzM5OiBhIHJlYWN0aXZhdGVkIGNvbXBvbmVudCB3aXRoIGlubmVyIHRyYW5zaXRpb25cbiAgICAvLyBkb2VzIG5vdCB0cmlnZ2VyIGJlY2F1c2UgdGhlIGlubmVyIG5vZGUncyBjcmVhdGVkIGhvb2tzIGFyZSBub3QgY2FsbGVkXG4gICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgLy8gdGhlcmUgZG9lc24ndCBzZWVtIHRvIGJlIGEgYmV0dGVyIHdheSB0byBkbyBpdC5cbiAgICB2YXIgaW5uZXJOb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgaW5uZXJOb2RlID0gaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChpc0RlZihpID0gaW5uZXJOb2RlLmRhdGEpICYmIGlzRGVmKGkgPSBpLnRyYW5zaXRpb24pKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBjYnMuYWN0aXZhdGVbaV0oZW1wdHlOb2RlLCBpbm5lck5vZGUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVubGlrZSBhIG5ld2x5IGNyZWF0ZWQgY29tcG9uZW50LFxuICAgIC8vIGEgcmVhY3RpdmF0ZWQga2VlcC1hbGl2ZSBjb21wb25lbnQgZG9lc24ndCBpbnNlcnQgaXRzZWxmXG4gICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zZXJ0IChwYXJlbnQsIGVsbSwgcmVmJCQxKSB7XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIGlmIChpc0RlZihyZWYkJDEpKSB7XG4gICAgICAgIGlmIChub2RlT3BzLnBhcmVudE5vZGUocmVmJCQxKSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNoaWxkcmVuICh2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAge1xuICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2hpbGRyZW4pO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICBjcmVhdGVFbG0oY2hpbGRyZW5baV0sIGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZWxtLCBudWxsLCB0cnVlLCBjaGlsZHJlbiwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZCh2bm9kZS5lbG0sIG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHZub2RlLnRleHQpKSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNQYXRjaGFibGUgKHZub2RlKSB7XG4gICAgd2hpbGUgKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGlzRGVmKHZub2RlLnRhZylcbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUNyZWF0ZUhvb2tzICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSQxKSB7XG4gICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSB7IGkuY3JlYXRlKGVtcHR5Tm9kZSwgdm5vZGUpOyB9XG4gICAgICBpZiAoaXNEZWYoaS5pbnNlcnQpKSB7IGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHNldCBzY29wZSBpZCBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBDU1MuXG4gIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gIC8vIG9mIGdvaW5nIHRocm91Z2ggdGhlIG5vcm1hbCBhdHRyaWJ1dGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgZnVuY3Rpb24gc2V0U2NvcGUgKHZub2RlKSB7XG4gICAgdmFyIGk7XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5mblNjb3BlSWQpKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGU7XG4gICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICAgICAgfVxuICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgIGlmIChpc0RlZihpID0gYWN0aXZlSW5zdGFuY2UpICYmXG4gICAgICBpICE9PSB2bm9kZS5jb250ZXh0ICYmXG4gICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKVxuICAgICkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKDsgc3RhcnRJZHggPD0gZW5kSWR4OyArK3N0YXJ0SWR4KSB7XG4gICAgICBjcmVhdGVFbG0odm5vZGVzW3N0YXJ0SWR4XSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSwgZmFsc2UsIHZub2Rlcywgc3RhcnRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZURlc3Ryb3lIb29rICh2bm9kZSkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7IGNicy5kZXN0cm95W2ldKHZub2RlKTsgfVxuICAgIH1cbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgZm9yIChqID0gMDsgaiA8IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgKytqKSB7XG4gICAgICAgIGludm9rZURlc3Ryb3lIb29rKHZub2RlLmNoaWxkcmVuW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIHZhciBjaCA9IHZub2Rlc1tzdGFydElkeF07XG4gICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaC50YWcpKSB7XG4gICAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhjaCk7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICB9IGVsc2UgeyAvLyBUZXh0IG5vZGVcbiAgICAgICAgICByZW1vdmVOb2RlKGNoLmVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rICh2bm9kZSwgcm0pIHtcbiAgICBpZiAoaXNEZWYocm0pIHx8IGlzRGVmKHZub2RlLmRhdGEpKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBjYnMucmVtb3ZlLmxlbmd0aCArIDE7XG4gICAgICBpZiAoaXNEZWYocm0pKSB7XG4gICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGlzdGVuZXJzIGNvdW50XG4gICAgICAgIHJtLmxpc3RlbmVycyArPSBsaXN0ZW5lcnM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkaXJlY3RseSByZW1vdmluZ1xuICAgICAgICBybSA9IGNyZWF0ZVJtQ2Iodm5vZGUuZWxtLCBsaXN0ZW5lcnMpO1xuICAgICAgfVxuICAgICAgLy8gcmVjdXJzaXZlbHkgaW52b2tlIGhvb2tzIG9uIGNoaWxkIGNvbXBvbmVudCByb290IG5vZGVcbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGlzRGVmKGkgPSBpLl92bm9kZSkgJiYgaXNEZWYoaS5kYXRhKSkge1xuICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMucmVtb3ZlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZihpID0gdm5vZGUuZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5yZW1vdmUpKSB7XG4gICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlbW92ZU5vZGUodm5vZGUuZWxtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZHJlbiAocGFyZW50RWxtLCBvbGRDaCwgbmV3Q2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSkge1xuICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgdmFyIG5ld1N0YXJ0SWR4ID0gMDtcbiAgICB2YXIgb2xkRW5kSWR4ID0gb2xkQ2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgIHZhciBvbGRFbmRWbm9kZSA9IG9sZENoW29sZEVuZElkeF07XG4gICAgdmFyIG5ld0VuZElkeCA9IG5ld0NoLmxlbmd0aCAtIDE7XG4gICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICB2YXIgbmV3RW5kVm5vZGUgPSBuZXdDaFtuZXdFbmRJZHhdO1xuICAgIHZhciBvbGRLZXlUb0lkeCwgaWR4SW5PbGQsIHZub2RlVG9Nb3ZlLCByZWZFbG07XG5cbiAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAvLyB0byBlbnN1cmUgcmVtb3ZlZCBlbGVtZW50cyBzdGF5IGluIGNvcnJlY3QgcmVsYXRpdmUgcG9zaXRpb25zXG4gICAgLy8gZHVyaW5nIGxlYXZpbmcgdHJhbnNpdGlvbnNcbiAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICB7XG4gICAgICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKGNoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICBhZGRWbm9kZXMoZWxtLCBudWxsLCBjaCwgMCwgY2gubGVuZ3RoIC0gMSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkQ2gpKSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlSW5zZXJ0SG9vayAodm5vZGUsIHF1ZXVlLCBpbml0aWFsKSB7XG4gICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgLy8gZWxlbWVudCBpcyByZWFsbHkgaW5zZXJ0ZWRcbiAgICBpZiAoaXNUcnVlKGluaXRpYWwpICYmIGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgaHlkcmF0aW9uQmFpbGVkID0gZmFsc2U7XG4gIC8vIGxpc3Qgb2YgbW9kdWxlcyB0aGF0IGNhbiBza2lwIGNyZWF0ZSBob29rIGR1cmluZyBoeWRyYXRpb24gYmVjYXVzZSB0aGV5XG4gIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gIC8vIE5vdGU6IHN0eWxlIGlzIGV4Y2x1ZGVkIGJlY2F1c2UgaXQgcmVsaWVzIG9uIGluaXRpYWwgY2xvbmUgZm9yIGZ1dHVyZVxuICAvLyBkZWVwIHVwZGF0ZXMgKCM3MDYzKS5cbiAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAvLyBOb3RlOiB0aGlzIGlzIGEgYnJvd3Nlci1vbmx5IGZ1bmN0aW9uIHNvIHdlIGNhbiBhc3N1bWUgZWxtcyBhcmUgRE9NIG5vZGVzLlxuICBmdW5jdGlvbiBoeWRyYXRlIChlbG0sIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkge1xuICAgIHZhciBpO1xuICAgIHZhciB0YWcgPSB2bm9kZS50YWc7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSB7IGkodm5vZGUsIHRydWUgLyogaHlkcmF0aW5nICovKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgLy8gY2hpbGQgY29tcG9uZW50LiBpdCBzaG91bGQgaGF2ZSBoeWRyYXRlZCBpdHMgb3duIHRyZWUuXG4gICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAoaXNEZWYoY2hpbGRyZW4pKSB7XG4gICAgICAgIC8vIGVtcHR5IGVsZW1lbnQsIGFsbG93IGNsaWVudCB0byBwaWNrIHVwIGFuZCBwb3B1bGF0ZSBjaGlsZHJlblxuICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhKSAmJiBpc0RlZihpID0gaS5kb21Qcm9wcykgJiYgaXNEZWYoaSA9IGkuaW5uZXJIVE1MKSkge1xuICAgICAgICAgICAgaWYgKGkgIT09IGVsbS5pbm5lckhUTUwpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICBpZiAoIWlzUmVuZGVyZWRNb2R1bGUoa2V5KSkge1xuICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghZnVsbEludm9rZSAmJiBkYXRhWydjbGFzcyddKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICB0cmF2ZXJzZShkYXRhWydjbGFzcyddKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZWxtLmRhdGEgIT09IHZub2RlLnRleHQpIHtcbiAgICAgIGVsbS5kYXRhID0gdm5vZGUudGV4dDtcbiAgICB9XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgIGlmIChpc0RlZih2bm9kZS50YWcpKSB7XG4gICAgICByZXR1cm4gdm5vZGUudGFnLmluZGV4T2YoJ3Z1ZS1jb21wb25lbnQnKSA9PT0gMCB8fCAoXG4gICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgIHZub2RlLnRhZy50b0xvd2VyQ2FzZSgpID09PSAobm9kZS50YWdOYW1lICYmIG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbm9kZS5ub2RlVHlwZSA9PT0gKHZub2RlLmlzQ29tbWVudCA/IDggOiAzKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiBwYXRjaCAob2xkVm5vZGUsIHZub2RlLCBoeWRyYXRpbmcsIHJlbW92ZU9ubHkpIHtcbiAgICBpZiAoaXNVbmRlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICB2YXIgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGlzUmVhbEVsZW1lbnQgPSBpc0RlZihvbGRWbm9kZS5ub2RlVHlwZSk7XG4gICAgICBpZiAoIWlzUmVhbEVsZW1lbnQgJiYgc2FtZVZub2RlKG9sZFZub2RlLCB2bm9kZSkpIHtcbiAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgIHBhdGNoVm5vZGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG51bGwsIG51bGwsIHJlbW92ZU9ubHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAvLyBtb3VudGluZyB0byBhIHJlYWwgZWxlbWVudFxuICAgICAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQgYW5kIGlmIHdlIGNhbiBwZXJmb3JtXG4gICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICBpZiAob2xkVm5vZGUubm9kZVR5cGUgPT09IDEgJiYgb2xkVm5vZGUuaGFzQXR0cmlidXRlKFNTUl9BVFRSKSkge1xuICAgICAgICAgICAgb2xkVm5vZGUucmVtb3ZlQXR0cmlidXRlKFNTUl9BVFRSKTtcbiAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpc1RydWUoaHlkcmF0aW5nKSkge1xuICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgIGludm9rZUluc2VydEhvb2sodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHJldHVybiBvbGRWbm9kZVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgICAnVGhlIGNsaWVudC1zaWRlIHJlbmRlcmVkIHZpcnR1YWwgRE9NIHRyZWUgaXMgbm90IG1hdGNoaW5nICcgK1xuICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAnSFRNTCBtYXJrdXAsIGZvciBleGFtcGxlIG5lc3RpbmcgYmxvY2stbGV2ZWwgZWxlbWVudHMgaW5zaWRlICcgK1xuICAgICAgICAgICAgICAgICc8cD4sIG9yIG1pc3NpbmcgPHRib2R5Pi4gQmFpbGluZyBoeWRyYXRpb24gYW5kIHBlcmZvcm1pbmcgJyArXG4gICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gZWl0aGVyIG5vdCBzZXJ2ZXItcmVuZGVyZWQsIG9yIGh5ZHJhdGlvbiBmYWlsZWQuXG4gICAgICAgICAgLy8gY3JlYXRlIGFuIGVtcHR5IG5vZGUgYW5kIHJlcGxhY2UgaXRcbiAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlcGxhY2luZyBleGlzdGluZyBlbGVtZW50XG4gICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgIHZhciBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICB3aGlsZSAoYW5jZXN0b3IpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IuZWxtID0gdm5vZGUuZWxtO1xuICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgICAgICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICB2YXIgaW5zZXJ0ID0gYW5jZXN0b3IuZGF0YS5ob29rLmluc2VydDtcbiAgICAgICAgICAgICAgaWYgKGluc2VydC5tZXJnZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpJDIgPSAxOyBpJDIgPCBpbnNlcnQuZm5zLmxlbmd0aDsgaSQyKyspIHtcbiAgICAgICAgICAgICAgICAgIGluc2VydC5mbnNbaSQyXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2Rlcyhbb2xkVm5vZGVdLCAwLCAwKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50YWcpKSB7XG4gICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpc0luaXRpYWxQYXRjaCk7XG4gICAgcmV0dXJuIHZub2RlLmVsbVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgZGlyZWN0aXZlcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICB1cGRhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgdXBkYXRlRGlyZWN0aXZlcyh2bm9kZSwgZW1wdHlOb2RlKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlRGlyZWN0aXZlcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMgfHwgdm5vZGUuZGF0YS5kaXJlY3RpdmVzKSB7XG4gICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgaXNDcmVhdGUgPSBvbGRWbm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgdmFyIG5ld0RpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEodm5vZGUuZGF0YS5kaXJlY3RpdmVzLCB2bm9kZS5jb250ZXh0KTtcblxuICB2YXIgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgdmFyIGtleSwgb2xkRGlyLCBkaXI7XG4gIGZvciAoa2V5IGluIG5ld0RpcnMpIHtcbiAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgZGlyID0gbmV3RGlyc1trZXldO1xuICAgIGlmICghb2xkRGlyKSB7XG4gICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICBjYWxsSG9vayQxKGRpciwgJ2JpbmQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5pbnNlcnRlZCkge1xuICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICBkaXIub2xkVmFsdWUgPSBvbGREaXIudmFsdWU7XG4gICAgICBkaXIub2xkQXJnID0gb2xkRGlyLmFyZztcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuY29tcG9uZW50VXBkYXRlZCkge1xuICAgICAgICBkaXJzV2l0aFBvc3RwYXRjaC5wdXNoKGRpcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgIHZhciBjYWxsSW5zZXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aEluc2VydC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH07XG4gICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ2luc2VydCcsIGNhbGxJbnNlcnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIWlzQ3JlYXRlKSB7XG4gICAgZm9yIChrZXkgaW4gb2xkRGlycykge1xuICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgLy8gbm8gbG9uZ2VyIHByZXNlbnQsIHVuYmluZFxuICAgICAgICBjYWxsSG9vayQxKG9sZERpcnNba2V5XSwgJ3VuYmluZCcsIG9sZFZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgaWYgKCFkaXJzKSB7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgcmV0dXJuIHJlc1xuICB9XG4gIHZhciBpLCBkaXI7XG4gIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgZGlyID0gZGlyc1tpXTtcbiAgICBpZiAoIWRpci5tb2RpZmllcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZGlyLm1vZGlmaWVycyA9IGVtcHR5TW9kaWZpZXJzO1xuICAgIH1cbiAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICBkaXIuZGVmID0gcmVzb2x2ZUFzc2V0KHZtLiRvcHRpb25zLCAnZGlyZWN0aXZlcycsIGRpci5uYW1lLCB0cnVlKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgcmV0dXJuIGRpci5yYXdOYW1lIHx8ICgoZGlyLm5hbWUpICsgXCIuXCIgKyAoT2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpKSlcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICB2YXIgZm4gPSBkaXIuZGVmICYmIGRpci5kZWZbaG9va107XG4gIGlmIChmbikge1xuICAgIHRyeSB7XG4gICAgICBmbih2bm9kZS5lbG0sIGRpciwgdm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBvcHRzID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgaWYgKGlzRGVmKG9wdHMpICYmIG9wdHMuQ3Rvci5vcHRpb25zLmluaGVyaXRBdHRycyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmF0dHJzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuYXR0cnMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyLCBvbGQ7XG4gIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gIHZhciBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIHZhciBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICB2YXIgYmxvY2tlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICB2YXIgdHJhbnNpdGlvbkNsYXNzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzO1xuICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgIGNscyA9IGNvbmNhdChjbHMsIHN0cmluZ2lmeUNsYXNzKHRyYW5zaXRpb25DbGFzcykpO1xuICB9XG5cbiAgLy8gc2V0IHRoZSBjbGFzc1xuICBpZiAoY2xzICE9PSBlbC5fcHJldkNsYXNzKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGNscyk7XG4gICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgfVxufVxuXG52YXIga2xhc3MgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQ2xhc3MsXG4gIHVwZGF0ZTogdXBkYXRlQ2xhc3Ncbn07XG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxudmFyIFJBTkdFX1RPS0VOID0gJ19fcic7XG52YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuLyogICovXG5cbi8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbi8vIGl0J3MgaW1wb3J0YW50IHRvIHBsYWNlIHRoZSBldmVudCBhcyB0aGUgZmlyc3QgaW4gdGhlIGFycmF5IGJlY2F1c2Vcbi8vIHRoZSB3aG9sZSBwb2ludCBpcyBlbnN1cmluZyB0aGUgdi1tb2RlbCBjYWxsYmFjayBnZXRzIGNhbGxlZCBiZWZvcmVcbi8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG5mdW5jdGlvbiBub3JtYWxpemVFdmVudHMgKG9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgIC8vIElFIGlucHV0W3R5cGU9cmFuZ2VdIG9ubHkgc3VwcG9ydHMgYGNoYW5nZWAgZXZlbnRcbiAgICB2YXIgZXZlbnQgPSBpc0lFID8gJ2NoYW5nZScgOiAnaW5wdXQnO1xuICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW1JBTkdFX1RPS0VOXTtcbiAgfVxuICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAvLyBhZnRlciAyLjUuIEtlZXBpbmcgaXQgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBnZW5lcmF0ZWQgY29kZSBmcm9tIDwgMi40XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgIG9uLmNoYW5nZSA9IFtdLmNvbmNhdChvbltDSEVDS0JPWF9SQURJT19UT0tFTl0sIG9uLmNoYW5nZSB8fCBbXSk7XG4gICAgZGVsZXRlIG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0JDE7XG5cbmZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gIHZhciBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICByZW1vdmUkMihldmVudCwgb25jZUhhbmRsZXIsIGNhcHR1cmUsIF90YXJnZXQpO1xuICAgIH1cbiAgfVxufVxuXG4vLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuLy8gaW1wbGVtZW50YXRpb24gYW5kIGRvZXMgbm90IGZpcmUgbWljcm90YXNrcyBpbiBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLCBzb1xuLy8gc2FmZSB0byBleGNsdWRlLlxudmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbmZ1bmN0aW9uIGFkZCQxIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgcGFzc2l2ZVxuKSB7XG4gIC8vIGFzeW5jIGVkZ2UgY2FzZSAjNjU2NjogaW5uZXIgY2xpY2sgZXZlbnQgdHJpZ2dlcnMgcGF0Y2gsIGV2ZW50IGhhbmRsZXJcbiAgLy8gYXR0YWNoZWQgdG8gb3V0ZXIgZWxlbWVudCBkdXJpbmcgcGF0Y2gsIGFuZCB0cmlnZ2VyZWQgYWdhaW4uIFRoaXNcbiAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gIC8vIHRoZSBzb2x1dGlvbiBpcyBzaW1wbGU6IHdlIHNhdmUgdGhlIHRpbWVzdGFtcCB3aGVuIGEgaGFuZGxlciBpcyBhdHRhY2hlZCxcbiAgLy8gYW5kIHRoZSBoYW5kbGVyIHdvdWxkIG9ubHkgZmlyZSBpZiB0aGUgZXZlbnQgcGFzc2VkIHRvIGl0IHdhcyBmaXJlZFxuICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gIGlmICh1c2VNaWNyb3Rhc2tGaXgpIHtcbiAgICB2YXIgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gb3JpZ2luYWwuX3dyYXBwZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKFxuICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAvLyB0aGlzIGlzIGp1c3QgYSBzYWZldHkgbmV0IGluIGNhc2UgZXZlbnQudGltZVN0YW1wIGlzIHVucmVsaWFibGUgaW5cbiAgICAgICAgLy8gY2VydGFpbiB3ZWlyZCBlbnZpcm9ubWVudHMuLi5cbiAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAvLyBldmVudCBpcyBmaXJlZCBhZnRlciBoYW5kbGVyIGF0dGFjaG1lbnRcbiAgICAgICAgZS50aW1lU3RhbXAgPj0gYXR0YWNoZWRUaW1lc3RhbXAgfHxcbiAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgIC8vICM5NDYyIGlPUyA5IGJ1ZzogZXZlbnQudGltZVN0YW1wIGlzIDAgYWZ0ZXIgaGlzdG9yeS5wdXNoU3RhdGVcbiAgICAgICAgLy8gIzk2ODEgUXRXZWJFbmdpbmUgZXZlbnQudGltZVN0YW1wIGlzIG5lZ2F0aXZlIHZhbHVlXG4gICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgLy8gIzk0NDggYmFpbCBpZiBldmVudCBpcyBmaXJlZCBpbiBhbm90aGVyIGRvY3VtZW50IGluIGEgbXVsdGktcGFnZVxuICAgICAgICAvLyBlbGVjdHJvbi9udy5qcyBhcHAsIHNpbmNlIGV2ZW50LnRpbWVTdGFtcCB3aWxsIGJlIHVzaW5nIGEgZGlmZmVyZW50XG4gICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICBlLnRhcmdldC5vd25lckRvY3VtZW50ICE9PSBkb2N1bWVudFxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICB0YXJnZXQkMS5hZGRFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBzdXBwb3J0c1Bhc3NpdmVcbiAgICAgID8geyBjYXB0dXJlOiBjYXB0dXJlLCBwYXNzaXZlOiBwYXNzaXZlIH1cbiAgICAgIDogY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiByZW1vdmUkMiAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIF90YXJnZXRcbikge1xuICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIuX3dyYXBwZXIgfHwgaGFuZGxlcixcbiAgICBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEub24pICYmIGlzVW5kZWYodm5vZGUuZGF0YS5vbikpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICB2YXIgb2xkT24gPSBvbGRWbm9kZS5kYXRhLm9uIHx8IHt9O1xuICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgbm9ybWFsaXplRXZlbnRzKG9uKTtcbiAgdXBkYXRlTGlzdGVuZXJzKG9uLCBvbGRPbiwgYWRkJDEsIHJlbW92ZSQyLCBjcmVhdGVPbmNlSGFuZGxlciQxLCB2bm9kZS5jb250ZXh0KTtcbiAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG59XG5cbnZhciBldmVudHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICB1cGRhdGU6IHVwZGF0ZURPTUxpc3RlbmVyc1xufTtcblxuLyogICovXG5cbnZhciBzdmdDb250YWluZXI7XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBrZXksIGN1cjtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgIGVsbVtrZXldID0gJyc7XG4gICAgfVxuICB9XG5cbiAgZm9yIChrZXkgaW4gcHJvcHMpIHtcbiAgICBjdXIgPSBwcm9wc1trZXldO1xuICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgIC8vIGFzIHRoZXNlIHdpbGwgdGhyb3cgYXdheSBleGlzdGluZyBET00gbm9kZXMgYW5kIGNhdXNlIHJlbW92YWwgZXJyb3JzXG4gICAgLy8gb24gc3Vic2VxdWVudCBwYXRjaGVzICgjMzM2MClcbiAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgIGlmICh2bm9kZS5jaGlsZHJlbikgeyB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwOyB9XG4gICAgICBpZiAoY3VyID09PSBvbGRQcm9wc1trZXldKSB7IGNvbnRpbnVlIH1cbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIHZhciBzdHJDdXIgPSBpc1VuZGVmKGN1cikgPyAnJyA6IFN0cmluZyhjdXIpO1xuICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICBlbG0udmFsdWUgPSBzdHJDdXI7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAvLyBJRSBkb2Vzbid0IHN1cHBvcnQgaW5uZXJIVE1MIGZvciBTVkcgZWxlbWVudHNcbiAgICAgIHN2Z0NvbnRhaW5lciA9IHN2Z0NvbnRhaW5lciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgdmFyIHN2ZyA9IHN2Z0NvbnRhaW5lci5maXJzdENoaWxkO1xuICAgICAgd2hpbGUgKGVsbS5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoc3ZnLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAvLyBgdmFsdWVgIGlzIGhhbmRsZWQgc2VwYXJhdGVseSBiZWNhdXNlIHRoZSBET00gdmFsdWUgbWF5IGJlIHRlbXBvcmFyaWx5XG4gICAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNzYXJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICBjdXIgIT09IG9sZFByb3BzW2tleV1cbiAgICApIHtcbiAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgIC8vIGUuZy4gYHZhbHVlYCBvbiA8cHJvZ3Jlc3M+IHcvIG5vbi1maW5pdGUgdmFsdWVcbiAgICAgIHRyeSB7XG4gICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG4gIH1cbn1cblxuLy8gY2hlY2sgcGxhdGZvcm1zL3dlYi91dGlsL2F0dHJzLmpzIGFjY2VwdFZhbHVlXG5cblxuZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgcmV0dXJuICghZWxtLmNvbXBvc2luZyAmJiAoXG4gICAgZWxtLnRhZ05hbWUgPT09ICdPUFRJT04nIHx8XG4gICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICBpc0RpcnR5V2l0aE1vZGlmaWVycyhlbG0sIGNoZWNrVmFsKVxuICApKVxufVxuXG5mdW5jdGlvbiBpc05vdEluRm9jdXNBbmREaXJ0eSAoZWxtLCBjaGVja1ZhbCkge1xuICAvLyByZXR1cm4gdHJ1ZSB3aGVuIHRleHRib3ggKC5udW1iZXIgYW5kIC50cmltKSBsb3NlcyBmb2N1cyBhbmQgaXRzIHZhbHVlIGlzXG4gIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICB2YXIgbm90SW5Gb2N1cyA9IHRydWU7XG4gIC8vICM2MTU3XG4gIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICB0cnkgeyBub3RJbkZvY3VzID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gZWxtOyB9IGNhdGNoIChlKSB7fVxuICByZXR1cm4gbm90SW5Gb2N1cyAmJiBlbG0udmFsdWUgIT09IGNoZWNrVmFsXG59XG5cbmZ1bmN0aW9uIGlzRGlydHlXaXRoTW9kaWZpZXJzIChlbG0sIG5ld1ZhbCkge1xuICB2YXIgdmFsdWUgPSBlbG0udmFsdWU7XG4gIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG52YXIgcGFyc2VTdHlsZVRleHQgPSBjYWNoZWQoZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgdmFyIHJlcyA9IHt9O1xuICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIHZhciBwcm9wZXJ0eURlbGltaXRlciA9IC86KC4rKS87XG4gIGNzc1RleHQuc3BsaXQobGlzdERlbGltaXRlcikuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkge1xuICAgIGlmIChpdGVtKSB7XG4gICAgICB2YXIgdG1wID0gaXRlbS5zcGxpdChwcm9wZXJ0eURlbGltaXRlcik7XG4gICAgICB0bXAubGVuZ3RoID4gMSAmJiAocmVzW3RtcFswXS50cmltKCldID0gdG1wWzFdLnRyaW0oKSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc1xufSk7XG5cbi8vIG1lcmdlIHN0YXRpYyBhbmQgZHluYW1pYyBzdHlsZSBkYXRhIG9uIHRoZSBzYW1lIHZub2RlXG5mdW5jdGlvbiBub3JtYWxpemVTdHlsZURhdGEgKGRhdGEpIHtcbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBzdHlsZURhdGE7XG5cbiAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIGlmIChcbiAgICAgICAgY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhICYmXG4gICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIHN0eWxlRGF0YSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgfVxuXG4gIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gIHdoaWxlICgocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlLmRhdGEgJiYgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShwYXJlbnROb2RlLmRhdGEpKSkge1xuICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIGNzc1ZhclJFID0gL14tLS87XG52YXIgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbnZhciBzZXRQcm9wID0gZnVuY3Rpb24gKGVsLCBuYW1lLCB2YWwpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjc3NWYXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgZWwuc3R5bGUuc2V0UHJvcGVydHkobmFtZSwgdmFsKTtcbiAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShoeXBoZW5hdGUobmFtZSksIHZhbC5yZXBsYWNlKGltcG9ydGFudFJFLCAnJyksICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgLy8gU3VwcG9ydCB2YWx1ZXMgYXJyYXkgY3JlYXRlZCBieSBhdXRvcHJlZml4ZXIsIGUuZy5cbiAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgIC8vIFNldCB0aGVtIG9uZSBieSBvbmUsIGFuZCB0aGUgYnJvd3NlciB3aWxsIG9ubHkgc2V0IHRob3NlIGl0IGNhbiByZWNvZ25pemVcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWwubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgfVxuICB9XG59O1xuXG52YXIgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxudmFyIGVtcHR5U3R5bGU7XG52YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gIGVtcHR5U3R5bGUgPSBlbXB0eVN0eWxlIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlO1xuICBwcm9wID0gY2FtZWxpemUocHJvcCk7XG4gIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgIHJldHVybiBwcm9wXG4gIH1cbiAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZW5kb3JOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gIHZhciBvbGREYXRhID0gb2xkVm5vZGUuZGF0YTtcblxuICBpZiAoaXNVbmRlZihkYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKGRhdGEuc3R5bGUpICYmXG4gICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIGN1ciwgbmFtZTtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICB2YXIgb2xkU3R5bGVCaW5kaW5nID0gb2xkRGF0YS5ub3JtYWxpemVkU3R5bGUgfHwgb2xkRGF0YS5zdHlsZSB8fCB7fTtcblxuICAvLyBpZiBzdGF0aWMgc3R5bGUgZXhpc3RzLCBzdHlsZWJpbmRpbmcgYWxyZWFkeSBtZXJnZWQgaW50byBpdCB3aGVuIGRvaW5nIG5vcm1hbGl6ZVN0eWxlRGF0YVxuICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKHZub2RlLmRhdGEuc3R5bGUpIHx8IHt9O1xuXG4gIC8vIHN0b3JlIG5vcm1hbGl6ZWQgc3R5bGUgdW5kZXIgYSBkaWZmZXJlbnQga2V5IGZvciBuZXh0IGRpZmZcbiAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAvLyB0byBtdXRhdGUgaXQuXG4gIHZub2RlLmRhdGEubm9ybWFsaXplZFN0eWxlID0gaXNEZWYoc3R5bGUuX19vYl9fKVxuICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICA6IHN0eWxlO1xuXG4gIHZhciBuZXdTdHlsZSA9IGdldFN0eWxlKHZub2RlLCB0cnVlKTtcblxuICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICBpZiAoaXNVbmRlZihuZXdTdHlsZVtuYW1lXSkpIHtcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsICcnKTtcbiAgICB9XG4gIH1cbiAgZm9yIChuYW1lIGluIG5ld1N0eWxlKSB7XG4gICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgaWYgKGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgIC8vIGllOSBzZXR0aW5nIHRvIG51bGwgaGFzIG5vIGVmZmVjdCwgbXVzdCB1c2UgZW1wdHkgc3RyaW5nXG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHN0eWxlID0ge1xuICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG59O1xuXG4vKiAgKi9cblxudmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5hZGQoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgaWYgKGN1ci5pbmRleE9mKCcgJyArIGNscyArICcgJykgPCAwKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgKGN1ciArIGNscykudHJpbSgpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZW1vdmUgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiByZW1vdmVDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG4gICAgfVxuICAgIGlmICghZWwuY2xhc3NMaXN0Lmxlbmd0aCkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgY3VyID0gXCIgXCIgKyAoZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnKSArIFwiIFwiO1xuICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgd2hpbGUgKGN1ci5pbmRleE9mKHRhcikgPj0gMCkge1xuICAgICAgY3VyID0gY3VyLnJlcGxhY2UodGFyLCAnICcpO1xuICAgIH1cbiAgICBjdXIgPSBjdXIudHJpbSgpO1xuICAgIGlmIChjdXIpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlVHJhbnNpdGlvbiAoZGVmJCQxKSB7XG4gIGlmICghZGVmJCQxKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGlmIChkZWYkJDEuY3NzICE9PSBmYWxzZSkge1xuICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgfVxuICAgIGV4dGVuZChyZXMsIGRlZiQkMSk7XG4gICAgcmV0dXJuIHJlc1xuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMSlcbiAgfVxufVxuXG52YXIgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnRlckNsYXNzOiAobmFtZSArIFwiLWVudGVyXCIpLFxuICAgIGVudGVyVG9DbGFzczogKG5hbWUgKyBcIi1lbnRlci10b1wiKSxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICBsZWF2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlXCIpLFxuICAgIGxlYXZlVG9DbGFzczogKG5hbWUgKyBcIi1sZWF2ZS10b1wiKSxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICB9XG59KTtcblxudmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xudmFyIFRSQU5TSVRJT04gPSAndHJhbnNpdGlvbic7XG52YXIgQU5JTUFUSU9OID0gJ2FuaW1hdGlvbic7XG5cbi8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbnZhciB0cmFuc2l0aW9uUHJvcCA9ICd0cmFuc2l0aW9uJztcbnZhciB0cmFuc2l0aW9uRW5kRXZlbnQgPSAndHJhbnNpdGlvbmVuZCc7XG52YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xudmFyIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ2FuaW1hdGlvbmVuZCc7XG5pZiAoaGFzVHJhbnNpdGlvbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHdpbmRvdy5vbnRyYW5zaXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdHRyYW5zaXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICB0cmFuc2l0aW9uUHJvcCA9ICdXZWJraXRUcmFuc2l0aW9uJztcbiAgICB0cmFuc2l0aW9uRW5kRXZlbnQgPSAnd2Via2l0VHJhbnNpdGlvbkVuZCc7XG4gIH1cbiAgaWYgKHdpbmRvdy5vbmFuaW1hdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgYW5pbWF0aW9uUHJvcCA9ICdXZWJraXRBbmltYXRpb24nO1xuICAgIGFuaW1hdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdEFuaW1hdGlvbkVuZCc7XG4gIH1cbn1cblxuLy8gYmluZGluZyB0byB3aW5kb3cgaXMgbmVjZXNzYXJ5IHRvIG1ha2UgaG90IHJlbG9hZCB3b3JrIGluIElFIGluIHN0cmljdCBtb2RlXG52YXIgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmdW5jdGlvbiAoZm4pIHsgcmV0dXJuIGZuKCk7IH07XG5cbmZ1bmN0aW9uIG5leHRGcmFtZSAoZm4pIHtcbiAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICByYWYoZm4pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gIHZhciB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgdmFyIHJlZiA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICB2YXIgdHlwZSA9IHJlZi50eXBlO1xuICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICB2YXIgcHJvcENvdW50ID0gcmVmLnByb3BDb3VudDtcbiAgaWYgKCF0eXBlKSB7IHJldHVybiBjYigpIH1cbiAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICB2YXIgZW5kZWQgPSAwO1xuICB2YXIgZW5kID0gZnVuY3Rpb24gKCkge1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICBjYigpO1xuICB9O1xuICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgIGlmIChlLnRhcmdldCA9PT0gZWwpIHtcbiAgICAgIGlmICgrK2VuZGVkID49IHByb3BDb3VudCkge1xuICAgICAgICBlbmQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChlbmRlZCA8IHByb3BDb3VudCkge1xuICAgICAgZW5kKCk7XG4gICAgfVxuICB9LCB0aW1lb3V0ICsgMSk7XG4gIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbn1cblxudmFyIHRyYW5zZm9ybVJFID0gL1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztcblxuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgdmFyIHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIHZhciB0cmFuc2l0aW9uRHVyYXRpb25zID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEdXJhdGlvbiddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICB2YXIgdHlwZTtcbiAgdmFyIHRpbWVvdXQgPSAwO1xuICB2YXIgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIHZhciBoYXNUcmFuc2Zvcm0gPVxuICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICB0cmFuc2Zvcm1SRS50ZXN0KHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdQcm9wZXJ0eSddKTtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiB0eXBlLFxuICAgIHRpbWVvdXQ6IHRpbWVvdXQsXG4gICAgcHJvcENvdW50OiBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICB3aGlsZSAoZGVsYXlzLmxlbmd0aCA8IGR1cmF0aW9ucy5sZW5ndGgpIHtcbiAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gIH1cblxuICByZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCwgZHVyYXRpb25zLm1hcChmdW5jdGlvbiAoZCwgaSkge1xuICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gIH0pKVxufVxuXG4vLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4vLyBpbiBhIGxvY2FsZS1kZXBlbmRlbnQgd2F5LCB1c2luZyBhIGNvbW1hIGluc3RlYWQgb2YgYSBkb3QuXG4vLyBJZiBjb21tYSBpcyBub3QgcmVwbGFjZWQgd2l0aCBhIGRvdCwgdGhlIGlucHV0IHdpbGwgYmUgcm91bmRlZCBkb3duIChpLmUuIGFjdGluZ1xuLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuZnVuY3Rpb24gdG9NcyAocykge1xuICByZXR1cm4gTnVtYmVyKHMuc2xpY2UoMCwgLTEpLnJlcGxhY2UoJywnLCAnLicpKSAqIDEwMDBcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGVudGVyICh2bm9kZSwgdG9nZ2xlRGlzcGxheSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2VudGVyQ2IpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgZW50ZXJDbGFzcyA9IGRhdGEuZW50ZXJDbGFzcztcbiAgdmFyIGVudGVyVG9DbGFzcyA9IGRhdGEuZW50ZXJUb0NsYXNzO1xuICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgdmFyIGFwcGVhckNsYXNzID0gZGF0YS5hcHBlYXJDbGFzcztcbiAgdmFyIGFwcGVhclRvQ2xhc3MgPSBkYXRhLmFwcGVhclRvQ2xhc3M7XG4gIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gIHZhciBiZWZvcmVFbnRlciA9IGRhdGEuYmVmb3JlRW50ZXI7XG4gIHZhciBlbnRlciA9IGRhdGEuZW50ZXI7XG4gIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICB2YXIgZW50ZXJDYW5jZWxsZWQgPSBkYXRhLmVudGVyQ2FuY2VsbGVkO1xuICB2YXIgYmVmb3JlQXBwZWFyID0gZGF0YS5iZWZvcmVBcHBlYXI7XG4gIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgdmFyIGFmdGVyQXBwZWFyID0gZGF0YS5hZnRlckFwcGVhcjtcbiAgdmFyIGFwcGVhckNhbmNlbGxlZCA9IGRhdGEuYXBwZWFyQ2FuY2VsbGVkO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIC8vIGFjdGl2ZUluc3RhbmNlIHdpbGwgYWx3YXlzIGJlIHRoZSA8dHJhbnNpdGlvbj4gY29tcG9uZW50IG1hbmFnaW5nIHRoaXNcbiAgLy8gdHJhbnNpdGlvbi4gT25lIGVkZ2UgY2FzZSB0byBjaGVjayBpcyB3aGVuIHRoZSA8dHJhbnNpdGlvbj4gaXMgcGxhY2VkXG4gIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gIC8vIDx0cmFuc2l0aW9uPidzIHBhcmVudCBmb3IgYXBwZWFyIGNoZWNrLlxuICB2YXIgY29udGV4dCA9IGFjdGl2ZUluc3RhbmNlO1xuICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gIHdoaWxlICh0cmFuc2l0aW9uTm9kZSAmJiB0cmFuc2l0aW9uTm9kZS5wYXJlbnQpIHtcbiAgICBjb250ZXh0ID0gdHJhbnNpdGlvbk5vZGUuY29udGV4dDtcbiAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgfVxuXG4gIHZhciBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgPyBhcHBlYXJDbGFzc1xuICAgIDogZW50ZXJDbGFzcztcbiAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA/IGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgOiBlbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChiZWZvcmVBcHBlYXIgfHwgYmVmb3JlRW50ZXIpXG4gICAgOiBiZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAodHlwZW9mIGFwcGVhciA9PT0gJ2Z1bmN0aW9uJyA/IGFwcGVhciA6IGVudGVyKVxuICAgIDogZW50ZXI7XG4gIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgID8gKGFwcGVhckNhbmNlbGxlZCB8fCBlbnRlckNhbmNlbGxlZClcbiAgICA6IGVudGVyQ2FuY2VsbGVkO1xuXG4gIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24uZW50ZXJcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAoZXhwbGljaXRFbnRlckR1cmF0aW9uICE9IG51bGwpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgdmFyIGNiID0gZWwuX2VudGVyQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgZW50ZXJDYW5jZWxsZWRIb29rICYmIGVudGVyQ2FuY2VsbGVkSG9vayhlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICB9XG4gICAgZWwuX2VudGVyQ2IgPSBudWxsO1xuICB9KTtcblxuICBpZiAoIXZub2RlLmRhdGEuc2hvdykge1xuICAgIC8vIHJlbW92ZSBwZW5kaW5nIGxlYXZlIGVsZW1lbnQgb24gZW50ZXIgYnkgaW5qZWN0aW5nIGFuIGluc2VydCBob29rXG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIHZhciBwZW5kaW5nTm9kZSA9IHBhcmVudCAmJiBwYXJlbnQuX3BlbmRpbmcgJiYgcGFyZW50Ll9wZW5kaW5nW3Zub2RlLmtleV07XG4gICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgcGVuZGluZ05vZGUudGFnID09PSB2bm9kZS50YWcgJiZcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiXG4gICAgICApIHtcbiAgICAgICAgcGVuZGluZ05vZGUuZWxtLl9sZWF2ZUNiKCk7XG4gICAgICB9XG4gICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgfSk7XG4gIH1cblxuICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gIGJlZm9yZUVudGVySG9vayAmJiBiZWZvcmVFbnRlckhvb2soZWwpO1xuICBpZiAoZXhwZWN0c0NTUykge1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHRvQ2xhc3MpO1xuICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICBpZiAoaXNWYWxpZER1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbikpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0RW50ZXJEdXJhdGlvbik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdoZW5UcmFuc2l0aW9uRW5kcyhlbCwgdHlwZSwgY2IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKHZub2RlLmRhdGEuc2hvdykge1xuICAgIHRvZ2dsZURpc3BsYXkgJiYgdG9nZ2xlRGlzcGxheSgpO1xuICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgfVxuXG4gIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgIGNiKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBlbnRlciBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgIGVsLl9lbnRlckNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2VudGVyQ2IoKTtcbiAgfVxuXG4gIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBsZWF2ZUNsYXNzID0gZGF0YS5sZWF2ZUNsYXNzO1xuICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gIHZhciBsZWF2ZUFjdGl2ZUNsYXNzID0gZGF0YS5sZWF2ZUFjdGl2ZUNsYXNzO1xuICB2YXIgYmVmb3JlTGVhdmUgPSBkYXRhLmJlZm9yZUxlYXZlO1xuICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICB2YXIgYWZ0ZXJMZWF2ZSA9IGRhdGEuYWZ0ZXJMZWF2ZTtcbiAgdmFyIGxlYXZlQ2FuY2VsbGVkID0gZGF0YS5sZWF2ZUNhbmNlbGxlZDtcbiAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgdmFyIGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICB2YXIgZXhwbGljaXRMZWF2ZUR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICB3YXJuKFxuICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgIFwiZXhwZWN0cyBhbiBBcnJheSB2YWx1ZSBmb3IgaXRzIGJpbmRpbmcsIGJ1dCBnb3QgXCIgKyAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSkpLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGVsLm9wdGlvbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb3B0aW9uID0gZWwub3B0aW9uc1tpXTtcbiAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgc2VsZWN0ZWQgPSBsb29zZUluZGV4T2YodmFsdWUsIGdldFZhbHVlKG9wdGlvbikpID4gLTE7XG4gICAgICBpZiAob3B0aW9uLnNlbGVjdGVkICE9PSBzZWxlY3RlZCkge1xuICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgIGlmIChlbC5zZWxlY3RlZEluZGV4ICE9PSBpKSB7XG4gICAgICAgICAgZWwuc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNNdWx0aXBsZSkge1xuICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5ldmVyeShmdW5jdGlvbiAobykgeyByZXR1cm4gIWxvb3NlRXF1YWwobywgdmFsdWUpOyB9KVxufVxuXG5mdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gIHJldHVybiAnX3ZhbHVlJyBpbiBvcHRpb25cbiAgICA/IG9wdGlvbi5fdmFsdWVcbiAgICA6IG9wdGlvbi52YWx1ZVxufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uU3RhcnQgKGUpIHtcbiAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gb25Db21wb3NpdGlvbkVuZCAoZSkge1xuICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICBpZiAoIWUudGFyZ2V0LmNvbXBvc2luZykgeyByZXR1cm4gfVxuICBlLnRhcmdldC5jb21wb3NpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG59XG5cbmZ1bmN0aW9uIHRyaWdnZXIgKGVsLCB0eXBlKSB7XG4gIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICB2YXIgb3JpZ2luYWxEaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5ID1cbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPT09ICdub25lJyA/ICcnIDogZWwuc3R5bGUuZGlzcGxheTtcbiAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgIH1cbiAgfSxcblxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG4gICAgdmFyIG9sZFZhbHVlID0gcmVmLm9sZFZhbHVlO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCF2YWx1ZSA9PT0gIW9sZFZhbHVlKSB7IHJldHVybiB9XG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZDogZnVuY3Rpb24gdW5iaW5kIChcbiAgICBlbCxcbiAgICBiaW5kaW5nLFxuICAgIHZub2RlLFxuICAgIG9sZFZub2RlLFxuICAgIGlzRGVzdHJveVxuICApIHtcbiAgICBpZiAoIWlzRGVzdHJveSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICB9XG4gIH1cbn07XG5cbnZhciBwbGF0Zm9ybURpcmVjdGl2ZXMgPSB7XG4gIG1vZGVsOiBkaXJlY3RpdmUsXG4gIHNob3c6IHNob3dcbn07XG5cbi8qICAqL1xuXG52YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICB2YXIgY29tcE9wdGlvbnMgPSB2bm9kZSAmJiB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgcmV0dXJuIGdldFJlYWxDaGlsZChnZXRGaXJzdENvbXBvbmVudENoaWxkKGNvbXBPcHRpb25zLmNoaWxkcmVuKSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gdm5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgdmFyIGRhdGEgPSB7fTtcbiAgdmFyIG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5wcm9wc0RhdGEpIHtcbiAgICBkYXRhW2tleV0gPSBjb21wW2tleV07XG4gIH1cbiAgLy8gZXZlbnRzLlxuICAvLyBleHRyYWN0IGxpc3RlbmVycyBhbmQgcGFzcyB0aGVtIGRpcmVjdGx5IHRvIHRoZSB0cmFuc2l0aW9uIG1ldGhvZHNcbiAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgZm9yICh2YXIga2V5JDEgaW4gbGlzdGVuZXJzKSB7XG4gICAgZGF0YVtjYW1lbGl6ZShrZXkkMSldID0gbGlzdGVuZXJzW2tleSQxXTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbnZhciBpc05vdFRleHROb2RlID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMudGFnIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKTsgfTtcblxudmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbnZhciBUcmFuc2l0aW9uID0ge1xuICBuYW1lOiAndHJhbnNpdGlvbicsXG4gIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGlmICghY2hpbGRyZW4pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGZpbHRlciBvdXQgdGV4dCBub2RlcyAocG9zc2libGUgd2hpdGVzcGFjZXMpXG4gICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdhcm4gbXVsdGlwbGUgZWxlbWVudHNcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgd2FybihcbiAgICAgICAgJzx0cmFuc2l0aW9uPiBjYW4gb25seSBiZSB1c2VkIG9uIGEgc2luZ2xlIGVsZW1lbnQuIFVzZSAnICtcbiAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAobW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdmFyIHJhd0NoaWxkID0gY2hpbGRyZW5bMF07XG5cbiAgICAvLyBpZiB0aGlzIGlzIGEgY29tcG9uZW50IHJvb3Qgbm9kZSBhbmQgdGhlIGNvbXBvbmVudCdzXG4gICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgaWYgKGhhc1BhcmVudFRyYW5zaXRpb24odGhpcy4kdm5vZGUpKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICAvLyBhcHBseSB0cmFuc2l0aW9uIGRhdGEgdG8gY2hpbGRcbiAgICAvLyB1c2UgZ2V0UmVhbENoaWxkKCkgdG8gaWdub3JlIGFic3RyYWN0IGNvbXBvbmVudHMgZS5nLiBrZWVwLWFsaXZlXG4gICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkKSB7XG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGVhdmluZykge1xuICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgIH1cblxuICAgIC8vIGVuc3VyZSBhIGtleSB0aGF0IGlzIHVuaXF1ZSB0byB0aGUgdm5vZGUgdHlwZSBhbmQgdG8gdGhpcyB0cmFuc2l0aW9uXG4gICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgIC8vIGR1cmluZyBlbnRlcmluZy5cbiAgICB2YXIgaWQgPSBcIl9fdHJhbnNpdGlvbi1cIiArICh0aGlzLl91aWQpICsgXCItXCI7XG4gICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgID8gY2hpbGQuaXNDb21tZW50XG4gICAgICAgID8gaWQgKyAnY29tbWVudCdcbiAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgOiBpc1ByaW1pdGl2ZShjaGlsZC5rZXkpXG4gICAgICAgID8gKFN0cmluZyhjaGlsZC5rZXkpLmluZGV4T2YoaWQpID09PSAwID8gY2hpbGQua2V5IDogaWQgKyBjaGlsZC5rZXkpXG4gICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgdmFyIGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICB2YXIgb2xkUmF3Q2hpbGQgPSB0aGlzLl92bm9kZTtcbiAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgLy8gbWFyayB2LXNob3dcbiAgICAvLyBzbyB0aGF0IHRoZSB0cmFuc2l0aW9uIG1vZHVsZSBjYW4gaGFuZCBvdmVyIHRoZSBjb250cm9sIHRvIHRoZSBkaXJlY3RpdmVcbiAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICBjaGlsZC5kYXRhLnNob3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIG9sZENoaWxkICYmXG4gICAgICBvbGRDaGlsZC5kYXRhICYmXG4gICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgIWlzQXN5bmNQbGFjZWhvbGRlcihvbGRDaGlsZCkgJiZcbiAgICAgIC8vICM2Njg3IGNvbXBvbmVudCByb290IGlzIGEgY29tbWVudCBub2RlXG4gICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgKSB7XG4gICAgICAvLyByZXBsYWNlIG9sZCBjaGlsZCB0cmFuc2l0aW9uIGRhdGEgd2l0aCBmcmVzaCBvbmVcbiAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgIHZhciBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMkMS5fbGVhdmluZyA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMkMS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICAgIH0gZWxzZSBpZiAobW9kZSA9PT0gJ2luLW91dCcpIHtcbiAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICByZXR1cm4gb2xkUmF3Q2hpbGRcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICB2YXIgcGVyZm9ybUxlYXZlID0gZnVuY3Rpb24gKCkgeyBkZWxheWVkTGVhdmUoKTsgfTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2FmdGVyRW50ZXInLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnZGVsYXlMZWF2ZScsIGZ1bmN0aW9uIChsZWF2ZSkgeyBkZWxheWVkTGVhdmUgPSBsZWF2ZTsgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJhd0NoaWxkXG4gIH1cbn07XG5cbi8qICAqL1xuXG52YXIgcHJvcHMgPSBleHRlbmQoe1xuICB0YWc6IFN0cmluZyxcbiAgbW92ZUNsYXNzOiBTdHJpbmdcbn0sIHRyYW5zaXRpb25Qcm9wcyk7XG5cbmRlbGV0ZSBwcm9wcy5tb2RlO1xuXG52YXIgVHJhbnNpdGlvbkdyb3VwID0ge1xuICBwcm9wczogcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciB1cGRhdGUgPSB0aGlzLl91cGRhdGU7XG4gICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh0aGlzJDEpO1xuICAgICAgLy8gZm9yY2UgcmVtb3ZpbmcgcGFzc1xuICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcyQxLl92bm9kZSxcbiAgICAgICAgdGhpcyQxLmtlcHQsXG4gICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgdHJ1ZSAvLyByZW1vdmVPbmx5ICghaW1wb3J0YW50LCBhdm9pZHMgdW5uZWNlc3NhcnkgbW92ZXMpXG4gICAgICApO1xuICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgcmVzdG9yZUFjdGl2ZUluc3RhbmNlKCk7XG4gICAgICB1cGRhdGUuY2FsbCh0aGlzJDEsIHZub2RlLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgIHZhciBtYXAgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuID0gW107XG4gICAgdmFyIHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGMgPSByYXdDaGlsZHJlbltpXTtcbiAgICAgIGlmIChjLnRhZykge1xuICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgICAgbWFwW2Mua2V5XSA9IGNcbiAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG9wdHMgPSBjLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybigoXCI8dHJhbnNpdGlvbi1ncm91cD4gY2hpbGRyZW4gbXVzdCBiZSBrZXllZDogPFwiICsgbmFtZSArIFwiPlwiKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldkNoaWxkcmVuKSB7XG4gICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgdmFyIHJlbW92ZWQgPSBbXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IHByZXZDaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgYyQxLmRhdGEudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICBjJDEuZGF0YS5wb3MgPSBjJDEuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAga2VwdC5wdXNoKGMkMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkICgpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICB2YXIgbW92ZUNsYXNzID0gdGhpcy5tb3ZlQ2xhc3MgfHwgKCh0aGlzLm5hbWUgfHwgJ3YnKSArICctbW92ZScpO1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoIHx8ICF0aGlzLmhhc01vdmUoY2hpbGRyZW5bMF0uZWxtLCBtb3ZlQ2xhc3MpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3ZSBkaXZpZGUgdGhlIHdvcmsgaW50byB0aHJlZSBsb29wcyB0byBhdm9pZCBtaXhpbmcgRE9NIHJlYWRzIGFuZCB3cml0ZXNcbiAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKGNhbGxQZW5kaW5nQ2JzKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKHJlY29yZFBvc2l0aW9uKTtcbiAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgLy8gZm9yY2UgcmVmbG93IHRvIHB1dCBldmVyeXRoaW5nIGluIHBvc2l0aW9uXG4gICAgLy8gYXNzaWduIHRvIHRoaXMgdG8gYXZvaWQgYmVpbmcgcmVtb3ZlZCBpbiB0cmVlLXNoYWtpbmdcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLl9yZWZsb3cgPSBkb2N1bWVudC5ib2R5Lm9mZnNldEhlaWdodDtcblxuICAgIGNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgdmFyIGVsID0gYy5lbG07XG4gICAgICAgIHZhciBzID0gZWwuc3R5bGU7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBlbC5fbW92ZUNiID0gZnVuY3Rpb24gY2IgKGUpIHtcbiAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgY2IpO1xuICAgICAgICAgICAgZWwuX21vdmVDYiA9IG51bGw7XG4gICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcblxuICBtZXRob2RzOiB7XG4gICAgaGFzTW92ZTogZnVuY3Rpb24gaGFzTW92ZSAoZWwsIG1vdmVDbGFzcykge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICh0aGlzLl9oYXNNb3ZlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNb3ZlXG4gICAgICB9XG4gICAgICAvLyBEZXRlY3Qgd2hldGhlciBhbiBlbGVtZW50IHdpdGggdGhlIG1vdmUgY2xhc3MgYXBwbGllZCBoYXNcbiAgICAgIC8vIENTUyB0cmFuc2l0aW9ucy4gU2luY2UgdGhlIGVsZW1lbnQgbWF5IGJlIGluc2lkZSBhbiBlbnRlcmluZ1xuICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgLy8gYWxsIG90aGVyIHRyYW5zaXRpb24gY2xhc3NlcyBhcHBsaWVkIHRvIGVuc3VyZSBvbmx5IHRoZSBtb3ZlIGNsYXNzXG4gICAgICAvLyBpcyBhcHBsaWVkLlxuICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgICAgIGVsLl90cmFuc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChjbHMpIHsgcmVtb3ZlQ2xhc3MoY2xvbmUsIGNscyk7IH0pO1xuICAgICAgfVxuICAgICAgYWRkQ2xhc3MoY2xvbmUsIG1vdmVDbGFzcyk7XG4gICAgICBjbG9uZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgdmFyIGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gIHZhciBuZXdQb3MgPSBjLmRhdGEubmV3UG9zO1xuICB2YXIgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgaWYgKGR4IHx8IGR5KSB7XG4gICAgYy5kYXRhLm1vdmVkID0gdHJ1ZTtcbiAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgIHMudHJhbnNmb3JtID0gcy5XZWJraXRUcmFuc2Zvcm0gPSBcInRyYW5zbGF0ZShcIiArIGR4ICsgXCJweCxcIiArIGR5ICsgXCJweClcIjtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwOiBUcmFuc2l0aW9uR3JvdXBcbn07XG5cbi8qICAqL1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHNwZWNpZmljIHV0aWxzXG5WdWUuY29uZmlnLm11c3RVc2VQcm9wID0gbXVzdFVzZVByb3A7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkQXR0ciA9IGlzUmVzZXJ2ZWRBdHRyO1xuVnVlLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2UgPSBnZXRUYWdOYW1lc3BhY2U7XG5WdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHJ1bnRpbWUgZGlyZWN0aXZlcyAmIGNvbXBvbmVudHNcbmV4dGVuZChWdWUub3B0aW9ucy5kaXJlY3RpdmVzLCBwbGF0Zm9ybURpcmVjdGl2ZXMpO1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcGF0Y2ggZnVuY3Rpb25cblZ1ZS5wcm90b3R5cGUuX19wYXRjaF9fID0gaW5Ccm93c2VyID8gcGF0Y2ggOiBub29wO1xuXG4vLyBwdWJsaWMgbW91bnQgbWV0aG9kXG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgaW5Ccm93c2VyID8gcXVlcnkoZWwpIDogdW5kZWZpbmVkO1xuICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8vIGRldnRvb2xzIGdsb2JhbCBob29rXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuaWYgKGluQnJvd3Nlcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICBpZiAoZGV2dG9vbHMpIHtcbiAgICAgICAgZGV2dG9vbHMuZW1pdCgnaW5pdCcsIFZ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICAnRG93bmxvYWQgdGhlIFZ1ZSBEZXZ0b29scyBleHRlbnNpb24gZm9yIGEgYmV0dGVyIGRldmVsb3BtZW50IGV4cGVyaWVuY2U6XFxuJyArXG4gICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChjb25maWcucHJvZHVjdGlvblRpcCAhPT0gZmFsc2UgJiZcbiAgICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJ1xuICAgICkge1xuICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgIFwiWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcblwiICtcbiAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICBcIlNlZSBtb3JlIHRpcHMgYXQgaHR0cHM6Ly92dWVqcy5vcmcvZ3VpZGUvZGVwbG95bWVudC5odG1sXCJcbiAgICAgICk7XG4gICAgfVxuICB9LCAwKTtcbn1cblxuLyogICovXG5cbm1vZHVsZS5leHBvcnRzID0gVnVlO1xuIl19
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],4:[function(require,module,exports){
(function (process){
"use strict";

if (process.env.NODE_ENV === 'production') {
  module.exports = require('./vue.runtime.common.prod.js');
} else {
  module.exports = require('./vue.runtime.common.dev.js');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZ1ZS5ydW50aW1lLmNvbW1vbi5qcyJdLCJuYW1lcyI6WyJwcm9jZXNzIiwiZW52IiwiTk9ERV9FTlYiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFJQSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUE3QixFQUEyQztBQUN6Q0MsRUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxPQUFPLENBQUMsOEJBQUQsQ0FBeEI7QUFDRCxDQUZELE1BRU87QUFDTEYsRUFBQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxPQUFPLENBQUMsNkJBQUQsQ0FBeEI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi92dWUucnVudGltZS5jb21tb24ucHJvZC5qcycpXG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vdnVlLnJ1bnRpbWUuY29tbW9uLmRldi5qcycpXG59XG4iXX0=
}).call(this,require("e/U+97"))
},{"./vue.runtime.common.dev.js":3,"./vue.runtime.common.prod.js":5,"e/U+97":1}],5:[function(require,module,exports){
(function (global){
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */
"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var t = Object.freeze({});

function e(t) {
  return null == t;
}

function n(t) {
  return null != t;
}

function r(t) {
  return !0 === t;
}

function o(t) {
  return "string" == typeof t || "number" == typeof t || "symbol" == _typeof(t) || "boolean" == typeof t;
}

function i(t) {
  return null !== t && "object" == _typeof(t);
}

var a = Object.prototype.toString;

function s(t) {
  return "[object Object]" === a.call(t);
}

function c(t) {
  var e = parseFloat(String(t));
  return e >= 0 && Math.floor(e) === e && isFinite(t);
}

function u(t) {
  return n(t) && "function" == typeof t.then && "function" == typeof t["catch"];
}

function l(t) {
  return null == t ? "" : Array.isArray(t) || s(t) && t.toString === a ? JSON.stringify(t, null, 2) : String(t);
}

function f(t) {
  var e = parseFloat(t);
  return isNaN(e) ? t : e;
}

function p(t, e) {
  for (var n = Object.create(null), r = t.split(","), o = 0; o < r.length; o++) {
    n[r[o]] = !0;
  }

  return e ? function (t) {
    return n[t.toLowerCase()];
  } : function (t) {
    return n[t];
  };
}

var d = p("key,ref,slot,slot-scope,is");

function v(t, e) {
  if (t.length) {
    var n = t.indexOf(e);
    if (n > -1) return t.splice(n, 1);
  }
}

var h = Object.prototype.hasOwnProperty;

function m(t, e) {
  return h.call(t, e);
}

function y(t) {
  var e = Object.create(null);
  return function (n) {
    return e[n] || (e[n] = t(n));
  };
}

var g = /-(\w)/g,
    _ = y(function (t) {
  return t.replace(g, function (t, e) {
    return e ? e.toUpperCase() : "";
  });
}),
    b = y(function (t) {
  return t.charAt(0).toUpperCase() + t.slice(1);
}),
    C = /\B([A-Z])/g,
    $ = y(function (t) {
  return t.replace(C, "-$1").toLowerCase();
});

var w = Function.prototype.bind ? function (t, e) {
  return t.bind(e);
} : function (t, e) {
  function n(n) {
    var r = arguments.length;
    return r ? r > 1 ? t.apply(e, arguments) : t.call(e, n) : t.call(e);
  }

  return n._length = t.length, n;
};

function A(t, e) {
  e = e || 0;

  for (var n = t.length - e, r = new Array(n); n--;) {
    r[n] = t[n + e];
  }

  return r;
}

function x(t, e) {
  for (var n in e) {
    t[n] = e[n];
  }

  return t;
}

function O(t) {
  for (var e = {}, n = 0; n < t.length; n++) {
    t[n] && x(e, t[n]);
  }

  return e;
}

function k(t, e, n) {}

var S = function S(t, e, n) {
  return !1;
},
    E = function E(t) {
  return t;
};

function j(t, e) {
  if (t === e) return !0;
  var n = i(t),
      r = i(e);
  if (!n || !r) return !n && !r && String(t) === String(e);

  try {
    var o = Array.isArray(t),
        a = Array.isArray(e);
    if (o && a) return t.length === e.length && t.every(function (t, n) {
      return j(t, e[n]);
    });
    if (t instanceof Date && e instanceof Date) return t.getTime() === e.getTime();
    if (o || a) return !1;
    var s = Object.keys(t),
        c = Object.keys(e);
    return s.length === c.length && s.every(function (n) {
      return j(t[n], e[n]);
    });
  } catch (t) {
    return !1;
  }
}

function T(t, e) {
  for (var n = 0; n < t.length; n++) {
    if (j(t[n], e)) return n;
  }

  return -1;
}

function I(t) {
  var e = !1;
  return function () {
    e || (e = !0, t.apply(this, arguments));
  };
}

var D = "data-server-rendered",
    N = ["component", "directive", "filter"],
    P = ["beforeCreate", "created", "beforeMount", "mounted", "beforeUpdate", "updated", "beforeDestroy", "destroyed", "activated", "deactivated", "errorCaptured", "serverPrefetch"],
    L = {
  optionMergeStrategies: Object.create(null),
  silent: !1,
  productionTip: !1,
  devtools: !1,
  performance: !1,
  errorHandler: null,
  warnHandler: null,
  ignoredElements: [],
  keyCodes: Object.create(null),
  isReservedTag: S,
  isReservedAttr: S,
  isUnknownElement: S,
  getTagNamespace: k,
  parsePlatformTagName: E,
  mustUseProp: S,
  async: !0,
  _lifecycleHooks: P
};

function M(t, e, n, r) {
  Object.defineProperty(t, e, {
    value: n,
    enumerable: !!r,
    writable: !0,
    configurable: !0
  });
}

var F = new RegExp("[^" + /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/.source + ".$_\\d]");
var R,
    U = ("__proto__" in {}),
    H = "undefined" != typeof window,
    B = "undefined" != typeof WXEnvironment && !!WXEnvironment.platform,
    V = B && WXEnvironment.platform.toLowerCase(),
    z = H && window.navigator.userAgent.toLowerCase(),
    W = z && /msie|trident/.test(z),
    q = z && z.indexOf("msie 9.0") > 0,
    K = z && z.indexOf("edge/") > 0,
    X = (z && z.indexOf("android"), z && /iphone|ipad|ipod|ios/.test(z) || "ios" === V),
    G = (z && /chrome\/\d+/.test(z), z && /phantomjs/.test(z), z && z.match(/firefox\/(\d+)/)),
    Z = {}.watch,
    J = !1;
if (H) try {
  var Q = {};
  Object.defineProperty(Q, "passive", {
    get: function get() {
      J = !0;
    }
  }), window.addEventListener("test-passive", null, Q);
} catch (t) {}

var Y = function Y() {
  return void 0 === R && (R = !H && !B && "undefined" != typeof global && global.process && "server" === global.process.env.VUE_ENV), R;
},
    tt = H && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function et(t) {
  return "function" == typeof t && /native code/.test(t.toString());
}

var nt,
    rt = "undefined" != typeof Symbol && et(Symbol) && "undefined" != typeof Reflect && et(Reflect.ownKeys);
nt = "undefined" != typeof Set && et(Set) ? Set : function () {
  function t() {
    this.set = Object.create(null);
  }

  return t.prototype.has = function (t) {
    return !0 === this.set[t];
  }, t.prototype.add = function (t) {
    this.set[t] = !0;
  }, t.prototype.clear = function () {
    this.set = Object.create(null);
  }, t;
}();

var ot = k,
    it = 0,
    at = function at() {
  this.id = it++, this.subs = [];
};

at.prototype.addSub = function (t) {
  this.subs.push(t);
}, at.prototype.removeSub = function (t) {
  v(this.subs, t);
}, at.prototype.depend = function () {
  at.target && at.target.addDep(this);
}, at.prototype.notify = function () {
  for (var t = this.subs.slice(), e = 0, n = t.length; e < n; e++) {
    t[e].update();
  }
}, at.target = null;
var st = [];

function ct(t) {
  st.push(t), at.target = t;
}

function ut() {
  st.pop(), at.target = st[st.length - 1];
}

var lt = function lt(t, e, n, r, o, i, a, s) {
  this.tag = t, this.data = e, this.children = n, this.text = r, this.elm = o, this.ns = void 0, this.context = i, this.fnContext = void 0, this.fnOptions = void 0, this.fnScopeId = void 0, this.key = e && e.key, this.componentOptions = a, this.componentInstance = void 0, this.parent = void 0, this.raw = !1, this.isStatic = !1, this.isRootInsert = !0, this.isComment = !1, this.isCloned = !1, this.isOnce = !1, this.asyncFactory = s, this.asyncMeta = void 0, this.isAsyncPlaceholder = !1;
},
    ft = {
  child: {
    configurable: !0
  }
};

ft.child.get = function () {
  return this.componentInstance;
}, Object.defineProperties(lt.prototype, ft);

var pt = function pt(t) {
  void 0 === t && (t = "");
  var e = new lt();
  return e.text = t, e.isComment = !0, e;
};

function dt(t) {
  return new lt(void 0, void 0, void 0, String(t));
}

function vt(t) {
  var e = new lt(t.tag, t.data, t.children && t.children.slice(), t.text, t.elm, t.context, t.componentOptions, t.asyncFactory);
  return e.ns = t.ns, e.isStatic = t.isStatic, e.key = t.key, e.isComment = t.isComment, e.fnContext = t.fnContext, e.fnOptions = t.fnOptions, e.fnScopeId = t.fnScopeId, e.asyncMeta = t.asyncMeta, e.isCloned = !0, e;
}

var ht = Array.prototype,
    mt = Object.create(ht);
["push", "pop", "shift", "unshift", "splice", "sort", "reverse"].forEach(function (t) {
  var e = ht[t];
  M(mt, t, function () {
    for (var n = [], r = arguments.length; r--;) {
      n[r] = arguments[r];
    }

    var o,
        i = e.apply(this, n),
        a = this.__ob__;

    switch (t) {
      case "push":
      case "unshift":
        o = n;
        break;

      case "splice":
        o = n.slice(2);
    }

    return o && a.observeArray(o), a.dep.notify(), i;
  });
});
var yt = Object.getOwnPropertyNames(mt),
    gt = !0;

function _t(t) {
  gt = t;
}

var bt = function bt(t) {
  var e;
  this.value = t, this.dep = new at(), this.vmCount = 0, M(t, "__ob__", this), Array.isArray(t) ? (U ? (e = mt, t.__proto__ = e) : function (t, e, n) {
    for (var r = 0, o = n.length; r < o; r++) {
      var i = n[r];
      M(t, i, e[i]);
    }
  }(t, mt, yt), this.observeArray(t)) : this.walk(t);
};

function Ct(t, e) {
  var n;
  if (i(t) && !(t instanceof lt)) return m(t, "__ob__") && t.__ob__ instanceof bt ? n = t.__ob__ : gt && !Y() && (Array.isArray(t) || s(t)) && Object.isExtensible(t) && !t._isVue && (n = new bt(t)), e && n && n.vmCount++, n;
}

function $t(t, e, n, r, o) {
  var i = new at(),
      a = Object.getOwnPropertyDescriptor(t, e);

  if (!a || !1 !== a.configurable) {
    var s = a && a.get,
        c = a && a.set;
    s && !c || 2 !== arguments.length || (n = t[e]);
    var u = !o && Ct(n);
    Object.defineProperty(t, e, {
      enumerable: !0,
      configurable: !0,
      get: function get() {
        var e = s ? s.call(t) : n;
        return at.target && (i.depend(), u && (u.dep.depend(), Array.isArray(e) && function t(e) {
          for (var n = void 0, r = 0, o = e.length; r < o; r++) {
            (n = e[r]) && n.__ob__ && n.__ob__.dep.depend(), Array.isArray(n) && t(n);
          }
        }(e))), e;
      },
      set: function set(e) {
        var r = s ? s.call(t) : n;
        e === r || e != e && r != r || s && !c || (c ? c.call(t, e) : n = e, u = !o && Ct(e), i.notify());
      }
    });
  }
}

function wt(t, e, n) {
  if (Array.isArray(t) && c(e)) return t.length = Math.max(t.length, e), t.splice(e, 1, n), n;
  if (e in t && !(e in Object.prototype)) return t[e] = n, n;
  var r = t.__ob__;
  return t._isVue || r && r.vmCount ? n : r ? ($t(r.value, e, n), r.dep.notify(), n) : (t[e] = n, n);
}

function At(t, e) {
  if (Array.isArray(t) && c(e)) t.splice(e, 1);else {
    var n = t.__ob__;
    t._isVue || n && n.vmCount || m(t, e) && (delete t[e], n && n.dep.notify());
  }
}

bt.prototype.walk = function (t) {
  for (var e = Object.keys(t), n = 0; n < e.length; n++) {
    $t(t, e[n]);
  }
}, bt.prototype.observeArray = function (t) {
  for (var e = 0, n = t.length; e < n; e++) {
    Ct(t[e]);
  }
};
var xt = L.optionMergeStrategies;

function Ot(t, e) {
  if (!e) return t;

  for (var n, r, o, i = rt ? Reflect.ownKeys(e) : Object.keys(e), a = 0; a < i.length; a++) {
    "__ob__" !== (n = i[a]) && (r = t[n], o = e[n], m(t, n) ? r !== o && s(r) && s(o) && Ot(r, o) : wt(t, n, o));
  }

  return t;
}

function kt(t, e, n) {
  return n ? function () {
    var r = "function" == typeof e ? e.call(n, n) : e,
        o = "function" == typeof t ? t.call(n, n) : t;
    return r ? Ot(r, o) : o;
  } : e ? t ? function () {
    return Ot("function" == typeof e ? e.call(this, this) : e, "function" == typeof t ? t.call(this, this) : t);
  } : e : t;
}

function St(t, e) {
  var n = e ? t ? t.concat(e) : Array.isArray(e) ? e : [e] : t;
  return n ? function (t) {
    for (var e = [], n = 0; n < t.length; n++) {
      -1 === e.indexOf(t[n]) && e.push(t[n]);
    }

    return e;
  }(n) : n;
}

function Et(t, e, n, r) {
  var o = Object.create(t || null);
  return e ? x(o, e) : o;
}

xt.data = function (t, e, n) {
  return n ? kt(t, e, n) : e && "function" != typeof e ? t : kt(t, e);
}, P.forEach(function (t) {
  xt[t] = St;
}), N.forEach(function (t) {
  xt[t + "s"] = Et;
}), xt.watch = function (t, e, n, r) {
  if (t === Z && (t = void 0), e === Z && (e = void 0), !e) return Object.create(t || null);
  if (!t) return e;
  var o = {};

  for (var i in x(o, t), e) {
    var a = o[i],
        s = e[i];
    a && !Array.isArray(a) && (a = [a]), o[i] = a ? a.concat(s) : Array.isArray(s) ? s : [s];
  }

  return o;
}, xt.props = xt.methods = xt.inject = xt.computed = function (t, e, n, r) {
  if (!t) return e;
  var o = Object.create(null);
  return x(o, t), e && x(o, e), o;
}, xt.provide = kt;

var jt = function jt(t, e) {
  return void 0 === e ? t : e;
};

function Tt(t, e, n) {
  if ("function" == typeof e && (e = e.options), function (t, e) {
    var n = t.props;

    if (n) {
      var r,
          o,
          i = {};
      if (Array.isArray(n)) for (r = n.length; r--;) {
        "string" == typeof (o = n[r]) && (i[_(o)] = {
          type: null
        });
      } else if (s(n)) for (var a in n) {
        o = n[a], i[_(a)] = s(o) ? o : {
          type: o
        };
      }
      t.props = i;
    }
  }(e), function (t, e) {
    var n = t.inject;

    if (n) {
      var r = t.inject = {};
      if (Array.isArray(n)) for (var o = 0; o < n.length; o++) {
        r[n[o]] = {
          from: n[o]
        };
      } else if (s(n)) for (var i in n) {
        var a = n[i];
        r[i] = s(a) ? x({
          from: i
        }, a) : {
          from: a
        };
      }
    }
  }(e), function (t) {
    var e = t.directives;
    if (e) for (var n in e) {
      var r = e[n];
      "function" == typeof r && (e[n] = {
        bind: r,
        update: r
      });
    }
  }(e), !e._base && (e["extends"] && (t = Tt(t, e["extends"], n)), e.mixins)) for (var r = 0, o = e.mixins.length; r < o; r++) {
    t = Tt(t, e.mixins[r], n);
  }
  var i,
      a = {};

  for (i in t) {
    c(i);
  }

  for (i in e) {
    m(t, i) || c(i);
  }

  function c(r) {
    var o = xt[r] || jt;
    a[r] = o(t[r], e[r], n, r);
  }

  return a;
}

function It(t, e, n, r) {
  if ("string" == typeof n) {
    var o = t[e];
    if (m(o, n)) return o[n];

    var i = _(n);

    if (m(o, i)) return o[i];
    var a = b(i);
    return m(o, a) ? o[a] : o[n] || o[i] || o[a];
  }
}

function Dt(t, e, n, r) {
  var o = e[t],
      i = !m(n, t),
      a = n[t],
      s = Lt(Boolean, o.type);
  if (s > -1) if (i && !m(o, "default")) a = !1;else if ("" === a || a === $(t)) {
    var c = Lt(String, o.type);
    (c < 0 || s < c) && (a = !0);
  }

  if (void 0 === a) {
    a = function (t, e, n) {
      if (!m(e, "default")) return;
      var r = e["default"];
      if (t && t.$options.propsData && void 0 === t.$options.propsData[n] && void 0 !== t._props[n]) return t._props[n];
      return "function" == typeof r && "Function" !== Nt(e.type) ? r.call(t) : r;
    }(r, o, t);

    var u = gt;
    _t(!0), Ct(a), _t(u);
  }

  return a;
}

function Nt(t) {
  var e = t && t.toString().match(/^\s*function (\w+)/);
  return e ? e[1] : "";
}

function Pt(t, e) {
  return Nt(t) === Nt(e);
}

function Lt(t, e) {
  if (!Array.isArray(e)) return Pt(e, t) ? 0 : -1;

  for (var n = 0, r = e.length; n < r; n++) {
    if (Pt(e[n], t)) return n;
  }

  return -1;
}

function Mt(t, e, n) {
  ct();

  try {
    if (e) for (var r = e; r = r.$parent;) {
      var o = r.$options.errorCaptured;
      if (o) for (var i = 0; i < o.length; i++) {
        try {
          if (!1 === o[i].call(r, t, e, n)) return;
        } catch (t) {
          Rt(t, r, "errorCaptured hook");
        }
      }
    }
    Rt(t, e, n);
  } finally {
    ut();
  }
}

function Ft(t, e, n, r, o) {
  var i;

  try {
    (i = n ? t.apply(e, n) : t.call(e)) && !i._isVue && u(i) && !i._handled && (i["catch"](function (t) {
      return Mt(t, r, o + " (Promise/async)");
    }), i._handled = !0);
  } catch (t) {
    Mt(t, r, o);
  }

  return i;
}

function Rt(t, e, n) {
  if (L.errorHandler) try {
    return L.errorHandler.call(null, t, e, n);
  } catch (e) {
    e !== t && Ut(e, null, "config.errorHandler");
  }
  Ut(t, e, n);
}

function Ut(t, e, n) {
  if (!H && !B || "undefined" == typeof console) throw t;
  console.error(t);
}

var Ht,
    Bt = !1,
    Vt = [],
    zt = !1;

function Wt() {
  zt = !1;
  var t = Vt.slice(0);
  Vt.length = 0;

  for (var e = 0; e < t.length; e++) {
    t[e]();
  }
}

if ("undefined" != typeof Promise && et(Promise)) {
  var qt = Promise.resolve();
  Ht = function Ht() {
    qt.then(Wt), X && setTimeout(k);
  }, Bt = !0;
} else if (W || "undefined" == typeof MutationObserver || !et(MutationObserver) && "[object MutationObserverConstructor]" !== MutationObserver.toString()) Ht = "undefined" != typeof setImmediate && et(setImmediate) ? function () {
  setImmediate(Wt);
} : function () {
  setTimeout(Wt, 0);
};else {
  var Kt = 1,
      Xt = new MutationObserver(Wt),
      Gt = document.createTextNode(String(Kt));
  Xt.observe(Gt, {
    characterData: !0
  }), Ht = function Ht() {
    Kt = (Kt + 1) % 2, Gt.data = String(Kt);
  }, Bt = !0;
}

function Zt(t, e) {
  var n;
  if (Vt.push(function () {
    if (t) try {
      t.call(e);
    } catch (t) {
      Mt(t, e, "nextTick");
    } else n && n(e);
  }), zt || (zt = !0, Ht()), !t && "undefined" != typeof Promise) return new Promise(function (t) {
    n = t;
  });
}

var Jt = new nt();

function Qt(t) {
  !function t(e, n) {
    var r, o;
    var a = Array.isArray(e);
    if (!a && !i(e) || Object.isFrozen(e) || e instanceof lt) return;

    if (e.__ob__) {
      var s = e.__ob__.dep.id;
      if (n.has(s)) return;
      n.add(s);
    }

    if (a) for (r = e.length; r--;) {
      t(e[r], n);
    } else for (o = Object.keys(e), r = o.length; r--;) {
      t(e[o[r]], n);
    }
  }(t, Jt), Jt.clear();
}

var Yt = y(function (t) {
  var e = "&" === t.charAt(0),
      n = "~" === (t = e ? t.slice(1) : t).charAt(0),
      r = "!" === (t = n ? t.slice(1) : t).charAt(0);
  return {
    name: t = r ? t.slice(1) : t,
    once: n,
    capture: r,
    passive: e
  };
});

function te(t, e) {
  function n() {
    var t = arguments,
        r = n.fns;
    if (!Array.isArray(r)) return Ft(r, null, arguments, e, "v-on handler");

    for (var o = r.slice(), i = 0; i < o.length; i++) {
      Ft(o[i], null, t, e, "v-on handler");
    }
  }

  return n.fns = t, n;
}

function ee(t, n, o, i, a, s) {
  var c, u, l, f;

  for (c in t) {
    u = t[c], l = n[c], f = Yt(c), e(u) || (e(l) ? (e(u.fns) && (u = t[c] = te(u, s)), r(f.once) && (u = t[c] = a(f.name, u, f.capture)), o(f.name, u, f.capture, f.passive, f.params)) : u !== l && (l.fns = u, t[c] = l));
  }

  for (c in n) {
    e(t[c]) && i((f = Yt(c)).name, n[c], f.capture);
  }
}

function ne(t, o, i) {
  var a;
  t instanceof lt && (t = t.data.hook || (t.data.hook = {}));
  var s = t[o];

  function c() {
    i.apply(this, arguments), v(a.fns, c);
  }

  e(s) ? a = te([c]) : n(s.fns) && r(s.merged) ? (a = s).fns.push(c) : a = te([s, c]), a.merged = !0, t[o] = a;
}

function re(t, e, r, o, i) {
  if (n(e)) {
    if (m(e, r)) return t[r] = e[r], i || delete e[r], !0;
    if (m(e, o)) return t[r] = e[o], i || delete e[o], !0;
  }

  return !1;
}

function oe(t) {
  return o(t) ? [dt(t)] : Array.isArray(t) ? function t(i, a) {
    var s = [];
    var c, u, l, f;

    for (c = 0; c < i.length; c++) {
      e(u = i[c]) || "boolean" == typeof u || (l = s.length - 1, f = s[l], Array.isArray(u) ? u.length > 0 && (ie((u = t(u, (a || "") + "_" + c))[0]) && ie(f) && (s[l] = dt(f.text + u[0].text), u.shift()), s.push.apply(s, u)) : o(u) ? ie(f) ? s[l] = dt(f.text + u) : "" !== u && s.push(dt(u)) : ie(u) && ie(f) ? s[l] = dt(f.text + u.text) : (r(i._isVList) && n(u.tag) && e(u.key) && n(a) && (u.key = "__vlist" + a + "_" + c + "__"), s.push(u)));
    }

    return s;
  }(t) : void 0;
}

function ie(t) {
  return n(t) && n(t.text) && !1 === t.isComment;
}

function ae(t, e) {
  if (t) {
    for (var n = Object.create(null), r = rt ? Reflect.ownKeys(t) : Object.keys(t), o = 0; o < r.length; o++) {
      var i = r[o];

      if ("__ob__" !== i) {
        for (var a = t[i].from, s = e; s;) {
          if (s._provided && m(s._provided, a)) {
            n[i] = s._provided[a];
            break;
          }

          s = s.$parent;
        }

        if (!s && "default" in t[i]) {
          var c = t[i]["default"];
          n[i] = "function" == typeof c ? c.call(e) : c;
        }
      }
    }

    return n;
  }
}

function se(t, e) {
  if (!t || !t.length) return {};

  for (var n = {}, r = 0, o = t.length; r < o; r++) {
    var i = t[r],
        a = i.data;
    if (a && a.attrs && a.attrs.slot && delete a.attrs.slot, i.context !== e && i.fnContext !== e || !a || null == a.slot) (n["default"] || (n["default"] = [])).push(i);else {
      var s = a.slot,
          c = n[s] || (n[s] = []);
      "template" === i.tag ? c.push.apply(c, i.children || []) : c.push(i);
    }
  }

  for (var u in n) {
    n[u].every(ce) && delete n[u];
  }

  return n;
}

function ce(t) {
  return t.isComment && !t.asyncFactory || " " === t.text;
}

function ue(e, n, r) {
  var o,
      i = Object.keys(n).length > 0,
      a = e ? !!e.$stable : !i,
      s = e && e.$key;

  if (e) {
    if (e._normalized) return e._normalized;
    if (a && r && r !== t && s === r.$key && !i && !r.$hasNormal) return r;

    for (var c in o = {}, e) {
      e[c] && "$" !== c[0] && (o[c] = le(n, c, e[c]));
    }
  } else o = {};

  for (var u in n) {
    u in o || (o[u] = fe(n, u));
  }

  return e && Object.isExtensible(e) && (e._normalized = o), M(o, "$stable", a), M(o, "$key", s), M(o, "$hasNormal", i), o;
}

function le(t, e, n) {
  var r = function r() {
    var t = arguments.length ? n.apply(null, arguments) : n({});
    return (t = t && "object" == _typeof(t) && !Array.isArray(t) ? [t] : oe(t)) && (0 === t.length || 1 === t.length && t[0].isComment) ? void 0 : t;
  };

  return n.proxy && Object.defineProperty(t, e, {
    get: r,
    enumerable: !0,
    configurable: !0
  }), r;
}

function fe(t, e) {
  return function () {
    return t[e];
  };
}

function pe(t, e) {
  var r, o, a, s, c;
  if (Array.isArray(t) || "string" == typeof t) for (r = new Array(t.length), o = 0, a = t.length; o < a; o++) {
    r[o] = e(t[o], o);
  } else if ("number" == typeof t) for (r = new Array(t), o = 0; o < t; o++) {
    r[o] = e(o + 1, o);
  } else if (i(t)) if (rt && t[Symbol.iterator]) {
    r = [];

    for (var u = t[Symbol.iterator](), l = u.next(); !l.done;) {
      r.push(e(l.value, r.length)), l = u.next();
    }
  } else for (s = Object.keys(t), r = new Array(s.length), o = 0, a = s.length; o < a; o++) {
    c = s[o], r[o] = e(t[c], c, o);
  }
  return n(r) || (r = []), r._isVList = !0, r;
}

function de(t, e, n, r) {
  var o,
      i = this.$scopedSlots[t];
  i ? (n = n || {}, r && (n = x(x({}, r), n)), o = i(n) || e) : o = this.$slots[t] || e;
  var a = n && n.slot;
  return a ? this.$createElement("template", {
    slot: a
  }, o) : o;
}

function ve(t) {
  return It(this.$options, "filters", t) || E;
}

function he(t, e) {
  return Array.isArray(t) ? -1 === t.indexOf(e) : t !== e;
}

function me(t, e, n, r, o) {
  var i = L.keyCodes[e] || n;
  return o && r && !L.keyCodes[e] ? he(o, r) : i ? he(i, t) : r ? $(r) !== e : void 0;
}

function ye(t, e, n, r, o) {
  if (n) if (i(n)) {
    var a;
    Array.isArray(n) && (n = O(n));

    var s = function s(i) {
      if ("class" === i || "style" === i || d(i)) a = t;else {
        var s = t.attrs && t.attrs.type;
        a = r || L.mustUseProp(e, s, i) ? t.domProps || (t.domProps = {}) : t.attrs || (t.attrs = {});
      }

      var c = _(i),
          u = $(i);

      c in a || u in a || (a[i] = n[i], o && ((t.on || (t.on = {}))["update:" + i] = function (t) {
        n[i] = t;
      }));
    };

    for (var c in n) {
      s(c);
    }
  } else ;
  return t;
}

function ge(t, e) {
  var n = this._staticTrees || (this._staticTrees = []),
      r = n[t];
  return r && !e ? r : (be(r = n[t] = this.$options.staticRenderFns[t].call(this._renderProxy, null, this), "__static__" + t, !1), r);
}

function _e(t, e, n) {
  return be(t, "__once__" + e + (n ? "_" + n : ""), !0), t;
}

function be(t, e, n) {
  if (Array.isArray(t)) for (var r = 0; r < t.length; r++) {
    t[r] && "string" != typeof t[r] && Ce(t[r], e + "_" + r, n);
  } else Ce(t, e, n);
}

function Ce(t, e, n) {
  t.isStatic = !0, t.key = e, t.isOnce = n;
}

function $e(t, e) {
  if (e) if (s(e)) {
    var n = t.on = t.on ? x({}, t.on) : {};

    for (var r in e) {
      var o = n[r],
          i = e[r];
      n[r] = o ? [].concat(o, i) : i;
    }
  } else ;
  return t;
}

function we(t, e, n, r) {
  e = e || {
    $stable: !n
  };

  for (var o = 0; o < t.length; o++) {
    var i = t[o];
    Array.isArray(i) ? we(i, e, n) : i && (i.proxy && (i.fn.proxy = !0), e[i.key] = i.fn);
  }

  return r && (e.$key = r), e;
}

function Ae(t, e) {
  for (var n = 0; n < e.length; n += 2) {
    var r = e[n];
    "string" == typeof r && r && (t[e[n]] = e[n + 1]);
  }

  return t;
}

function xe(t, e) {
  return "string" == typeof t ? e + t : t;
}

function Oe(t) {
  t._o = _e, t._n = f, t._s = l, t._l = pe, t._t = de, t._q = j, t._i = T, t._m = ge, t._f = ve, t._k = me, t._b = ye, t._v = dt, t._e = pt, t._u = we, t._g = $e, t._d = Ae, t._p = xe;
}

function ke(e, n, o, i, a) {
  var s,
      c = this,
      u = a.options;
  m(i, "_uid") ? (s = Object.create(i))._original = i : (s = i, i = i._original);
  var l = r(u._compiled),
      f = !l;
  this.data = e, this.props = n, this.children = o, this.parent = i, this.listeners = e.on || t, this.injections = ae(u.inject, i), this.slots = function () {
    return c.$slots || ue(e.scopedSlots, c.$slots = se(o, i)), c.$slots;
  }, Object.defineProperty(this, "scopedSlots", {
    enumerable: !0,
    get: function get() {
      return ue(e.scopedSlots, this.slots());
    }
  }), l && (this.$options = u, this.$slots = this.slots(), this.$scopedSlots = ue(e.scopedSlots, this.$slots)), u._scopeId ? this._c = function (t, e, n, r) {
    var o = Le(s, t, e, n, r, f);
    return o && !Array.isArray(o) && (o.fnScopeId = u._scopeId, o.fnContext = i), o;
  } : this._c = function (t, e, n, r) {
    return Le(s, t, e, n, r, f);
  };
}

function Se(t, e, n, r, o) {
  var i = vt(t);
  return i.fnContext = n, i.fnOptions = r, e.slot && ((i.data || (i.data = {})).slot = e.slot), i;
}

function Ee(t, e) {
  for (var n in e) {
    t[_(n)] = e[n];
  }
}

Oe(ke.prototype);
var je = {
  init: function init(t, e) {
    if (t.componentInstance && !t.componentInstance._isDestroyed && t.data.keepAlive) {
      var r = t;
      je.prepatch(r, r);
    } else {
      (t.componentInstance = function (t, e) {
        var r = {
          _isComponent: !0,
          _parentVnode: t,
          parent: e
        },
            o = t.data.inlineTemplate;
        n(o) && (r.render = o.render, r.staticRenderFns = o.staticRenderFns);
        return new t.componentOptions.Ctor(r);
      }(t, qe)).$mount(e ? t.elm : void 0, e);
    }
  },
  prepatch: function prepatch(e, n) {
    var r = n.componentOptions;
    !function (e, n, r, o, i) {
      var a = o.data.scopedSlots,
          s = e.$scopedSlots,
          c = !!(a && !a.$stable || s !== t && !s.$stable || a && e.$scopedSlots.$key !== a.$key),
          u = !!(i || e.$options._renderChildren || c);
      e.$options._parentVnode = o, e.$vnode = o, e._vnode && (e._vnode.parent = o);

      if (e.$options._renderChildren = i, e.$attrs = o.data.attrs || t, e.$listeners = r || t, n && e.$options.props) {
        _t(!1);

        for (var l = e._props, f = e.$options._propKeys || [], p = 0; p < f.length; p++) {
          var d = f[p],
              v = e.$options.props;
          l[d] = Dt(d, v, n, e);
        }

        _t(!0), e.$options.propsData = n;
      }

      r = r || t;
      var h = e.$options._parentListeners;
      e.$options._parentListeners = r, We(e, r, h), u && (e.$slots = se(i, o.context), e.$forceUpdate());
    }(n.componentInstance = e.componentInstance, r.propsData, r.listeners, n, r.children);
  },
  insert: function insert(t) {
    var e,
        n = t.context,
        r = t.componentInstance;
    r._isMounted || (r._isMounted = !0, Ze(r, "mounted")), t.data.keepAlive && (n._isMounted ? ((e = r)._inactive = !1, Qe.push(e)) : Ge(r, !0));
  },
  destroy: function destroy(t) {
    var e = t.componentInstance;
    e._isDestroyed || (t.data.keepAlive ? function t(e, n) {
      if (n && (e._directInactive = !0, Xe(e))) return;

      if (!e._inactive) {
        e._inactive = !0;

        for (var r = 0; r < e.$children.length; r++) {
          t(e.$children[r]);
        }

        Ze(e, "deactivated");
      }
    }(e, !0) : e.$destroy());
  }
},
    Te = Object.keys(je);

function Ie(o, a, s, c, l) {
  if (!e(o)) {
    var f = s.$options._base;

    if (i(o) && (o = f.extend(o)), "function" == typeof o) {
      var p;
      if (e(o.cid) && void 0 === (o = function (t, o) {
        if (r(t.error) && n(t.errorComp)) return t.errorComp;
        if (n(t.resolved)) return t.resolved;
        var a = Fe;
        a && n(t.owners) && -1 === t.owners.indexOf(a) && t.owners.push(a);
        if (r(t.loading) && n(t.loadingComp)) return t.loadingComp;

        if (a && !n(t.owners)) {
          var s = t.owners = [a],
              c = !0,
              l = null,
              f = null;
          a.$on("hook:destroyed", function () {
            return v(s, a);
          });

          var p = function p(t) {
            for (var e = 0, n = s.length; e < n; e++) {
              s[e].$forceUpdate();
            }

            t && (s.length = 0, null !== l && (clearTimeout(l), l = null), null !== f && (clearTimeout(f), f = null));
          },
              d = I(function (e) {
            t.resolved = Re(e, o), c ? s.length = 0 : p(!0);
          }),
              h = I(function (e) {
            n(t.errorComp) && (t.error = !0, p(!0));
          }),
              m = t(d, h);

          return i(m) && (u(m) ? e(t.resolved) && m.then(d, h) : u(m.component) && (m.component.then(d, h), n(m.error) && (t.errorComp = Re(m.error, o)), n(m.loading) && (t.loadingComp = Re(m.loading, o), 0 === m.delay ? t.loading = !0 : l = setTimeout(function () {
            l = null, e(t.resolved) && e(t.error) && (t.loading = !0, p(!1));
          }, m.delay || 200)), n(m.timeout) && (f = setTimeout(function () {
            f = null, e(t.resolved) && h(null);
          }, m.timeout)))), c = !1, t.loading ? t.loadingComp : t.resolved;
        }
      }(p = o, f))) return function (t, e, n, r, o) {
        var i = pt();
        return i.asyncFactory = t, i.asyncMeta = {
          data: e,
          context: n,
          children: r,
          tag: o
        }, i;
      }(p, a, s, c, l);
      a = a || {}, _n(o), n(a.model) && function (t, e) {
        var r = t.model && t.model.prop || "value",
            o = t.model && t.model.event || "input";
        (e.attrs || (e.attrs = {}))[r] = e.model.value;
        var i = e.on || (e.on = {}),
            a = i[o],
            s = e.model.callback;
        n(a) ? (Array.isArray(a) ? -1 === a.indexOf(s) : a !== s) && (i[o] = [s].concat(a)) : i[o] = s;
      }(o.options, a);

      var d = function (t, r, o) {
        var i = r.options.props;

        if (!e(i)) {
          var a = {},
              s = t.attrs,
              c = t.props;
          if (n(s) || n(c)) for (var u in i) {
            var l = $(u);
            re(a, c, u, l, !0) || re(a, s, u, l, !1);
          }
          return a;
        }
      }(a, o);

      if (r(o.options.functional)) return function (e, r, o, i, a) {
        var s = e.options,
            c = {},
            u = s.props;
        if (n(u)) for (var l in u) {
          c[l] = Dt(l, u, r || t);
        } else n(o.attrs) && Ee(c, o.attrs), n(o.props) && Ee(c, o.props);
        var f = new ke(o, c, a, i, e),
            p = s.render.call(null, f._c, f);
        if (p instanceof lt) return Se(p, o, f.parent, s);

        if (Array.isArray(p)) {
          for (var d = oe(p) || [], v = new Array(d.length), h = 0; h < d.length; h++) {
            v[h] = Se(d[h], o, f.parent, s);
          }

          return v;
        }
      }(o, d, a, s, c);
      var h = a.on;

      if (a.on = a.nativeOn, r(o.options["abstract"])) {
        var m = a.slot;
        a = {}, m && (a.slot = m);
      }

      !function (t) {
        for (var e = t.hook || (t.hook = {}), n = 0; n < Te.length; n++) {
          var r = Te[n],
              o = e[r],
              i = je[r];
          o === i || o && o._merged || (e[r] = o ? De(i, o) : i);
        }
      }(a);
      var y = o.options.name || l;
      return new lt("vue-component-" + o.cid + (y ? "-" + y : ""), a, void 0, void 0, void 0, s, {
        Ctor: o,
        propsData: d,
        listeners: h,
        tag: l,
        children: c
      }, p);
    }
  }
}

function De(t, e) {
  var n = function n(_n2, r) {
    t(_n2, r), e(_n2, r);
  };

  return n._merged = !0, n;
}

var Ne = 1,
    Pe = 2;

function Le(t, a, s, c, u, l) {
  return (Array.isArray(s) || o(s)) && (u = c, c = s, s = void 0), r(l) && (u = Pe), function (t, o, a, s, c) {
    if (n(a) && n(a.__ob__)) return pt();
    n(a) && n(a.is) && (o = a.is);
    if (!o) return pt();
    Array.isArray(s) && "function" == typeof s[0] && ((a = a || {}).scopedSlots = {
      "default": s[0]
    }, s.length = 0);
    c === Pe ? s = oe(s) : c === Ne && (s = function (t) {
      for (var e = 0; e < t.length; e++) {
        if (Array.isArray(t[e])) return Array.prototype.concat.apply([], t);
      }

      return t;
    }(s));
    var u, l;

    if ("string" == typeof o) {
      var f;
      l = t.$vnode && t.$vnode.ns || L.getTagNamespace(o), u = L.isReservedTag(o) ? new lt(L.parsePlatformTagName(o), a, s, void 0, void 0, t) : a && a.pre || !n(f = It(t.$options, "components", o)) ? new lt(o, a, s, void 0, void 0, t) : Ie(f, a, t, s, o);
    } else u = Ie(o, a, t, s);

    return Array.isArray(u) ? u : n(u) ? (n(l) && function t(o, i, a) {
      o.ns = i;
      "foreignObject" === o.tag && (i = void 0, a = !0);
      if (n(o.children)) for (var s = 0, c = o.children.length; s < c; s++) {
        var u = o.children[s];
        n(u.tag) && (e(u.ns) || r(a) && "svg" !== u.tag) && t(u, i, a);
      }
    }(u, l), n(a) && function (t) {
      i(t.style) && Qt(t.style);
      i(t["class"]) && Qt(t["class"]);
    }(a), u) : pt();
  }(t, a, s, c, u);
}

var Me,
    Fe = null;

function Re(t, e) {
  return (t.__esModule || rt && "Module" === t[Symbol.toStringTag]) && (t = t["default"]), i(t) ? e.extend(t) : t;
}

function Ue(t) {
  return t.isComment && t.asyncFactory;
}

function He(t) {
  if (Array.isArray(t)) for (var e = 0; e < t.length; e++) {
    var r = t[e];
    if (n(r) && (n(r.componentOptions) || Ue(r))) return r;
  }
}

function Be(t, e) {
  Me.$on(t, e);
}

function Ve(t, e) {
  Me.$off(t, e);
}

function ze(t, e) {
  var n = Me;
  return function r() {
    null !== e.apply(null, arguments) && n.$off(t, r);
  };
}

function We(t, e, n) {
  Me = t, ee(e, n || {}, Be, Ve, ze, t), Me = void 0;
}

var qe = null;

function Ke(t) {
  var e = qe;
  return qe = t, function () {
    qe = e;
  };
}

function Xe(t) {
  for (; t && (t = t.$parent);) {
    if (t._inactive) return !0;
  }

  return !1;
}

function Ge(t, e) {
  if (e) {
    if (t._directInactive = !1, Xe(t)) return;
  } else if (t._directInactive) return;

  if (t._inactive || null === t._inactive) {
    t._inactive = !1;

    for (var n = 0; n < t.$children.length; n++) {
      Ge(t.$children[n]);
    }

    Ze(t, "activated");
  }
}

function Ze(t, e) {
  ct();
  var n = t.$options[e],
      r = e + " hook";
  if (n) for (var o = 0, i = n.length; o < i; o++) {
    Ft(n[o], t, null, t, r);
  }
  t._hasHookEvent && t.$emit("hook:" + e), ut();
}

var Je = [],
    Qe = [],
    Ye = {},
    tn = !1,
    en = !1,
    nn = 0;
var rn = 0,
    on = Date.now;

if (H && !W) {
  var an = window.performance;
  an && "function" == typeof an.now && on() > document.createEvent("Event").timeStamp && (on = function on() {
    return an.now();
  });
}

function sn() {
  var t, e;

  for (rn = on(), en = !0, Je.sort(function (t, e) {
    return t.id - e.id;
  }), nn = 0; nn < Je.length; nn++) {
    (t = Je[nn]).before && t.before(), e = t.id, Ye[e] = null, t.run();
  }

  var n = Qe.slice(),
      r = Je.slice();
  nn = Je.length = Qe.length = 0, Ye = {}, tn = en = !1, function (t) {
    for (var e = 0; e < t.length; e++) {
      t[e]._inactive = !0, Ge(t[e], !0);
    }
  }(n), function (t) {
    var e = t.length;

    for (; e--;) {
      var n = t[e],
          r = n.vm;
      r._watcher === n && r._isMounted && !r._isDestroyed && Ze(r, "updated");
    }
  }(r), tt && L.devtools && tt.emit("flush");
}

var cn = 0,
    un = function un(t, e, n, r, o) {
  this.vm = t, o && (t._watcher = this), t._watchers.push(this), r ? (this.deep = !!r.deep, this.user = !!r.user, this.lazy = !!r.lazy, this.sync = !!r.sync, this.before = r.before) : this.deep = this.user = this.lazy = this.sync = !1, this.cb = n, this.id = ++cn, this.active = !0, this.dirty = this.lazy, this.deps = [], this.newDeps = [], this.depIds = new nt(), this.newDepIds = new nt(), this.expression = "", "function" == typeof e ? this.getter = e : (this.getter = function (t) {
    if (!F.test(t)) {
      var e = t.split(".");
      return function (t) {
        for (var n = 0; n < e.length; n++) {
          if (!t) return;
          t = t[e[n]];
        }

        return t;
      };
    }
  }(e), this.getter || (this.getter = k)), this.value = this.lazy ? void 0 : this.get();
};

un.prototype.get = function () {
  var t;
  ct(this);
  var e = this.vm;

  try {
    t = this.getter.call(e, e);
  } catch (t) {
    if (!this.user) throw t;
    Mt(t, e, 'getter for watcher "' + this.expression + '"');
  } finally {
    this.deep && Qt(t), ut(), this.cleanupDeps();
  }

  return t;
}, un.prototype.addDep = function (t) {
  var e = t.id;
  this.newDepIds.has(e) || (this.newDepIds.add(e), this.newDeps.push(t), this.depIds.has(e) || t.addSub(this));
}, un.prototype.cleanupDeps = function () {
  for (var t = this.deps.length; t--;) {
    var e = this.deps[t];
    this.newDepIds.has(e.id) || e.removeSub(this);
  }

  var n = this.depIds;
  this.depIds = this.newDepIds, this.newDepIds = n, this.newDepIds.clear(), n = this.deps, this.deps = this.newDeps, this.newDeps = n, this.newDeps.length = 0;
}, un.prototype.update = function () {
  this.lazy ? this.dirty = !0 : this.sync ? this.run() : function (t) {
    var e = t.id;

    if (null == Ye[e]) {
      if (Ye[e] = !0, en) {
        for (var n = Je.length - 1; n > nn && Je[n].id > t.id;) {
          n--;
        }

        Je.splice(n + 1, 0, t);
      } else Je.push(t);

      tn || (tn = !0, Zt(sn));
    }
  }(this);
}, un.prototype.run = function () {
  if (this.active) {
    var t = this.get();

    if (t !== this.value || i(t) || this.deep) {
      var e = this.value;
      if (this.value = t, this.user) try {
        this.cb.call(this.vm, t, e);
      } catch (t) {
        Mt(t, this.vm, 'callback for watcher "' + this.expression + '"');
      } else this.cb.call(this.vm, t, e);
    }
  }
}, un.prototype.evaluate = function () {
  this.value = this.get(), this.dirty = !1;
}, un.prototype.depend = function () {
  for (var t = this.deps.length; t--;) {
    this.deps[t].depend();
  }
}, un.prototype.teardown = function () {
  if (this.active) {
    this.vm._isBeingDestroyed || v(this.vm._watchers, this);

    for (var t = this.deps.length; t--;) {
      this.deps[t].removeSub(this);
    }

    this.active = !1;
  }
};
var ln = {
  enumerable: !0,
  configurable: !0,
  get: k,
  set: k
};

function fn(t, e, n) {
  ln.get = function () {
    return this[e][n];
  }, ln.set = function (t) {
    this[e][n] = t;
  }, Object.defineProperty(t, n, ln);
}

function pn(t) {
  t._watchers = [];
  var e = t.$options;
  e.props && function (t, e) {
    var n = t.$options.propsData || {},
        r = t._props = {},
        o = t.$options._propKeys = [];
    t.$parent && _t(!1);

    var i = function i(_i) {
      o.push(_i);
      var a = Dt(_i, e, n, t);
      $t(r, _i, a), _i in t || fn(t, "_props", _i);
    };

    for (var a in e) {
      i(a);
    }

    _t(!0);
  }(t, e.props), e.methods && function (t, e) {
    t.$options.props;

    for (var n in e) {
      t[n] = "function" != typeof e[n] ? k : w(e[n], t);
    }
  }(t, e.methods), e.data ? function (t) {
    var e = t.$options.data;
    s(e = t._data = "function" == typeof e ? function (t, e) {
      ct();

      try {
        return t.call(e, e);
      } catch (t) {
        return Mt(t, e, "data()"), {};
      } finally {
        ut();
      }
    }(e, t) : e || {}) || (e = {});
    var n = Object.keys(e),
        r = t.$options.props,
        o = (t.$options.methods, n.length);

    for (; o--;) {
      var i = n[o];
      r && m(r, i) || (a = void 0, 36 !== (a = (i + "").charCodeAt(0)) && 95 !== a && fn(t, "_data", i));
    }

    var a;
    Ct(e, !0);
  }(t) : Ct(t._data = {}, !0), e.computed && function (t, e) {
    var n = t._computedWatchers = Object.create(null),
        r = Y();

    for (var o in e) {
      var i = e[o],
          a = "function" == typeof i ? i : i.get;
      r || (n[o] = new un(t, a || k, k, dn)), o in t || vn(t, o, i);
    }
  }(t, e.computed), e.watch && e.watch !== Z && function (t, e) {
    for (var n in e) {
      var r = e[n];
      if (Array.isArray(r)) for (var o = 0; o < r.length; o++) {
        yn(t, n, r[o]);
      } else yn(t, n, r);
    }
  }(t, e.watch);
}

var dn = {
  lazy: !0
};

function vn(t, e, n) {
  var r = !Y();
  "function" == typeof n ? (ln.get = r ? hn(e) : mn(n), ln.set = k) : (ln.get = n.get ? r && !1 !== n.cache ? hn(e) : mn(n.get) : k, ln.set = n.set || k), Object.defineProperty(t, e, ln);
}

function hn(t) {
  return function () {
    var e = this._computedWatchers && this._computedWatchers[t];
    if (e) return e.dirty && e.evaluate(), at.target && e.depend(), e.value;
  };
}

function mn(t) {
  return function () {
    return t.call(this, this);
  };
}

function yn(t, e, n, r) {
  return s(n) && (r = n, n = n.handler), "string" == typeof n && (n = t[n]), t.$watch(e, n, r);
}

var gn = 0;

function _n(t) {
  var e = t.options;

  if (t["super"]) {
    var n = _n(t["super"]);

    if (n !== t.superOptions) {
      t.superOptions = n;

      var r = function (t) {
        var e,
            n = t.options,
            r = t.sealedOptions;

        for (var o in n) {
          n[o] !== r[o] && (e || (e = {}), e[o] = n[o]);
        }

        return e;
      }(t);

      r && x(t.extendOptions, r), (e = t.options = Tt(n, t.extendOptions)).name && (e.components[e.name] = t);
    }
  }

  return e;
}

function bn(t) {
  this._init(t);
}

function Cn(t) {
  t.cid = 0;
  var e = 1;

  t.extend = function (t) {
    t = t || {};
    var n = this,
        r = n.cid,
        o = t._Ctor || (t._Ctor = {});
    if (o[r]) return o[r];

    var i = t.name || n.options.name,
        a = function a(t) {
      this._init(t);
    };

    return (a.prototype = Object.create(n.prototype)).constructor = a, a.cid = e++, a.options = Tt(n.options, t), a["super"] = n, a.options.props && function (t) {
      var e = t.options.props;

      for (var n in e) {
        fn(t.prototype, "_props", n);
      }
    }(a), a.options.computed && function (t) {
      var e = t.options.computed;

      for (var n in e) {
        vn(t.prototype, n, e[n]);
      }
    }(a), a.extend = n.extend, a.mixin = n.mixin, a.use = n.use, N.forEach(function (t) {
      a[t] = n[t];
    }), i && (a.options.components[i] = a), a.superOptions = n.options, a.extendOptions = t, a.sealedOptions = x({}, a.options), o[r] = a, a;
  };
}

function $n(t) {
  return t && (t.Ctor.options.name || t.tag);
}

function wn(t, e) {
  return Array.isArray(t) ? t.indexOf(e) > -1 : "string" == typeof t ? t.split(",").indexOf(e) > -1 : (n = t, "[object RegExp]" === a.call(n) && t.test(e));
  var n;
}

function An(t, e) {
  var n = t.cache,
      r = t.keys,
      o = t._vnode;

  for (var i in n) {
    var a = n[i];

    if (a) {
      var s = $n(a.componentOptions);
      s && !e(s) && xn(n, i, r, o);
    }
  }
}

function xn(t, e, n, r) {
  var o = t[e];
  !o || r && o.tag === r.tag || o.componentInstance.$destroy(), t[e] = null, v(n, e);
}

!function (e) {
  e.prototype._init = function (e) {
    var n = this;
    n._uid = gn++, n._isVue = !0, e && e._isComponent ? function (t, e) {
      var n = t.$options = Object.create(t.constructor.options),
          r = e._parentVnode;
      n.parent = e.parent, n._parentVnode = r;
      var o = r.componentOptions;
      n.propsData = o.propsData, n._parentListeners = o.listeners, n._renderChildren = o.children, n._componentTag = o.tag, e.render && (n.render = e.render, n.staticRenderFns = e.staticRenderFns);
    }(n, e) : n.$options = Tt(_n(n.constructor), e || {}, n), n._renderProxy = n, n._self = n, function (t) {
      var e = t.$options,
          n = e.parent;

      if (n && !e["abstract"]) {
        for (; n.$options["abstract"] && n.$parent;) {
          n = n.$parent;
        }

        n.$children.push(t);
      }

      t.$parent = n, t.$root = n ? n.$root : t, t.$children = [], t.$refs = {}, t._watcher = null, t._inactive = null, t._directInactive = !1, t._isMounted = !1, t._isDestroyed = !1, t._isBeingDestroyed = !1;
    }(n), function (t) {
      t._events = Object.create(null), t._hasHookEvent = !1;
      var e = t.$options._parentListeners;
      e && We(t, e);
    }(n), function (e) {
      e._vnode = null, e._staticTrees = null;
      var n = e.$options,
          r = e.$vnode = n._parentVnode,
          o = r && r.context;
      e.$slots = se(n._renderChildren, o), e.$scopedSlots = t, e._c = function (t, n, r, o) {
        return Le(e, t, n, r, o, !1);
      }, e.$createElement = function (t, n, r, o) {
        return Le(e, t, n, r, o, !0);
      };
      var i = r && r.data;
      $t(e, "$attrs", i && i.attrs || t, null, !0), $t(e, "$listeners", n._parentListeners || t, null, !0);
    }(n), Ze(n, "beforeCreate"), function (t) {
      var e = ae(t.$options.inject, t);
      e && (_t(!1), Object.keys(e).forEach(function (n) {
        $t(t, n, e[n]);
      }), _t(!0));
    }(n), pn(n), function (t) {
      var e = t.$options.provide;
      e && (t._provided = "function" == typeof e ? e.call(t) : e);
    }(n), Ze(n, "created"), n.$options.el && n.$mount(n.$options.el);
  };
}(bn), function (t) {
  var e = {
    get: function get() {
      return this._data;
    }
  },
      n = {
    get: function get() {
      return this._props;
    }
  };
  Object.defineProperty(t.prototype, "$data", e), Object.defineProperty(t.prototype, "$props", n), t.prototype.$set = wt, t.prototype.$delete = At, t.prototype.$watch = function (t, e, n) {
    if (s(e)) return yn(this, t, e, n);
    (n = n || {}).user = !0;
    var r = new un(this, t, e, n);
    if (n.immediate) try {
      e.call(this, r.value);
    } catch (t) {
      Mt(t, this, 'callback for immediate watcher "' + r.expression + '"');
    }
    return function () {
      r.teardown();
    };
  };
}(bn), function (t) {
  var e = /^hook:/;
  t.prototype.$on = function (t, n) {
    var r = this;
    if (Array.isArray(t)) for (var o = 0, i = t.length; o < i; o++) {
      r.$on(t[o], n);
    } else (r._events[t] || (r._events[t] = [])).push(n), e.test(t) && (r._hasHookEvent = !0);
    return r;
  }, t.prototype.$once = function (t, e) {
    var n = this;

    function r() {
      n.$off(t, r), e.apply(n, arguments);
    }

    return r.fn = e, n.$on(t, r), n;
  }, t.prototype.$off = function (t, e) {
    var n = this;
    if (!arguments.length) return n._events = Object.create(null), n;

    if (Array.isArray(t)) {
      for (var r = 0, o = t.length; r < o; r++) {
        n.$off(t[r], e);
      }

      return n;
    }

    var i,
        a = n._events[t];
    if (!a) return n;
    if (!e) return n._events[t] = null, n;

    for (var s = a.length; s--;) {
      if ((i = a[s]) === e || i.fn === e) {
        a.splice(s, 1);
        break;
      }
    }

    return n;
  }, t.prototype.$emit = function (t) {
    var e = this._events[t];

    if (e) {
      e = e.length > 1 ? A(e) : e;

      for (var n = A(arguments, 1), r = 'event handler for "' + t + '"', o = 0, i = e.length; o < i; o++) {
        Ft(e[o], this, n, this, r);
      }
    }

    return this;
  };
}(bn), function (t) {
  t.prototype._update = function (t, e) {
    var n = this,
        r = n.$el,
        o = n._vnode,
        i = Ke(n);
    n._vnode = t, n.$el = o ? n.__patch__(o, t) : n.__patch__(n.$el, t, e, !1), i(), r && (r.__vue__ = null), n.$el && (n.$el.__vue__ = n), n.$vnode && n.$parent && n.$vnode === n.$parent._vnode && (n.$parent.$el = n.$el);
  }, t.prototype.$forceUpdate = function () {
    this._watcher && this._watcher.update();
  }, t.prototype.$destroy = function () {
    var t = this;

    if (!t._isBeingDestroyed) {
      Ze(t, "beforeDestroy"), t._isBeingDestroyed = !0;
      var e = t.$parent;
      !e || e._isBeingDestroyed || t.$options["abstract"] || v(e.$children, t), t._watcher && t._watcher.teardown();

      for (var n = t._watchers.length; n--;) {
        t._watchers[n].teardown();
      }

      t._data.__ob__ && t._data.__ob__.vmCount--, t._isDestroyed = !0, t.__patch__(t._vnode, null), Ze(t, "destroyed"), t.$off(), t.$el && (t.$el.__vue__ = null), t.$vnode && (t.$vnode.parent = null);
    }
  };
}(bn), function (t) {
  Oe(t.prototype), t.prototype.$nextTick = function (t) {
    return Zt(t, this);
  }, t.prototype._render = function () {
    var t,
        e = this,
        n = e.$options,
        r = n.render,
        o = n._parentVnode;
    o && (e.$scopedSlots = ue(o.data.scopedSlots, e.$slots, e.$scopedSlots)), e.$vnode = o;

    try {
      Fe = e, t = r.call(e._renderProxy, e.$createElement);
    } catch (n) {
      Mt(n, e, "render"), t = e._vnode;
    } finally {
      Fe = null;
    }

    return Array.isArray(t) && 1 === t.length && (t = t[0]), t instanceof lt || (t = pt()), t.parent = o, t;
  };
}(bn);
var On = [String, RegExp, Array],
    kn = {
  KeepAlive: {
    name: "keep-alive",
    "abstract": !0,
    props: {
      include: On,
      exclude: On,
      max: [String, Number]
    },
    created: function created() {
      this.cache = Object.create(null), this.keys = [];
    },
    destroyed: function destroyed() {
      for (var t in this.cache) {
        xn(this.cache, t, this.keys);
      }
    },
    mounted: function mounted() {
      var t = this;
      this.$watch("include", function (e) {
        An(t, function (t) {
          return wn(e, t);
        });
      }), this.$watch("exclude", function (e) {
        An(t, function (t) {
          return !wn(e, t);
        });
      });
    },
    render: function render() {
      var t = this.$slots["default"],
          e = He(t),
          n = e && e.componentOptions;

      if (n) {
        var r = $n(n),
            o = this.include,
            i = this.exclude;
        if (o && (!r || !wn(o, r)) || i && r && wn(i, r)) return e;
        var a = this.cache,
            s = this.keys,
            c = null == e.key ? n.Ctor.cid + (n.tag ? "::" + n.tag : "") : e.key;
        a[c] ? (e.componentInstance = a[c].componentInstance, v(s, c), s.push(c)) : (a[c] = e, s.push(c), this.max && s.length > parseInt(this.max) && xn(a, s[0], s, this._vnode)), e.data.keepAlive = !0;
      }

      return e || t && t[0];
    }
  }
};
!function (t) {
  var e = {
    get: function get() {
      return L;
    }
  };
  Object.defineProperty(t, "config", e), t.util = {
    warn: ot,
    extend: x,
    mergeOptions: Tt,
    defineReactive: $t
  }, t.set = wt, t["delete"] = At, t.nextTick = Zt, t.observable = function (t) {
    return Ct(t), t;
  }, t.options = Object.create(null), N.forEach(function (e) {
    t.options[e + "s"] = Object.create(null);
  }), t.options._base = t, x(t.options.components, kn), function (t) {
    t.use = function (t) {
      var e = this._installedPlugins || (this._installedPlugins = []);
      if (e.indexOf(t) > -1) return this;
      var n = A(arguments, 1);
      return n.unshift(this), "function" == typeof t.install ? t.install.apply(t, n) : "function" == typeof t && t.apply(null, n), e.push(t), this;
    };
  }(t), function (t) {
    t.mixin = function (t) {
      return this.options = Tt(this.options, t), this;
    };
  }(t), Cn(t), function (t) {
    N.forEach(function (e) {
      t[e] = function (t, n) {
        return n ? ("component" === e && s(n) && (n.name = n.name || t, n = this.options._base.extend(n)), "directive" === e && "function" == typeof n && (n = {
          bind: n,
          update: n
        }), this.options[e + "s"][t] = n, n) : this.options[e + "s"][t];
      };
    });
  }(t);
}(bn), Object.defineProperty(bn.prototype, "$isServer", {
  get: Y
}), Object.defineProperty(bn.prototype, "$ssrContext", {
  get: function get() {
    return this.$vnode && this.$vnode.ssrContext;
  }
}), Object.defineProperty(bn, "FunctionalRenderContext", {
  value: ke
}), bn.version = "2.6.12";

var Sn = p("style,class"),
    En = p("input,textarea,option,select,progress"),
    jn = p("contenteditable,draggable,spellcheck"),
    Tn = p("events,caret,typing,plaintext-only"),
    In = function In(t, e) {
  return Mn(e) || "false" === e ? "false" : "contenteditable" === t && Tn(e) ? e : "true";
},
    Dn = p("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),
    Nn = "http://www.w3.org/1999/xlink",
    Pn = function Pn(t) {
  return ":" === t.charAt(5) && "xlink" === t.slice(0, 5);
},
    Ln = function Ln(t) {
  return Pn(t) ? t.slice(6, t.length) : "";
},
    Mn = function Mn(t) {
  return null == t || !1 === t;
};

function Fn(t) {
  for (var e = t.data, r = t, o = t; n(o.componentInstance);) {
    (o = o.componentInstance._vnode) && o.data && (e = Rn(o.data, e));
  }

  for (; n(r = r.parent);) {
    r && r.data && (e = Rn(e, r.data));
  }

  return function (t, e) {
    if (n(t) || n(e)) return Un(t, Hn(e));
    return "";
  }(e.staticClass, e["class"]);
}

function Rn(t, e) {
  return {
    staticClass: Un(t.staticClass, e.staticClass),
    "class": n(t["class"]) ? [t["class"], e["class"]] : e["class"]
  };
}

function Un(t, e) {
  return t ? e ? t + " " + e : t : e || "";
}

function Hn(t) {
  return Array.isArray(t) ? function (t) {
    for (var e, r = "", o = 0, i = t.length; o < i; o++) {
      n(e = Hn(t[o])) && "" !== e && (r && (r += " "), r += e);
    }

    return r;
  }(t) : i(t) ? function (t) {
    var e = "";

    for (var n in t) {
      t[n] && (e && (e += " "), e += n);
    }

    return e;
  }(t) : "string" == typeof t ? t : "";
}

var Bn = {
  svg: "http://www.w3.org/2000/svg",
  math: "http://www.w3.org/1998/Math/MathML"
},
    Vn = p("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),
    zn = p("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", !0),
    Wn = function Wn(t) {
  return Vn(t) || zn(t);
};

var qn = Object.create(null);
var Kn = p("text,number,password,search,email,tel,url");
var Xn = Object.freeze({
  createElement: function createElement(t, e) {
    var n = document.createElement(t);
    return "select" !== t ? n : (e.data && e.data.attrs && void 0 !== e.data.attrs.multiple && n.setAttribute("multiple", "multiple"), n);
  },
  createElementNS: function createElementNS(t, e) {
    return document.createElementNS(Bn[t], e);
  },
  createTextNode: function createTextNode(t) {
    return document.createTextNode(t);
  },
  createComment: function createComment(t) {
    return document.createComment(t);
  },
  insertBefore: function insertBefore(t, e, n) {
    t.insertBefore(e, n);
  },
  removeChild: function removeChild(t, e) {
    t.removeChild(e);
  },
  appendChild: function appendChild(t, e) {
    t.appendChild(e);
  },
  parentNode: function parentNode(t) {
    return t.parentNode;
  },
  nextSibling: function nextSibling(t) {
    return t.nextSibling;
  },
  tagName: function tagName(t) {
    return t.tagName;
  },
  setTextContent: function setTextContent(t, e) {
    t.textContent = e;
  },
  setStyleScope: function setStyleScope(t, e) {
    t.setAttribute(e, "");
  }
}),
    Gn = {
  create: function create(t, e) {
    Zn(e);
  },
  update: function update(t, e) {
    t.data.ref !== e.data.ref && (Zn(t, !0), Zn(e));
  },
  destroy: function destroy(t) {
    Zn(t, !0);
  }
};

function Zn(t, e) {
  var r = t.data.ref;

  if (n(r)) {
    var o = t.context,
        i = t.componentInstance || t.elm,
        a = o.$refs;
    e ? Array.isArray(a[r]) ? v(a[r], i) : a[r] === i && (a[r] = void 0) : t.data.refInFor ? Array.isArray(a[r]) ? a[r].indexOf(i) < 0 && a[r].push(i) : a[r] = [i] : a[r] = i;
  }
}

var Jn = new lt("", {}, []),
    Qn = ["create", "activate", "update", "remove", "destroy"];

function Yn(t, o) {
  return t.key === o.key && (t.tag === o.tag && t.isComment === o.isComment && n(t.data) === n(o.data) && function (t, e) {
    if ("input" !== t.tag) return !0;
    var r,
        o = n(r = t.data) && n(r = r.attrs) && r.type,
        i = n(r = e.data) && n(r = r.attrs) && r.type;
    return o === i || Kn(o) && Kn(i);
  }(t, o) || r(t.isAsyncPlaceholder) && t.asyncFactory === o.asyncFactory && e(o.asyncFactory.error));
}

function tr(t, e, r) {
  var o,
      i,
      a = {};

  for (o = e; o <= r; ++o) {
    n(i = t[o].key) && (a[i] = o);
  }

  return a;
}

var er = {
  create: nr,
  update: nr,
  destroy: function destroy(t) {
    nr(t, Jn);
  }
};

function nr(t, e) {
  (t.data.directives || e.data.directives) && function (t, e) {
    var n,
        r,
        o,
        i = t === Jn,
        a = e === Jn,
        s = or(t.data.directives, t.context),
        c = or(e.data.directives, e.context),
        u = [],
        l = [];

    for (n in c) {
      r = s[n], o = c[n], r ? (o.oldValue = r.value, o.oldArg = r.arg, ar(o, "update", e, t), o.def && o.def.componentUpdated && l.push(o)) : (ar(o, "bind", e, t), o.def && o.def.inserted && u.push(o));
    }

    if (u.length) {
      var f = function f() {
        for (var n = 0; n < u.length; n++) {
          ar(u[n], "inserted", e, t);
        }
      };

      i ? ne(e, "insert", f) : f();
    }

    l.length && ne(e, "postpatch", function () {
      for (var n = 0; n < l.length; n++) {
        ar(l[n], "componentUpdated", e, t);
      }
    });
    if (!i) for (n in s) {
      c[n] || ar(s[n], "unbind", t, t, a);
    }
  }(t, e);
}

var rr = Object.create(null);

function or(t, e) {
  var n,
      r,
      o = Object.create(null);
  if (!t) return o;

  for (n = 0; n < t.length; n++) {
    (r = t[n]).modifiers || (r.modifiers = rr), o[ir(r)] = r, r.def = It(e.$options, "directives", r.name);
  }

  return o;
}

function ir(t) {
  return t.rawName || t.name + "." + Object.keys(t.modifiers || {}).join(".");
}

function ar(t, e, n, r, o) {
  var i = t.def && t.def[e];
  if (i) try {
    i(n.elm, t, n, r, o);
  } catch (r) {
    Mt(r, n.context, "directive " + t.name + " " + e + " hook");
  }
}

var sr = [Gn, er];

function cr(t, r) {
  var o = r.componentOptions;

  if (!(n(o) && !1 === o.Ctor.options.inheritAttrs || e(t.data.attrs) && e(r.data.attrs))) {
    var i,
        a,
        s = r.elm,
        c = t.data.attrs || {},
        u = r.data.attrs || {};

    for (i in n(u.__ob__) && (u = r.data.attrs = x({}, u)), u) {
      a = u[i], c[i] !== a && ur(s, i, a);
    }

    for (i in (W || K) && u.value !== c.value && ur(s, "value", u.value), c) {
      e(u[i]) && (Pn(i) ? s.removeAttributeNS(Nn, Ln(i)) : jn(i) || s.removeAttribute(i));
    }
  }
}

function ur(t, e, n) {
  t.tagName.indexOf("-") > -1 ? lr(t, e, n) : Dn(e) ? Mn(n) ? t.removeAttribute(e) : (n = "allowfullscreen" === e && "EMBED" === t.tagName ? "true" : e, t.setAttribute(e, n)) : jn(e) ? t.setAttribute(e, In(e, n)) : Pn(e) ? Mn(n) ? t.removeAttributeNS(Nn, Ln(e)) : t.setAttributeNS(Nn, e, n) : lr(t, e, n);
}

function lr(t, e, n) {
  if (Mn(n)) t.removeAttribute(e);else {
    if (W && !q && "TEXTAREA" === t.tagName && "placeholder" === e && "" !== n && !t.__ieph) {
      var r = function r(e) {
        e.stopImmediatePropagation(), t.removeEventListener("input", r);
      };

      t.addEventListener("input", r), t.__ieph = !0;
    }

    t.setAttribute(e, n);
  }
}

var fr = {
  create: cr,
  update: cr
};

function pr(t, r) {
  var o = r.elm,
      i = r.data,
      a = t.data;

  if (!(e(i.staticClass) && e(i["class"]) && (e(a) || e(a.staticClass) && e(a["class"])))) {
    var s = Fn(r),
        c = o._transitionClasses;
    n(c) && (s = Un(s, Hn(c))), s !== o._prevClass && (o.setAttribute("class", s), o._prevClass = s);
  }
}

var dr,
    vr = {
  create: pr,
  update: pr
},
    hr = "__r",
    mr = "__c";

function yr(t, e, n) {
  var r = dr;
  return function o() {
    null !== e.apply(null, arguments) && br(t, o, n, r);
  };
}

var gr = Bt && !(G && Number(G[1]) <= 53);

function _r(t, e, n, r) {
  if (gr) {
    var o = rn,
        i = e;

    e = i._wrapper = function (t) {
      if (t.target === t.currentTarget || t.timeStamp >= o || t.timeStamp <= 0 || t.target.ownerDocument !== document) return i.apply(this, arguments);
    };
  }

  dr.addEventListener(t, e, J ? {
    capture: n,
    passive: r
  } : n);
}

function br(t, e, n, r) {
  (r || dr).removeEventListener(t, e._wrapper || e, n);
}

function Cr(t, r) {
  if (!e(t.data.on) || !e(r.data.on)) {
    var o = r.data.on || {},
        i = t.data.on || {};
    dr = r.elm, function (t) {
      if (n(t[hr])) {
        var e = W ? "change" : "input";
        t[e] = [].concat(t[hr], t[e] || []), delete t[hr];
      }

      n(t[mr]) && (t.change = [].concat(t[mr], t.change || []), delete t[mr]);
    }(o), ee(o, i, _r, br, yr, r.context), dr = void 0;
  }
}

var $r,
    wr = {
  create: Cr,
  update: Cr
};

function Ar(t, r) {
  if (!e(t.data.domProps) || !e(r.data.domProps)) {
    var o,
        i,
        a = r.elm,
        s = t.data.domProps || {},
        c = r.data.domProps || {};

    for (o in n(c.__ob__) && (c = r.data.domProps = x({}, c)), s) {
      o in c || (a[o] = "");
    }

    for (o in c) {
      if (i = c[o], "textContent" === o || "innerHTML" === o) {
        if (r.children && (r.children.length = 0), i === s[o]) continue;
        1 === a.childNodes.length && a.removeChild(a.childNodes[0]);
      }

      if ("value" === o && "PROGRESS" !== a.tagName) {
        a._value = i;
        var u = e(i) ? "" : String(i);
        xr(a, u) && (a.value = u);
      } else if ("innerHTML" === o && zn(a.tagName) && e(a.innerHTML)) {
        ($r = $r || document.createElement("div")).innerHTML = "<svg>" + i + "</svg>";

        for (var l = $r.firstChild; a.firstChild;) {
          a.removeChild(a.firstChild);
        }

        for (; l.firstChild;) {
          a.appendChild(l.firstChild);
        }
      } else if (i !== s[o]) try {
        a[o] = i;
      } catch (t) {}
    }
  }
}

function xr(t, e) {
  return !t.composing && ("OPTION" === t.tagName || function (t, e) {
    var n = !0;

    try {
      n = document.activeElement !== t;
    } catch (t) {}

    return n && t.value !== e;
  }(t, e) || function (t, e) {
    var r = t.value,
        o = t._vModifiers;

    if (n(o)) {
      if (o.number) return f(r) !== f(e);
      if (o.trim) return r.trim() !== e.trim();
    }

    return r !== e;
  }(t, e));
}

var Or = {
  create: Ar,
  update: Ar
},
    kr = y(function (t) {
  var e = {},
      n = /:(.+)/;
  return t.split(/;(?![^(]*\))/g).forEach(function (t) {
    if (t) {
      var r = t.split(n);
      r.length > 1 && (e[r[0].trim()] = r[1].trim());
    }
  }), e;
});

function Sr(t) {
  var e = Er(t.style);
  return t.staticStyle ? x(t.staticStyle, e) : e;
}

function Er(t) {
  return Array.isArray(t) ? O(t) : "string" == typeof t ? kr(t) : t;
}

var jr,
    Tr = /^--/,
    Ir = /\s*!important$/,
    Dr = function Dr(t, e, n) {
  if (Tr.test(e)) t.style.setProperty(e, n);else if (Ir.test(n)) t.style.setProperty($(e), n.replace(Ir, ""), "important");else {
    var r = Pr(e);
    if (Array.isArray(n)) for (var o = 0, i = n.length; o < i; o++) {
      t.style[r] = n[o];
    } else t.style[r] = n;
  }
},
    Nr = ["Webkit", "Moz", "ms"],
    Pr = y(function (t) {
  if (jr = jr || document.createElement("div").style, "filter" !== (t = _(t)) && t in jr) return t;

  for (var e = t.charAt(0).toUpperCase() + t.slice(1), n = 0; n < Nr.length; n++) {
    var r = Nr[n] + e;
    if (r in jr) return r;
  }
});

function Lr(t, r) {
  var o = r.data,
      i = t.data;

  if (!(e(o.staticStyle) && e(o.style) && e(i.staticStyle) && e(i.style))) {
    var a,
        s,
        c = r.elm,
        u = i.staticStyle,
        l = i.normalizedStyle || i.style || {},
        f = u || l,
        p = Er(r.data.style) || {};
    r.data.normalizedStyle = n(p.__ob__) ? x({}, p) : p;

    var d = function (t, e) {
      var n,
          r = {};
      if (e) for (var o = t; o.componentInstance;) {
        (o = o.componentInstance._vnode) && o.data && (n = Sr(o.data)) && x(r, n);
      }
      (n = Sr(t.data)) && x(r, n);

      for (var i = t; i = i.parent;) {
        i.data && (n = Sr(i.data)) && x(r, n);
      }

      return r;
    }(r, !0);

    for (s in f) {
      e(d[s]) && Dr(c, s, "");
    }

    for (s in d) {
      (a = d[s]) !== f[s] && Dr(c, s, null == a ? "" : a);
    }
  }
}

var Mr = {
  create: Lr,
  update: Lr
},
    Fr = /\s+/;

function Rr(t, e) {
  if (e && (e = e.trim())) if (t.classList) e.indexOf(" ") > -1 ? e.split(Fr).forEach(function (e) {
    return t.classList.add(e);
  }) : t.classList.add(e);else {
    var n = " " + (t.getAttribute("class") || "") + " ";
    n.indexOf(" " + e + " ") < 0 && t.setAttribute("class", (n + e).trim());
  }
}

function Ur(t, e) {
  if (e && (e = e.trim())) if (t.classList) e.indexOf(" ") > -1 ? e.split(Fr).forEach(function (e) {
    return t.classList.remove(e);
  }) : t.classList.remove(e), t.classList.length || t.removeAttribute("class");else {
    for (var n = " " + (t.getAttribute("class") || "") + " ", r = " " + e + " "; n.indexOf(r) >= 0;) {
      n = n.replace(r, " ");
    }

    (n = n.trim()) ? t.setAttribute("class", n) : t.removeAttribute("class");
  }
}

function Hr(t) {
  if (t) {
    if ("object" == _typeof(t)) {
      var e = {};
      return !1 !== t.css && x(e, Br(t.name || "v")), x(e, t), e;
    }

    return "string" == typeof t ? Br(t) : void 0;
  }
}

var Br = y(function (t) {
  return {
    enterClass: t + "-enter",
    enterToClass: t + "-enter-to",
    enterActiveClass: t + "-enter-active",
    leaveClass: t + "-leave",
    leaveToClass: t + "-leave-to",
    leaveActiveClass: t + "-leave-active"
  };
}),
    Vr = H && !q,
    zr = "transition",
    Wr = "animation",
    qr = "transition",
    Kr = "transitionend",
    Xr = "animation",
    Gr = "animationend";
Vr && (void 0 === window.ontransitionend && void 0 !== window.onwebkittransitionend && (qr = "WebkitTransition", Kr = "webkitTransitionEnd"), void 0 === window.onanimationend && void 0 !== window.onwebkitanimationend && (Xr = "WebkitAnimation", Gr = "webkitAnimationEnd"));
var Zr = H ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : function (t) {
  return t();
};

function Jr(t) {
  Zr(function () {
    Zr(t);
  });
}

function Qr(t, e) {
  var n = t._transitionClasses || (t._transitionClasses = []);
  n.indexOf(e) < 0 && (n.push(e), Rr(t, e));
}

function Yr(t, e) {
  t._transitionClasses && v(t._transitionClasses, e), Ur(t, e);
}

function to(t, e, n) {
  var r = no(t, e),
      o = r.type,
      i = r.timeout,
      a = r.propCount;
  if (!o) return n();

  var s = o === zr ? Kr : Gr,
      c = 0,
      u = function u() {
    t.removeEventListener(s, l), n();
  },
      l = function l(e) {
    e.target === t && ++c >= a && u();
  };

  setTimeout(function () {
    c < a && u();
  }, i + 1), t.addEventListener(s, l);
}

var eo = /\b(transform|all)(,|$)/;

function no(t, e) {
  var n,
      r = window.getComputedStyle(t),
      o = (r[qr + "Delay"] || "").split(", "),
      i = (r[qr + "Duration"] || "").split(", "),
      a = ro(o, i),
      s = (r[Xr + "Delay"] || "").split(", "),
      c = (r[Xr + "Duration"] || "").split(", "),
      u = ro(s, c),
      l = 0,
      f = 0;
  return e === zr ? a > 0 && (n = zr, l = a, f = i.length) : e === Wr ? u > 0 && (n = Wr, l = u, f = c.length) : f = (n = (l = Math.max(a, u)) > 0 ? a > u ? zr : Wr : null) ? n === zr ? i.length : c.length : 0, {
    type: n,
    timeout: l,
    propCount: f,
    hasTransform: n === zr && eo.test(r[qr + "Property"])
  };
}

function ro(t, e) {
  for (; t.length < e.length;) {
    t = t.concat(t);
  }

  return Math.max.apply(null, e.map(function (e, n) {
    return oo(e) + oo(t[n]);
  }));
}

function oo(t) {
  return 1e3 * Number(t.slice(0, -1).replace(",", "."));
}

function io(t, r) {
  var o = t.elm;
  n(o._leaveCb) && (o._leaveCb.cancelled = !0, o._leaveCb());
  var a = Hr(t.data.transition);

  if (!e(a) && !n(o._enterCb) && 1 === o.nodeType) {
    for (var s = a.css, c = a.type, u = a.enterClass, l = a.enterToClass, p = a.enterActiveClass, d = a.appearClass, v = a.appearToClass, h = a.appearActiveClass, m = a.beforeEnter, y = a.enter, g = a.afterEnter, _ = a.enterCancelled, b = a.beforeAppear, C = a.appear, $ = a.afterAppear, w = a.appearCancelled, A = a.duration, x = qe, O = qe.$vnode; O && O.parent;) {
      x = O.context, O = O.parent;
    }

    var k = !x._isMounted || !t.isRootInsert;

    if (!k || C || "" === C) {
      var S = k && d ? d : u,
          E = k && h ? h : p,
          j = k && v ? v : l,
          T = k && b || m,
          D = k && "function" == typeof C ? C : y,
          N = k && $ || g,
          P = k && w || _,
          L = f(i(A) ? A.enter : A),
          M = !1 !== s && !q,
          F = co(D),
          R = o._enterCb = I(function () {
        M && (Yr(o, j), Yr(o, E)), R.cancelled ? (M && Yr(o, S), P && P(o)) : N && N(o), o._enterCb = null;
      });
      t.data.show || ne(t, "insert", function () {
        var e = o.parentNode,
            n = e && e._pending && e._pending[t.key];
        n && n.tag === t.tag && n.elm._leaveCb && n.elm._leaveCb(), D && D(o, R);
      }), T && T(o), M && (Qr(o, S), Qr(o, E), Jr(function () {
        Yr(o, S), R.cancelled || (Qr(o, j), F || (so(L) ? setTimeout(R, L) : to(o, c, R)));
      })), t.data.show && (r && r(), D && D(o, R)), M || F || R();
    }
  }
}

function ao(t, r) {
  var o = t.elm;
  n(o._enterCb) && (o._enterCb.cancelled = !0, o._enterCb());
  var a = Hr(t.data.transition);
  if (e(a) || 1 !== o.nodeType) return r();

  if (!n(o._leaveCb)) {
    var s = a.css,
        c = a.type,
        u = a.leaveClass,
        l = a.leaveToClass,
        p = a.leaveActiveClass,
        d = a.beforeLeave,
        v = a.leave,
        h = a.afterLeave,
        m = a.leaveCancelled,
        y = a.delayLeave,
        g = a.duration,
        _ = !1 !== s && !q,
        b = co(v),
        C = f(i(g) ? g.leave : g),
        $ = o._leaveCb = I(function () {
      o.parentNode && o.parentNode._pending && (o.parentNode._pending[t.key] = null), _ && (Yr(o, l), Yr(o, p)), $.cancelled ? (_ && Yr(o, u), m && m(o)) : (r(), h && h(o)), o._leaveCb = null;
    });

    y ? y(w) : w();
  }

  function w() {
    $.cancelled || (!t.data.show && o.parentNode && ((o.parentNode._pending || (o.parentNode._pending = {}))[t.key] = t), d && d(o), _ && (Qr(o, u), Qr(o, p), Jr(function () {
      Yr(o, u), $.cancelled || (Qr(o, l), b || (so(C) ? setTimeout($, C) : to(o, c, $)));
    })), v && v(o, $), _ || b || $());
  }
}

function so(t) {
  return "number" == typeof t && !isNaN(t);
}

function co(t) {
  if (e(t)) return !1;
  var r = t.fns;
  return n(r) ? co(Array.isArray(r) ? r[0] : r) : (t._length || t.length) > 1;
}

function uo(t, e) {
  !0 !== e.data.show && io(e);
}

var lo = function (t) {
  var i,
      a,
      s = {},
      c = t.modules,
      u = t.nodeOps;

  for (i = 0; i < Qn.length; ++i) {
    for (s[Qn[i]] = [], a = 0; a < c.length; ++a) {
      n(c[a][Qn[i]]) && s[Qn[i]].push(c[a][Qn[i]]);
    }
  }

  function l(t) {
    var e = u.parentNode(t);
    n(e) && u.removeChild(e, t);
  }

  function f(t, e, o, i, a, c, l) {
    if (n(t.elm) && n(c) && (t = c[l] = vt(t)), t.isRootInsert = !a, !function (t, e, o, i) {
      var a = t.data;

      if (n(a)) {
        var c = n(t.componentInstance) && a.keepAlive;
        if (n(a = a.hook) && n(a = a.init) && a(t, !1), n(t.componentInstance)) return d(t, e), v(o, t.elm, i), r(c) && function (t, e, r, o) {
          for (var i, a = t; a.componentInstance;) {
            if (a = a.componentInstance._vnode, n(i = a.data) && n(i = i.transition)) {
              for (i = 0; i < s.activate.length; ++i) {
                s.activate[i](Jn, a);
              }

              e.push(a);
              break;
            }
          }

          v(r, t.elm, o);
        }(t, e, o, i), !0;
      }
    }(t, e, o, i)) {
      var f = t.data,
          p = t.children,
          m = t.tag;
      n(m) ? (t.elm = t.ns ? u.createElementNS(t.ns, m) : u.createElement(m, t), g(t), h(t, p, e), n(f) && y(t, e), v(o, t.elm, i)) : r(t.isComment) ? (t.elm = u.createComment(t.text), v(o, t.elm, i)) : (t.elm = u.createTextNode(t.text), v(o, t.elm, i));
    }
  }

  function d(t, e) {
    n(t.data.pendingInsert) && (e.push.apply(e, t.data.pendingInsert), t.data.pendingInsert = null), t.elm = t.componentInstance.$el, m(t) ? (y(t, e), g(t)) : (Zn(t), e.push(t));
  }

  function v(t, e, r) {
    n(t) && (n(r) ? u.parentNode(r) === t && u.insertBefore(t, e, r) : u.appendChild(t, e));
  }

  function h(t, e, n) {
    if (Array.isArray(e)) for (var r = 0; r < e.length; ++r) {
      f(e[r], n, t.elm, null, !0, e, r);
    } else o(t.text) && u.appendChild(t.elm, u.createTextNode(String(t.text)));
  }

  function m(t) {
    for (; t.componentInstance;) {
      t = t.componentInstance._vnode;
    }

    return n(t.tag);
  }

  function y(t, e) {
    for (var r = 0; r < s.create.length; ++r) {
      s.create[r](Jn, t);
    }

    n(i = t.data.hook) && (n(i.create) && i.create(Jn, t), n(i.insert) && e.push(t));
  }

  function g(t) {
    var e;
    if (n(e = t.fnScopeId)) u.setStyleScope(t.elm, e);else for (var r = t; r;) {
      n(e = r.context) && n(e = e.$options._scopeId) && u.setStyleScope(t.elm, e), r = r.parent;
    }
    n(e = qe) && e !== t.context && e !== t.fnContext && n(e = e.$options._scopeId) && u.setStyleScope(t.elm, e);
  }

  function _(t, e, n, r, o, i) {
    for (; r <= o; ++r) {
      f(n[r], i, t, e, !1, n, r);
    }
  }

  function b(t) {
    var e,
        r,
        o = t.data;
    if (n(o)) for (n(e = o.hook) && n(e = e.destroy) && e(t), e = 0; e < s.destroy.length; ++e) {
      s.destroy[e](t);
    }
    if (n(e = t.children)) for (r = 0; r < t.children.length; ++r) {
      b(t.children[r]);
    }
  }

  function C(t, e, r) {
    for (; e <= r; ++e) {
      var o = t[e];
      n(o) && (n(o.tag) ? ($(o), b(o)) : l(o.elm));
    }
  }

  function $(t, e) {
    if (n(e) || n(t.data)) {
      var r,
          o = s.remove.length + 1;

      for (n(e) ? e.listeners += o : e = function (t, e) {
        function n() {
          0 == --n.listeners && l(t);
        }

        return n.listeners = e, n;
      }(t.elm, o), n(r = t.componentInstance) && n(r = r._vnode) && n(r.data) && $(r, e), r = 0; r < s.remove.length; ++r) {
        s.remove[r](t, e);
      }

      n(r = t.data.hook) && n(r = r.remove) ? r(t, e) : e();
    } else l(t.elm);
  }

  function w(t, e, r, o) {
    for (var i = r; i < o; i++) {
      var a = e[i];
      if (n(a) && Yn(t, a)) return i;
    }
  }

  function A(t, o, i, a, c, l) {
    if (t !== o) {
      n(o.elm) && n(a) && (o = a[c] = vt(o));
      var p = o.elm = t.elm;
      if (r(t.isAsyncPlaceholder)) n(o.asyncFactory.resolved) ? k(t.elm, o, i) : o.isAsyncPlaceholder = !0;else if (r(o.isStatic) && r(t.isStatic) && o.key === t.key && (r(o.isCloned) || r(o.isOnce))) o.componentInstance = t.componentInstance;else {
        var d,
            v = o.data;
        n(v) && n(d = v.hook) && n(d = d.prepatch) && d(t, o);
        var h = t.children,
            y = o.children;

        if (n(v) && m(o)) {
          for (d = 0; d < s.update.length; ++d) {
            s.update[d](t, o);
          }

          n(d = v.hook) && n(d = d.update) && d(t, o);
        }

        e(o.text) ? n(h) && n(y) ? h !== y && function (t, r, o, i, a) {
          for (var s, c, l, p = 0, d = 0, v = r.length - 1, h = r[0], m = r[v], y = o.length - 1, g = o[0], b = o[y], $ = !a; p <= v && d <= y;) {
            e(h) ? h = r[++p] : e(m) ? m = r[--v] : Yn(h, g) ? (A(h, g, i, o, d), h = r[++p], g = o[++d]) : Yn(m, b) ? (A(m, b, i, o, y), m = r[--v], b = o[--y]) : Yn(h, b) ? (A(h, b, i, o, y), $ && u.insertBefore(t, h.elm, u.nextSibling(m.elm)), h = r[++p], b = o[--y]) : Yn(m, g) ? (A(m, g, i, o, d), $ && u.insertBefore(t, m.elm, h.elm), m = r[--v], g = o[++d]) : (e(s) && (s = tr(r, p, v)), e(c = n(g.key) ? s[g.key] : w(g, r, p, v)) ? f(g, i, t, h.elm, !1, o, d) : Yn(l = r[c], g) ? (A(l, g, i, o, d), r[c] = void 0, $ && u.insertBefore(t, l.elm, h.elm)) : f(g, i, t, h.elm, !1, o, d), g = o[++d]);
          }

          p > v ? _(t, e(o[y + 1]) ? null : o[y + 1].elm, o, d, y, i) : d > y && C(r, p, v);
        }(p, h, y, i, l) : n(y) ? (n(t.text) && u.setTextContent(p, ""), _(p, null, y, 0, y.length - 1, i)) : n(h) ? C(h, 0, h.length - 1) : n(t.text) && u.setTextContent(p, "") : t.text !== o.text && u.setTextContent(p, o.text), n(v) && n(d = v.hook) && n(d = d.postpatch) && d(t, o);
      }
    }
  }

  function x(t, e, o) {
    if (r(o) && n(t.parent)) t.parent.data.pendingInsert = e;else for (var i = 0; i < e.length; ++i) {
      e[i].data.hook.insert(e[i]);
    }
  }

  var O = p("attrs,class,staticClass,staticStyle,key");

  function k(t, e, o, i) {
    var a,
        s = e.tag,
        c = e.data,
        u = e.children;
    if (i = i || c && c.pre, e.elm = t, r(e.isComment) && n(e.asyncFactory)) return e.isAsyncPlaceholder = !0, !0;
    if (n(c) && (n(a = c.hook) && n(a = a.init) && a(e, !0), n(a = e.componentInstance))) return d(e, o), !0;

    if (n(s)) {
      if (n(u)) if (t.hasChildNodes()) {
        if (n(a = c) && n(a = a.domProps) && n(a = a.innerHTML)) {
          if (a !== t.innerHTML) return !1;
        } else {
          for (var l = !0, f = t.firstChild, p = 0; p < u.length; p++) {
            if (!f || !k(f, u[p], o, i)) {
              l = !1;
              break;
            }

            f = f.nextSibling;
          }

          if (!l || f) return !1;
        }
      } else h(e, u, o);

      if (n(c)) {
        var v = !1;

        for (var m in c) {
          if (!O(m)) {
            v = !0, y(e, o);
            break;
          }
        }

        !v && c["class"] && Qt(c["class"]);
      }
    } else t.data !== e.text && (t.data = e.text);

    return !0;
  }

  return function (t, o, i, a) {
    if (!e(o)) {
      var c,
          l = !1,
          p = [];
      if (e(t)) l = !0, f(o, p);else {
        var d = n(t.nodeType);
        if (!d && Yn(t, o)) A(t, o, p, null, null, a);else {
          if (d) {
            if (1 === t.nodeType && t.hasAttribute(D) && (t.removeAttribute(D), i = !0), r(i) && k(t, o, p)) return x(o, p, !0), t;
            c = t, t = new lt(u.tagName(c).toLowerCase(), {}, [], void 0, c);
          }

          var v = t.elm,
              h = u.parentNode(v);
          if (f(o, p, v._leaveCb ? null : h, u.nextSibling(v)), n(o.parent)) for (var y = o.parent, g = m(o); y;) {
            for (var _ = 0; _ < s.destroy.length; ++_) {
              s.destroy[_](y);
            }

            if (y.elm = o.elm, g) {
              for (var $ = 0; $ < s.create.length; ++$) {
                s.create[$](Jn, y);
              }

              var w = y.data.hook.insert;
              if (w.merged) for (var O = 1; O < w.fns.length; O++) {
                w.fns[O]();
              }
            } else Zn(y);

            y = y.parent;
          }
          n(h) ? C([t], 0, 0) : n(t.tag) && b(t);
        }
      }
      return x(o, p, l), o.elm;
    }

    n(t) && b(t);
  };
}({
  nodeOps: Xn,
  modules: [fr, vr, wr, Or, Mr, H ? {
    create: uo,
    activate: uo,
    remove: function remove(t, e) {
      !0 !== t.data.show ? ao(t, e) : e();
    }
  } : {}].concat(sr)
});

q && document.addEventListener("selectionchange", function () {
  var t = document.activeElement;
  t && t.vmodel && _o(t, "input");
});
var fo = {
  inserted: function inserted(t, e, n, r) {
    "select" === n.tag ? (r.elm && !r.elm._vOptions ? ne(n, "postpatch", function () {
      fo.componentUpdated(t, e, n);
    }) : po(t, e, n.context), t._vOptions = [].map.call(t.options, mo)) : ("textarea" === n.tag || Kn(t.type)) && (t._vModifiers = e.modifiers, e.modifiers.lazy || (t.addEventListener("compositionstart", yo), t.addEventListener("compositionend", go), t.addEventListener("change", go), q && (t.vmodel = !0)));
  },
  componentUpdated: function componentUpdated(t, e, n) {
    if ("select" === n.tag) {
      po(t, e, n.context);
      var r = t._vOptions,
          o = t._vOptions = [].map.call(t.options, mo);
      if (o.some(function (t, e) {
        return !j(t, r[e]);
      })) (t.multiple ? e.value.some(function (t) {
        return ho(t, o);
      }) : e.value !== e.oldValue && ho(e.value, o)) && _o(t, "change");
    }
  }
};

function po(t, e, n) {
  vo(t, e, n), (W || K) && setTimeout(function () {
    vo(t, e, n);
  }, 0);
}

function vo(t, e, n) {
  var r = e.value,
      o = t.multiple;

  if (!o || Array.isArray(r)) {
    for (var i, a, s = 0, c = t.options.length; s < c; s++) {
      if (a = t.options[s], o) i = T(r, mo(a)) > -1, a.selected !== i && (a.selected = i);else if (j(mo(a), r)) return void (t.selectedIndex !== s && (t.selectedIndex = s));
    }

    o || (t.selectedIndex = -1);
  }
}

function ho(t, e) {
  return e.every(function (e) {
    return !j(e, t);
  });
}

function mo(t) {
  return "_value" in t ? t._value : t.value;
}

function yo(t) {
  t.target.composing = !0;
}

function go(t) {
  t.target.composing && (t.target.composing = !1, _o(t.target, "input"));
}

function _o(t, e) {
  var n = document.createEvent("HTMLEvents");
  n.initEvent(e, !0, !0), t.dispatchEvent(n);
}

function bo(t) {
  return !t.componentInstance || t.data && t.data.transition ? t : bo(t.componentInstance._vnode);
}

var Co = {
  model: fo,
  show: {
    bind: function bind(t, e, n) {
      var r = e.value,
          o = (n = bo(n)).data && n.data.transition,
          i = t.__vOriginalDisplay = "none" === t.style.display ? "" : t.style.display;
      r && o ? (n.data.show = !0, io(n, function () {
        t.style.display = i;
      })) : t.style.display = r ? i : "none";
    },
    update: function update(t, e, n) {
      var r = e.value;
      !r != !e.oldValue && ((n = bo(n)).data && n.data.transition ? (n.data.show = !0, r ? io(n, function () {
        t.style.display = t.__vOriginalDisplay;
      }) : ao(n, function () {
        t.style.display = "none";
      })) : t.style.display = r ? t.__vOriginalDisplay : "none");
    },
    unbind: function unbind(t, e, n, r, o) {
      o || (t.style.display = t.__vOriginalDisplay);
    }
  }
},
    $o = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

function wo(t) {
  var e = t && t.componentOptions;
  return e && e.Ctor.options["abstract"] ? wo(He(e.children)) : t;
}

function Ao(t) {
  var e = {},
      n = t.$options;

  for (var r in n.propsData) {
    e[r] = t[r];
  }

  var o = n._parentListeners;

  for (var i in o) {
    e[_(i)] = o[i];
  }

  return e;
}

function xo(t, e) {
  if (/\d-keep-alive$/.test(e.tag)) return t("keep-alive", {
    props: e.componentOptions.propsData
  });
}

var Oo = function Oo(t) {
  return t.tag || Ue(t);
},
    ko = function ko(t) {
  return "show" === t.name;
},
    So = {
  name: "transition",
  props: $o,
  "abstract": !0,
  render: function render(t) {
    var e = this,
        n = this.$slots["default"];

    if (n && (n = n.filter(Oo)).length) {
      var r = this.mode,
          i = n[0];
      if (function (t) {
        for (; t = t.parent;) {
          if (t.data.transition) return !0;
        }
      }(this.$vnode)) return i;
      var a = wo(i);
      if (!a) return i;
      if (this._leaving) return xo(t, i);
      var s = "__transition-" + this._uid + "-";
      a.key = null == a.key ? a.isComment ? s + "comment" : s + a.tag : o(a.key) ? 0 === String(a.key).indexOf(s) ? a.key : s + a.key : a.key;
      var c = (a.data || (a.data = {})).transition = Ao(this),
          u = this._vnode,
          l = wo(u);

      if (a.data.directives && a.data.directives.some(ko) && (a.data.show = !0), l && l.data && !function (t, e) {
        return e.key === t.key && e.tag === t.tag;
      }(a, l) && !Ue(l) && (!l.componentInstance || !l.componentInstance._vnode.isComment)) {
        var f = l.data.transition = x({}, c);
        if ("out-in" === r) return this._leaving = !0, ne(f, "afterLeave", function () {
          e._leaving = !1, e.$forceUpdate();
        }), xo(t, i);

        if ("in-out" === r) {
          if (Ue(a)) return u;

          var p,
              d = function d() {
            p();
          };

          ne(c, "afterEnter", d), ne(c, "enterCancelled", d), ne(f, "delayLeave", function (t) {
            p = t;
          });
        }
      }

      return i;
    }
  }
},
    Eo = x({
  tag: String,
  moveClass: String
}, $o);

function jo(t) {
  t.elm._moveCb && t.elm._moveCb(), t.elm._enterCb && t.elm._enterCb();
}

function To(t) {
  t.data.newPos = t.elm.getBoundingClientRect();
}

function Io(t) {
  var e = t.data.pos,
      n = t.data.newPos,
      r = e.left - n.left,
      o = e.top - n.top;

  if (r || o) {
    t.data.moved = !0;
    var i = t.elm.style;
    i.transform = i.WebkitTransform = "translate(" + r + "px," + o + "px)", i.transitionDuration = "0s";
  }
}

delete Eo.mode;
var Do = {
  Transition: So,
  TransitionGroup: {
    props: Eo,
    beforeMount: function beforeMount() {
      var t = this,
          e = this._update;

      this._update = function (n, r) {
        var o = Ke(t);
        t.__patch__(t._vnode, t.kept, !1, !0), t._vnode = t.kept, o(), e.call(t, n, r);
      };
    },
    render: function render(t) {
      for (var e = this.tag || this.$vnode.data.tag || "span", n = Object.create(null), r = this.prevChildren = this.children, o = this.$slots["default"] || [], i = this.children = [], a = Ao(this), s = 0; s < o.length; s++) {
        var c = o[s];
        c.tag && null != c.key && 0 !== String(c.key).indexOf("__vlist") && (i.push(c), n[c.key] = c, (c.data || (c.data = {})).transition = a);
      }

      if (r) {
        for (var u = [], l = [], f = 0; f < r.length; f++) {
          var p = r[f];
          p.data.transition = a, p.data.pos = p.elm.getBoundingClientRect(), n[p.key] ? u.push(p) : l.push(p);
        }

        this.kept = t(e, null, u), this.removed = l;
      }

      return t(e, null, i);
    },
    updated: function updated() {
      var t = this.prevChildren,
          e = this.moveClass || (this.name || "v") + "-move";
      t.length && this.hasMove(t[0].elm, e) && (t.forEach(jo), t.forEach(To), t.forEach(Io), this._reflow = document.body.offsetHeight, t.forEach(function (t) {
        if (t.data.moved) {
          var n = t.elm,
              r = n.style;
          Qr(n, e), r.transform = r.WebkitTransform = r.transitionDuration = "", n.addEventListener(Kr, n._moveCb = function t(r) {
            r && r.target !== n || r && !/transform$/.test(r.propertyName) || (n.removeEventListener(Kr, t), n._moveCb = null, Yr(n, e));
          });
        }
      }));
    },
    methods: {
      hasMove: function hasMove(t, e) {
        if (!Vr) return !1;
        if (this._hasMove) return this._hasMove;
        var n = t.cloneNode();
        t._transitionClasses && t._transitionClasses.forEach(function (t) {
          Ur(n, t);
        }), Rr(n, e), n.style.display = "none", this.$el.appendChild(n);
        var r = no(n);
        return this.$el.removeChild(n), this._hasMove = r.hasTransform;
      }
    }
  }
};
bn.config.mustUseProp = function (t, e, n) {
  return "value" === n && En(t) && "button" !== e || "selected" === n && "option" === t || "checked" === n && "input" === t || "muted" === n && "video" === t;
}, bn.config.isReservedTag = Wn, bn.config.isReservedAttr = Sn, bn.config.getTagNamespace = function (t) {
  return zn(t) ? "svg" : "math" === t ? "math" : void 0;
}, bn.config.isUnknownElement = function (t) {
  if (!H) return !0;
  if (Wn(t)) return !1;
  if (t = t.toLowerCase(), null != qn[t]) return qn[t];
  var e = document.createElement(t);
  return t.indexOf("-") > -1 ? qn[t] = e.constructor === window.HTMLUnknownElement || e.constructor === window.HTMLElement : qn[t] = /HTMLUnknownElement/.test(e.toString());
}, x(bn.options.directives, Co), x(bn.options.components, Do), bn.prototype.__patch__ = H ? lo : k, bn.prototype.$mount = function (t, e) {
  return function (t, e, n) {
    var r;
    return t.$el = e, t.$options.render || (t.$options.render = pt), Ze(t, "beforeMount"), r = function r() {
      t._update(t._render(), n);
    }, new un(t, r, k, {
      before: function before() {
        t._isMounted && !t._isDestroyed && Ze(t, "beforeUpdate");
      }
    }, !0), n = !1, null == t.$vnode && (t._isMounted = !0, Ze(t, "mounted")), t;
  }(this, t = t && H ? function (t) {
    if ("string" == typeof t) {
      var e = document.querySelector(t);
      return e || document.createElement("div");
    }

    return t;
  }(t) : void 0, e);
}, H && setTimeout(function () {
  L.devtools && tt && tt.emit("init", bn);
}, 0), module.exports = bn;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZ1ZS5ydW50aW1lLmNvbW1vbi5wcm9kLmpzIl0sIm5hbWVzIjpbInQiLCJPYmplY3QiLCJmcmVlemUiLCJlIiwibiIsInIiLCJvIiwiaSIsImEiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInMiLCJjYWxsIiwiYyIsInBhcnNlRmxvYXQiLCJTdHJpbmciLCJNYXRoIiwiZmxvb3IiLCJpc0Zpbml0ZSIsInUiLCJ0aGVuIiwibCIsIkFycmF5IiwiaXNBcnJheSIsIkpTT04iLCJzdHJpbmdpZnkiLCJmIiwiaXNOYU4iLCJwIiwiY3JlYXRlIiwic3BsaXQiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImQiLCJ2IiwiaW5kZXhPZiIsInNwbGljZSIsImgiLCJoYXNPd25Qcm9wZXJ0eSIsIm0iLCJ5IiwiZyIsIl8iLCJyZXBsYWNlIiwidG9VcHBlckNhc2UiLCJiIiwiY2hhckF0Iiwic2xpY2UiLCJDIiwiJCIsInciLCJGdW5jdGlvbiIsImJpbmQiLCJhcmd1bWVudHMiLCJhcHBseSIsIl9sZW5ndGgiLCJBIiwieCIsIk8iLCJrIiwiUyIsIkUiLCJqIiwiZXZlcnkiLCJEYXRlIiwiZ2V0VGltZSIsImtleXMiLCJUIiwiSSIsIkQiLCJOIiwiUCIsIkwiLCJvcHRpb25NZXJnZVN0cmF0ZWdpZXMiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJwZXJmb3JtYW5jZSIsImVycm9ySGFuZGxlciIsIndhcm5IYW5kbGVyIiwiaWdub3JlZEVsZW1lbnRzIiwia2V5Q29kZXMiLCJpc1Jlc2VydmVkVGFnIiwiaXNSZXNlcnZlZEF0dHIiLCJpc1Vua25vd25FbGVtZW50IiwiZ2V0VGFnTmFtZXNwYWNlIiwicGFyc2VQbGF0Zm9ybVRhZ05hbWUiLCJtdXN0VXNlUHJvcCIsImFzeW5jIiwiX2xpZmVjeWNsZUhvb2tzIiwiTSIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJGIiwiUmVnRXhwIiwic291cmNlIiwiUiIsIlUiLCJIIiwid2luZG93IiwiQiIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIlYiLCJ6IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiVyIsInRlc3QiLCJxIiwiSyIsIlgiLCJHIiwibWF0Y2giLCJaIiwid2F0Y2giLCJKIiwiUSIsImdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJZIiwiZ2xvYmFsIiwicHJvY2VzcyIsImVudiIsIlZVRV9FTlYiLCJ0dCIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJldCIsIm50IiwicnQiLCJTeW1ib2wiLCJSZWZsZWN0Iiwib3duS2V5cyIsIlNldCIsInNldCIsImhhcyIsImFkZCIsImNsZWFyIiwib3QiLCJpdCIsImF0IiwiaWQiLCJzdWJzIiwiYWRkU3ViIiwicHVzaCIsInJlbW92ZVN1YiIsImRlcGVuZCIsInRhcmdldCIsImFkZERlcCIsIm5vdGlmeSIsInVwZGF0ZSIsInN0IiwiY3QiLCJ1dCIsInBvcCIsImx0IiwidGFnIiwiZGF0YSIsImNoaWxkcmVuIiwidGV4dCIsImVsbSIsIm5zIiwiY29udGV4dCIsImZuQ29udGV4dCIsImZuT3B0aW9ucyIsImZuU2NvcGVJZCIsImtleSIsImNvbXBvbmVudE9wdGlvbnMiLCJjb21wb25lbnRJbnN0YW5jZSIsInBhcmVudCIsInJhdyIsImlzU3RhdGljIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY0ZhY3RvcnkiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJmdCIsImNoaWxkIiwiZGVmaW5lUHJvcGVydGllcyIsInB0IiwiZHQiLCJ2dCIsImh0IiwibXQiLCJmb3JFYWNoIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwieXQiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ3QiLCJfdCIsImJ0Iiwidm1Db3VudCIsIl9fcHJvdG9fXyIsIndhbGsiLCJDdCIsImlzRXh0ZW5zaWJsZSIsIl9pc1Z1ZSIsIiR0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwid3QiLCJtYXgiLCJBdCIsInh0IiwiT3QiLCJrdCIsIlN0IiwiY29uY2F0IiwiRXQiLCJwcm9wcyIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJqdCIsIlR0Iiwib3B0aW9ucyIsInR5cGUiLCJmcm9tIiwiZGlyZWN0aXZlcyIsIl9iYXNlIiwibWl4aW5zIiwiSXQiLCJEdCIsIkx0IiwiQm9vbGVhbiIsIiRvcHRpb25zIiwicHJvcHNEYXRhIiwiX3Byb3BzIiwiTnQiLCJQdCIsIk10IiwiJHBhcmVudCIsImVycm9yQ2FwdHVyZWQiLCJSdCIsIkZ0IiwiX2hhbmRsZWQiLCJVdCIsImNvbnNvbGUiLCJlcnJvciIsIkh0IiwiQnQiLCJWdCIsInp0IiwiV3QiLCJQcm9taXNlIiwicXQiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsIk11dGF0aW9uT2JzZXJ2ZXIiLCJzZXRJbW1lZGlhdGUiLCJLdCIsIlh0IiwiR3QiLCJkb2N1bWVudCIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJadCIsIkp0IiwiUXQiLCJpc0Zyb3plbiIsIll0IiwibmFtZSIsIm9uY2UiLCJjYXB0dXJlIiwicGFzc2l2ZSIsInRlIiwiZm5zIiwiZWUiLCJwYXJhbXMiLCJuZSIsImhvb2siLCJtZXJnZWQiLCJyZSIsIm9lIiwiaWUiLCJzaGlmdCIsIl9pc1ZMaXN0IiwiYWUiLCJfcHJvdmlkZWQiLCJzZSIsImF0dHJzIiwic2xvdCIsImNlIiwidWUiLCIkc3RhYmxlIiwiJGtleSIsIl9ub3JtYWxpemVkIiwiJGhhc05vcm1hbCIsImxlIiwiZmUiLCJwcm94eSIsInBlIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsImRlIiwiJHNjb3BlZFNsb3RzIiwiJHNsb3RzIiwiJGNyZWF0ZUVsZW1lbnQiLCJ2ZSIsImhlIiwibWUiLCJ5ZSIsImRvbVByb3BzIiwib24iLCJnZSIsIl9zdGF0aWNUcmVlcyIsImJlIiwic3RhdGljUmVuZGVyRm5zIiwiX3JlbmRlclByb3h5IiwiX2UiLCJDZSIsIiRlIiwid2UiLCJmbiIsIkFlIiwieGUiLCJPZSIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3EiLCJfaSIsIl9tIiwiX2YiLCJfayIsIl9iIiwiX3YiLCJfdSIsIl9nIiwiX2QiLCJfcCIsImtlIiwiX29yaWdpbmFsIiwiX2NvbXBpbGVkIiwibGlzdGVuZXJzIiwiaW5qZWN0aW9ucyIsInNsb3RzIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsIl9jIiwiTGUiLCJTZSIsIkVlIiwiamUiLCJpbml0IiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsInJlbmRlciIsIkN0b3IiLCJxZSIsIiRtb3VudCIsIl9yZW5kZXJDaGlsZHJlbiIsIiR2bm9kZSIsIl92bm9kZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJfcHJvcEtleXMiLCJfcGFyZW50TGlzdGVuZXJzIiwiV2UiLCIkZm9yY2VVcGRhdGUiLCJpbnNlcnQiLCJfaXNNb3VudGVkIiwiWmUiLCJfaW5hY3RpdmUiLCJRZSIsIkdlIiwiZGVzdHJveSIsIl9kaXJlY3RJbmFjdGl2ZSIsIlhlIiwiJGNoaWxkcmVuIiwiJGRlc3Ryb3kiLCJUZSIsIkllIiwiZXh0ZW5kIiwiY2lkIiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJGZSIsIm93bmVycyIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsIiRvbiIsImNsZWFyVGltZW91dCIsIlJlIiwiY29tcG9uZW50IiwiZGVsYXkiLCJ0aW1lb3V0IiwibW9kZWwiLCJwcm9wIiwiZXZlbnQiLCJjYWxsYmFjayIsImZ1bmN0aW9uYWwiLCJuYXRpdmVPbiIsIl9tZXJnZWQiLCJEZSIsIk5lIiwiUGUiLCJpcyIsInByZSIsInN0eWxlIiwiTWUiLCJfX2VzTW9kdWxlIiwidG9TdHJpbmdUYWciLCJVZSIsIkhlIiwiQmUiLCJWZSIsIiRvZmYiLCJ6ZSIsIktlIiwiX2hhc0hvb2tFdmVudCIsIiRlbWl0IiwiSmUiLCJZZSIsInRuIiwiZW4iLCJubiIsInJuIiwibm93IiwiYW4iLCJjcmVhdGVFdmVudCIsInRpbWVTdGFtcCIsInNuIiwic29ydCIsImJlZm9yZSIsInJ1biIsInZtIiwiX3dhdGNoZXIiLCJlbWl0IiwiY24iLCJ1biIsIl93YXRjaGVycyIsImRlZXAiLCJ1c2VyIiwibGF6eSIsInN5bmMiLCJjYiIsImFjdGl2ZSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwiZ2V0dGVyIiwiY2xlYW51cERlcHMiLCJldmFsdWF0ZSIsInRlYXJkb3duIiwiX2lzQmVpbmdEZXN0cm95ZWQiLCJsbiIsInBuIiwiX2RhdGEiLCJjaGFyQ29kZUF0IiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJkbiIsInZuIiwieW4iLCJobiIsIm1uIiwiY2FjaGUiLCJoYW5kbGVyIiwiJHdhdGNoIiwiZ24iLCJzdXBlck9wdGlvbnMiLCJzZWFsZWRPcHRpb25zIiwiZXh0ZW5kT3B0aW9ucyIsImNvbXBvbmVudHMiLCJibiIsIl9pbml0IiwiQ24iLCJfQ3RvciIsImNvbnN0cnVjdG9yIiwibWl4aW4iLCJ1c2UiLCIkbiIsInduIiwiQW4iLCJ4biIsIl91aWQiLCJfY29tcG9uZW50VGFnIiwiX3NlbGYiLCIkcm9vdCIsIiRyZWZzIiwiX2V2ZW50cyIsImVsIiwiJHNldCIsIiRkZWxldGUiLCJpbW1lZGlhdGUiLCIkb25jZSIsIl91cGRhdGUiLCIkZWwiLCJfX3BhdGNoX18iLCJfX3Z1ZV9fIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsIk9uIiwia24iLCJLZWVwQWxpdmUiLCJpbmNsdWRlIiwiZXhjbHVkZSIsIk51bWJlciIsImNyZWF0ZWQiLCJkZXN0cm95ZWQiLCJtb3VudGVkIiwicGFyc2VJbnQiLCJ1dGlsIiwid2FybiIsIm1lcmdlT3B0aW9ucyIsImRlZmluZVJlYWN0aXZlIiwibmV4dFRpY2siLCJvYnNlcnZhYmxlIiwiX2luc3RhbGxlZFBsdWdpbnMiLCJ1bnNoaWZ0IiwiaW5zdGFsbCIsInNzckNvbnRleHQiLCJ2ZXJzaW9uIiwiU24iLCJFbiIsImpuIiwiVG4iLCJJbiIsIk1uIiwiRG4iLCJObiIsIlBuIiwiTG4iLCJGbiIsIlJuIiwiVW4iLCJIbiIsInN0YXRpY0NsYXNzIiwiQm4iLCJzdmciLCJtYXRoIiwiVm4iLCJ6biIsIlduIiwicW4iLCJLbiIsIlhuIiwiY3JlYXRlRWxlbWVudCIsIm11bHRpcGxlIiwic2V0QXR0cmlidXRlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlQ29tbWVudCIsImluc2VydEJlZm9yZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJwYXJlbnROb2RlIiwibmV4dFNpYmxpbmciLCJ0YWdOYW1lIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJHbiIsIlpuIiwicmVmIiwicmVmSW5Gb3IiLCJKbiIsIlFuIiwiWW4iLCJ0ciIsImVyIiwibnIiLCJvciIsIm9sZFZhbHVlIiwib2xkQXJnIiwiYXJnIiwiYXIiLCJkZWYiLCJjb21wb25lbnRVcGRhdGVkIiwiaW5zZXJ0ZWQiLCJyciIsIm1vZGlmaWVycyIsImlyIiwicmF3TmFtZSIsImpvaW4iLCJzciIsImNyIiwiaW5oZXJpdEF0dHJzIiwidXIiLCJyZW1vdmVBdHRyaWJ1dGVOUyIsInJlbW92ZUF0dHJpYnV0ZSIsImxyIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZnIiLCJwciIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJkciIsInZyIiwiaHIiLCJtciIsInlyIiwiYnIiLCJnciIsIl9yIiwiX3dyYXBwZXIiLCJjdXJyZW50VGFyZ2V0Iiwib3duZXJEb2N1bWVudCIsIkNyIiwiY2hhbmdlIiwiJHIiLCJ3ciIsIkFyIiwiY2hpbGROb2RlcyIsIl92YWx1ZSIsInhyIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsImNvbXBvc2luZyIsImFjdGl2ZUVsZW1lbnQiLCJfdk1vZGlmaWVycyIsIm51bWJlciIsInRyaW0iLCJPciIsImtyIiwiU3IiLCJFciIsInN0YXRpY1N0eWxlIiwianIiLCJUciIsIklyIiwiRHIiLCJzZXRQcm9wZXJ0eSIsIlByIiwiTnIiLCJMciIsIm5vcm1hbGl6ZWRTdHlsZSIsIk1yIiwiRnIiLCJSciIsImNsYXNzTGlzdCIsImdldEF0dHJpYnV0ZSIsIlVyIiwicmVtb3ZlIiwiSHIiLCJjc3MiLCJCciIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJWciIsInpyIiwiV3IiLCJxciIsIktyIiwiWHIiLCJHciIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJaciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIkpyIiwiUXIiLCJZciIsInRvIiwibm8iLCJwcm9wQ291bnQiLCJlbyIsImdldENvbXB1dGVkU3R5bGUiLCJybyIsImhhc1RyYW5zZm9ybSIsIm1hcCIsIm9vIiwiaW8iLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsInRyYW5zaXRpb24iLCJfZW50ZXJDYiIsIm5vZGVUeXBlIiwiYXBwZWFyQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiYXBwZWFyQWN0aXZlQ2xhc3MiLCJiZWZvcmVFbnRlciIsImVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsImNvIiwic2hvdyIsIl9wZW5kaW5nIiwic28iLCJhbyIsImJlZm9yZUxlYXZlIiwibGVhdmUiLCJhZnRlckxlYXZlIiwibGVhdmVDYW5jZWxsZWQiLCJkZWxheUxlYXZlIiwidW8iLCJsbyIsIm1vZHVsZXMiLCJub2RlT3BzIiwiYWN0aXZhdGUiLCJwZW5kaW5nSW5zZXJ0IiwicG9zdHBhdGNoIiwiaGFzQ2hpbGROb2RlcyIsImhhc0F0dHJpYnV0ZSIsInZtb2RlbCIsImZvIiwiX3ZPcHRpb25zIiwicG8iLCJtbyIsInlvIiwiZ28iLCJzb21lIiwiaG8iLCJ2byIsInNlbGVjdGVkIiwic2VsZWN0ZWRJbmRleCIsImluaXRFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJibyIsIkNvIiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInVuYmluZCIsIiRvIiwibW9kZSIsIndvIiwiQW8iLCJ4byIsIk9vIiwia28iLCJTbyIsImZpbHRlciIsIl9sZWF2aW5nIiwiRW8iLCJtb3ZlQ2xhc3MiLCJqbyIsIl9tb3ZlQ2IiLCJUbyIsIm5ld1BvcyIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIklvIiwicG9zIiwibGVmdCIsInRvcCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiRG8iLCJUcmFuc2l0aW9uIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmVtb3ZlZCIsInVwZGF0ZWQiLCJoYXNNb3ZlIiwiX3JlZmxvdyIsImJvZHkiLCJvZmZzZXRIZWlnaHQiLCJwcm9wZXJ0eU5hbWUiLCJfaGFzTW92ZSIsImNsb25lTm9kZSIsImNvbmZpZyIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwicXVlcnlTZWxlY3RvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQUtBOzs7O0FBQWEsSUFBSUEsQ0FBQyxHQUFDQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLENBQU47O0FBQXdCLFNBQVNDLENBQVQsQ0FBV0gsQ0FBWCxFQUFhO0FBQUMsU0FBTyxRQUFNQSxDQUFiO0FBQWU7O0FBQUEsU0FB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QUE4UixJQUE5UixFQUFtU0EsQ0FBQyxHQUFDQSxDQUFDLElBQUVxRyxDQUFILEdBQUssVUFBU3JHLENBQVQsRUFBVztBQUFDLFFBQUcsWUFBVSxPQUFPQSxDQUFwQixFQUFzQjtBQUFDLFVBQUlHLENBQUMsR0FBQ2tRLFFBQVEsQ0FBQzhnQixhQUFULENBQXVCbnhCLENBQXZCLENBQU47QUFBZ0MsYUFBT0csQ0FBQyxJQUFFa1EsUUFBUSxDQUFDc1MsYUFBVCxDQUF1QixLQUF2QixDQUFWO0FBQXdDOztBQUFBLFdBQU8zaUIsQ0FBUDtBQUFTLEdBQXBILENBQXFIQSxDQUFySCxDQUFMLEdBQTZILEtBQUssQ0FBdmEsRUFBeWFHLENBQXphLENBQVA7QUFBbWIsQ0FBem9DLEVBQTBvQ2tHLENBQUMsSUFBRTBKLFVBQVUsQ0FBQyxZQUFVO0FBQUN2TCxFQUFBQSxDQUFDLENBQUNJLFFBQUYsSUFBWW9ELEVBQVosSUFBZ0JBLEVBQUUsQ0FBQzJULElBQUgsQ0FBUSxNQUFSLEVBQWV1QyxFQUFmLENBQWhCO0FBQW1DLENBQS9DLEVBQWdELENBQWhELENBQXZwQyxFQUEwc0NrVCxNQUFNLENBQUNDLE9BQVAsR0FBZW5ULEVBQXp0QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogVnVlLmpzIHYyLjYuMTJcbiAqIChjKSAyMDE0LTIwMjAgRXZhbiBZb3VcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS5cbiAqL1xuXCJ1c2Ugc3RyaWN0XCI7dmFyIHQ9T2JqZWN0LmZyZWV6ZSh7fSk7ZnVuY3Rpb24gZSh0KXtyZXR1cm4gbnVsbD09dH1mdW5jdGlvbiBuKHQpe3JldHVybiBudWxsIT10fWZ1bmN0aW9uIHIodCl7cmV0dXJuITA9PT10fWZ1bmN0aW9uIG8odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR8fFwibnVtYmVyXCI9PXR5cGVvZiB0fHxcInN5bWJvbFwiPT10eXBlb2YgdHx8XCJib29sZWFuXCI9PXR5cGVvZiB0fWZ1bmN0aW9uIGkodCl7cmV0dXJuIG51bGwhPT10JiZcIm9iamVjdFwiPT10eXBlb2YgdH12YXIgYT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO2Z1bmN0aW9uIHModCl7cmV0dXJuXCJbb2JqZWN0IE9iamVjdF1cIj09PWEuY2FsbCh0KX1mdW5jdGlvbiBjKHQpe3ZhciBlPXBhcnNlRmxvYXQoU3RyaW5nKHQpKTtyZXR1cm4gZT49MCYmTWF0aC5mbG9vcihlKT09PWUmJmlzRmluaXRlKHQpfWZ1bmN0aW9uIHUodCl7cmV0dXJuIG4odCkmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHQudGhlbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgdC5jYXRjaH1mdW5jdGlvbiBsKHQpe3JldHVybiBudWxsPT10P1wiXCI6QXJyYXkuaXNBcnJheSh0KXx8cyh0KSYmdC50b1N0cmluZz09PWE/SlNPTi5zdHJpbmdpZnkodCxudWxsLDIpOlN0cmluZyh0KX1mdW5jdGlvbiBmKHQpe3ZhciBlPXBhcnNlRmxvYXQodCk7cmV0dXJuIGlzTmFOKGUpP3Q6ZX1mdW5jdGlvbiBwKHQsZSl7Zm9yKHZhciBuPU9iamVjdC5jcmVhdGUobnVsbCkscj10LnNwbGl0KFwiLFwiKSxvPTA7bzxyLmxlbmd0aDtvKyspbltyW29dXT0hMDtyZXR1cm4gZT9mdW5jdGlvbih0KXtyZXR1cm4gblt0LnRvTG93ZXJDYXNlKCldfTpmdW5jdGlvbih0KXtyZXR1cm4gblt0XX19dmFyIGQ9cChcImtleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzXCIpO2Z1bmN0aW9uIHYodCxlKXtpZih0Lmxlbmd0aCl7dmFyIG49dC5pbmRleE9mKGUpO2lmKG4+LTEpcmV0dXJuIHQuc3BsaWNlKG4sMSl9fXZhciBoPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7ZnVuY3Rpb24gbSh0LGUpe3JldHVybiBoLmNhbGwodCxlKX1mdW5jdGlvbiB5KHQpe3ZhciBlPU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybiBlW25dfHwoZVtuXT10KG4pKX19dmFyIGc9Ly0oXFx3KS9nLF89eShmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXBsYWNlKGcsZnVuY3Rpb24odCxlKXtyZXR1cm4gZT9lLnRvVXBwZXJDYXNlKCk6XCJcIn0pfSksYj15KGZ1bmN0aW9uKHQpe3JldHVybiB0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Quc2xpY2UoMSl9KSxDPS9cXEIoW0EtWl0pL2csJD15KGZ1bmN0aW9uKHQpe3JldHVybiB0LnJlcGxhY2UoQyxcIi0kMVwiKS50b0xvd2VyQ2FzZSgpfSk7dmFyIHc9RnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ/ZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5iaW5kKGUpfTpmdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4obil7dmFyIHI9YXJndW1lbnRzLmxlbmd0aDtyZXR1cm4gcj9yPjE/dC5hcHBseShlLGFyZ3VtZW50cyk6dC5jYWxsKGUsbik6dC5jYWxsKGUpfXJldHVybiBuLl9sZW5ndGg9dC5sZW5ndGgsbn07ZnVuY3Rpb24gQSh0LGUpe2U9ZXx8MDtmb3IodmFyIG49dC5sZW5ndGgtZSxyPW5ldyBBcnJheShuKTtuLS07KXJbbl09dFtuK2VdO3JldHVybiByfWZ1bmN0aW9uIHgodCxlKXtmb3IodmFyIG4gaW4gZSl0W25dPWVbbl07cmV0dXJuIHR9ZnVuY3Rpb24gTyh0KXtmb3IodmFyIGU9e30sbj0wO248dC5sZW5ndGg7bisrKXRbbl0mJngoZSx0W25dKTtyZXR1cm4gZX1mdW5jdGlvbiBrKHQsZSxuKXt9dmFyIFM9ZnVuY3Rpb24odCxlLG4pe3JldHVybiExfSxFPWZ1bmN0aW9uKHQpe3JldHVybiB0fTtmdW5jdGlvbiBqKHQsZSl7aWYodD09PWUpcmV0dXJuITA7dmFyIG49aSh0KSxyPWkoZSk7aWYoIW58fCFyKXJldHVybiFuJiYhciYmU3RyaW5nKHQpPT09U3RyaW5nKGUpO3RyeXt2YXIgbz1BcnJheS5pc0FycmF5KHQpLGE9QXJyYXkuaXNBcnJheShlKTtpZihvJiZhKXJldHVybiB0Lmxlbmd0aD09PWUubGVuZ3RoJiZ0LmV2ZXJ5KGZ1bmN0aW9uKHQsbil7cmV0dXJuIGoodCxlW25dKX0pO2lmKHQgaW5zdGFuY2VvZiBEYXRlJiZlIGluc3RhbmNlb2YgRGF0ZSlyZXR1cm4gdC5nZXRUaW1lKCk9PT1lLmdldFRpbWUoKTtpZihvfHxhKXJldHVybiExO3ZhciBzPU9iamVjdC5rZXlzKHQpLGM9T2JqZWN0LmtleXMoZSk7cmV0dXJuIHMubGVuZ3RoPT09Yy5sZW5ndGgmJnMuZXZlcnkoZnVuY3Rpb24obil7cmV0dXJuIGoodFtuXSxlW25dKX0pfWNhdGNoKHQpe3JldHVybiExfX1mdW5jdGlvbiBUKHQsZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspaWYoaih0W25dLGUpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIEkodCl7dmFyIGU9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7ZXx8KGU9ITAsdC5hcHBseSh0aGlzLGFyZ3VtZW50cykpfX12YXIgRD1cImRhdGEtc2VydmVyLXJlbmRlcmVkXCIsTj1bXCJjb21wb25lbnRcIixcImRpcmVjdGl2ZVwiLFwiZmlsdGVyXCJdLFA9W1wiYmVmb3JlQ3JlYXRlXCIsXCJjcmVhdGVkXCIsXCJiZWZvcmVNb3VudFwiLFwibW91bnRlZFwiLFwiYmVmb3JlVXBkYXRlXCIsXCJ1cGRhdGVkXCIsXCJiZWZvcmVEZXN0cm95XCIsXCJkZXN0cm95ZWRcIixcImFjdGl2YXRlZFwiLFwiZGVhY3RpdmF0ZWRcIixcImVycm9yQ2FwdHVyZWRcIixcInNlcnZlclByZWZldGNoXCJdLEw9e29wdGlvbk1lcmdlU3RyYXRlZ2llczpPYmplY3QuY3JlYXRlKG51bGwpLHNpbGVudDohMSxwcm9kdWN0aW9uVGlwOiExLGRldnRvb2xzOiExLHBlcmZvcm1hbmNlOiExLGVycm9ySGFuZGxlcjpudWxsLHdhcm5IYW5kbGVyOm51bGwsaWdub3JlZEVsZW1lbnRzOltdLGtleUNvZGVzOk9iamVjdC5jcmVhdGUobnVsbCksaXNSZXNlcnZlZFRhZzpTLGlzUmVzZXJ2ZWRBdHRyOlMsaXNVbmtub3duRWxlbWVudDpTLGdldFRhZ05hbWVzcGFjZTprLHBhcnNlUGxhdGZvcm1UYWdOYW1lOkUsbXVzdFVzZVByb3A6Uyxhc3luYzohMCxfbGlmZWN5Y2xlSG9va3M6UH07ZnVuY3Rpb24gTSh0LGUsbixyKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxlLHt2YWx1ZTpuLGVudW1lcmFibGU6ISFyLHdyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pfXZhciBGPW5ldyBSZWdFeHAoXCJbXlwiKy9hLXpBLVpcXHUwMEI3XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjAzRi1cXHUyMDQwXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZELy5zb3VyY2UrXCIuJF9cXFxcZF1cIik7dmFyIFIsVT1cIl9fcHJvdG9fX1wiaW57fSxIPVwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3csQj1cInVuZGVmaW5lZFwiIT10eXBlb2YgV1hFbnZpcm9ubWVudCYmISFXWEVudmlyb25tZW50LnBsYXRmb3JtLFY9QiYmV1hFbnZpcm9ubWVudC5wbGF0Zm9ybS50b0xvd2VyQ2FzZSgpLHo9SCYmd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSxXPXomJi9tc2llfHRyaWRlbnQvLnRlc3QoeikscT16JiZ6LmluZGV4T2YoXCJtc2llIDkuMFwiKT4wLEs9eiYmei5pbmRleE9mKFwiZWRnZS9cIik+MCxYPSh6JiZ6LmluZGV4T2YoXCJhbmRyb2lkXCIpLHomJi9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdCh6KXx8XCJpb3NcIj09PVYpLEc9KHomJi9jaHJvbWVcXC9cXGQrLy50ZXN0KHopLHomJi9waGFudG9tanMvLnRlc3QoeikseiYmei5tYXRjaCgvZmlyZWZveFxcLyhcXGQrKS8pKSxaPXt9LndhdGNoLEo9ITE7aWYoSCl0cnl7dmFyIFE9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFEsXCJwYXNzaXZlXCIse2dldDpmdW5jdGlvbigpe0o9ITB9fSksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0LXBhc3NpdmVcIixudWxsLFEpfWNhdGNoKHQpe312YXIgWT1mdW5jdGlvbigpe3JldHVybiB2b2lkIDA9PT1SJiYoUj0hSCYmIUImJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwmJihnbG9iYWwucHJvY2VzcyYmXCJzZXJ2ZXJcIj09PWdsb2JhbC5wcm9jZXNzLmVudi5WVUVfRU5WKSksUn0sdHQ9SCYmd2luZG93Ll9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX187ZnVuY3Rpb24gZXQodCl7cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgdCYmL25hdGl2ZSBjb2RlLy50ZXN0KHQudG9TdHJpbmcoKSl9dmFyIG50LHJ0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTeW1ib2wmJmV0KFN5bWJvbCkmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBSZWZsZWN0JiZldChSZWZsZWN0Lm93bktleXMpO250PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBTZXQmJmV0KFNldCk/U2V0OmZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuc2V0PU9iamVjdC5jcmVhdGUobnVsbCl9cmV0dXJuIHQucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4hMD09PXRoaXMuc2V0W3RdfSx0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7dGhpcy5zZXRbdF09ITB9LHQucHJvdG90eXBlLmNsZWFyPWZ1bmN0aW9uKCl7dGhpcy5zZXQ9T2JqZWN0LmNyZWF0ZShudWxsKX0sdH0oKTt2YXIgb3Q9ayxpdD0wLGF0PWZ1bmN0aW9uKCl7dGhpcy5pZD1pdCsrLHRoaXMuc3Vicz1bXX07YXQucHJvdG90eXBlLmFkZFN1Yj1mdW5jdGlvbih0KXt0aGlzLnN1YnMucHVzaCh0KX0sYXQucHJvdG90eXBlLnJlbW92ZVN1Yj1mdW5jdGlvbih0KXt2KHRoaXMuc3Vicyx0KX0sYXQucHJvdG90eXBlLmRlcGVuZD1mdW5jdGlvbigpe2F0LnRhcmdldCYmYXQudGFyZ2V0LmFkZERlcCh0aGlzKX0sYXQucHJvdG90eXBlLm5vdGlmeT1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLnN1YnMuc2xpY2UoKSxlPTAsbj10Lmxlbmd0aDtlPG47ZSsrKXRbZV0udXBkYXRlKCl9LGF0LnRhcmdldD1udWxsO3ZhciBzdD1bXTtmdW5jdGlvbiBjdCh0KXtzdC5wdXNoKHQpLGF0LnRhcmdldD10fWZ1bmN0aW9uIHV0KCl7c3QucG9wKCksYXQudGFyZ2V0PXN0W3N0Lmxlbmd0aC0xXX12YXIgbHQ9ZnVuY3Rpb24odCxlLG4scixvLGksYSxzKXt0aGlzLnRhZz10LHRoaXMuZGF0YT1lLHRoaXMuY2hpbGRyZW49bix0aGlzLnRleHQ9cix0aGlzLmVsbT1vLHRoaXMubnM9dm9pZCAwLHRoaXMuY29udGV4dD1pLHRoaXMuZm5Db250ZXh0PXZvaWQgMCx0aGlzLmZuT3B0aW9ucz12b2lkIDAsdGhpcy5mblNjb3BlSWQ9dm9pZCAwLHRoaXMua2V5PWUmJmUua2V5LHRoaXMuY29tcG9uZW50T3B0aW9ucz1hLHRoaXMuY29tcG9uZW50SW5zdGFuY2U9dm9pZCAwLHRoaXMucGFyZW50PXZvaWQgMCx0aGlzLnJhdz0hMSx0aGlzLmlzU3RhdGljPSExLHRoaXMuaXNSb290SW5zZXJ0PSEwLHRoaXMuaXNDb21tZW50PSExLHRoaXMuaXNDbG9uZWQ9ITEsdGhpcy5pc09uY2U9ITEsdGhpcy5hc3luY0ZhY3Rvcnk9cyx0aGlzLmFzeW5jTWV0YT12b2lkIDAsdGhpcy5pc0FzeW5jUGxhY2Vob2xkZXI9ITF9LGZ0PXtjaGlsZDp7Y29uZmlndXJhYmxlOiEwfX07ZnQuY2hpbGQuZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2V9LE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGx0LnByb3RvdHlwZSxmdCk7dmFyIHB0PWZ1bmN0aW9uKHQpe3ZvaWQgMD09PXQmJih0PVwiXCIpO3ZhciBlPW5ldyBsdDtyZXR1cm4gZS50ZXh0PXQsZS5pc0NvbW1lbnQ9ITAsZX07ZnVuY3Rpb24gZHQodCl7cmV0dXJuIG5ldyBsdCh2b2lkIDAsdm9pZCAwLHZvaWQgMCxTdHJpbmcodCkpfWZ1bmN0aW9uIHZ0KHQpe3ZhciBlPW5ldyBsdCh0LnRhZyx0LmRhdGEsdC5jaGlsZHJlbiYmdC5jaGlsZHJlbi5zbGljZSgpLHQudGV4dCx0LmVsbSx0LmNvbnRleHQsdC5jb21wb25lbnRPcHRpb25zLHQuYXN5bmNGYWN0b3J5KTtyZXR1cm4gZS5ucz10Lm5zLGUuaXNTdGF0aWM9dC5pc1N0YXRpYyxlLmtleT10LmtleSxlLmlzQ29tbWVudD10LmlzQ29tbWVudCxlLmZuQ29udGV4dD10LmZuQ29udGV4dCxlLmZuT3B0aW9ucz10LmZuT3B0aW9ucyxlLmZuU2NvcGVJZD10LmZuU2NvcGVJZCxlLmFzeW5jTWV0YT10LmFzeW5jTWV0YSxlLmlzQ2xvbmVkPSEwLGV9dmFyIGh0PUFycmF5LnByb3RvdHlwZSxtdD1PYmplY3QuY3JlYXRlKGh0KTtbXCJwdXNoXCIsXCJwb3BcIixcInNoaWZ0XCIsXCJ1bnNoaWZ0XCIsXCJzcGxpY2VcIixcInNvcnRcIixcInJldmVyc2VcIl0uZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1odFt0XTtNKG10LHQsZnVuY3Rpb24oKXtmb3IodmFyIG49W10scj1hcmd1bWVudHMubGVuZ3RoO3ItLTspbltyXT1hcmd1bWVudHNbcl07dmFyIG8saT1lLmFwcGx5KHRoaXMsbiksYT10aGlzLl9fb2JfXztzd2l0Y2godCl7Y2FzZVwicHVzaFwiOmNhc2VcInVuc2hpZnRcIjpvPW47YnJlYWs7Y2FzZVwic3BsaWNlXCI6bz1uLnNsaWNlKDIpfXJldHVybiBvJiZhLm9ic2VydmVBcnJheShvKSxhLmRlcC5ub3RpZnkoKSxpfSl9KTt2YXIgeXQ9T2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMobXQpLGd0PSEwO2Z1bmN0aW9uIF90KHQpe2d0PXR9dmFyIGJ0PWZ1bmN0aW9uKHQpe3ZhciBlO3RoaXMudmFsdWU9dCx0aGlzLmRlcD1uZXcgYXQsdGhpcy52bUNvdW50PTAsTSh0LFwiX19vYl9fXCIsdGhpcyksQXJyYXkuaXNBcnJheSh0KT8oVT8oZT1tdCx0Ll9fcHJvdG9fXz1lKTpmdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPTAsbz1uLmxlbmd0aDtyPG87cisrKXt2YXIgaT1uW3JdO00odCxpLGVbaV0pfX0odCxtdCx5dCksdGhpcy5vYnNlcnZlQXJyYXkodCkpOnRoaXMud2Fsayh0KX07ZnVuY3Rpb24gQ3QodCxlKXt2YXIgbjtpZihpKHQpJiYhKHQgaW5zdGFuY2VvZiBsdCkpcmV0dXJuIG0odCxcIl9fb2JfX1wiKSYmdC5fX29iX18gaW5zdGFuY2VvZiBidD9uPXQuX19vYl9fOmd0JiYhWSgpJiYoQXJyYXkuaXNBcnJheSh0KXx8cyh0KSkmJk9iamVjdC5pc0V4dGVuc2libGUodCkmJiF0Ll9pc1Z1ZSYmKG49bmV3IGJ0KHQpKSxlJiZuJiZuLnZtQ291bnQrKyxufWZ1bmN0aW9uICR0KHQsZSxuLHIsbyl7dmFyIGk9bmV3IGF0LGE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LGUpO2lmKCFhfHwhMSE9PWEuY29uZmlndXJhYmxlKXt2YXIgcz1hJiZhLmdldCxjPWEmJmEuc2V0O3MmJiFjfHwyIT09YXJndW1lbnRzLmxlbmd0aHx8KG49dFtlXSk7dmFyIHU9IW8mJkN0KG4pO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3ZhciBlPXM/cy5jYWxsKHQpOm47cmV0dXJuIGF0LnRhcmdldCYmKGkuZGVwZW5kKCksdSYmKHUuZGVwLmRlcGVuZCgpLEFycmF5LmlzQXJyYXkoZSkmJmZ1bmN0aW9uIHQoZSl7Zm9yKHZhciBuPXZvaWQgMCxyPTAsbz1lLmxlbmd0aDtyPG87cisrKShuPWVbcl0pJiZuLl9fb2JfXyYmbi5fX29iX18uZGVwLmRlcGVuZCgpLEFycmF5LmlzQXJyYXkobikmJnQobil9KGUpKSksZX0sc2V0OmZ1bmN0aW9uKGUpe3ZhciByPXM/cy5jYWxsKHQpOm47ZT09PXJ8fGUhPWUmJnIhPXJ8fHMmJiFjfHwoYz9jLmNhbGwodCxlKTpuPWUsdT0hbyYmQ3QoZSksaS5ub3RpZnkoKSl9fSl9fWZ1bmN0aW9uIHd0KHQsZSxuKXtpZihBcnJheS5pc0FycmF5KHQpJiZjKGUpKXJldHVybiB0Lmxlbmd0aD1NYXRoLm1heCh0Lmxlbmd0aCxlKSx0LnNwbGljZShlLDEsbiksbjtpZihlIGluIHQmJiEoZSBpbiBPYmplY3QucHJvdG90eXBlKSlyZXR1cm4gdFtlXT1uLG47dmFyIHI9dC5fX29iX187cmV0dXJuIHQuX2lzVnVlfHxyJiZyLnZtQ291bnQ/bjpyPygkdChyLnZhbHVlLGUsbiksci5kZXAubm90aWZ5KCksbik6KHRbZV09bixuKX1mdW5jdGlvbiBBdCh0LGUpe2lmKEFycmF5LmlzQXJyYXkodCkmJmMoZSkpdC5zcGxpY2UoZSwxKTtlbHNle3ZhciBuPXQuX19vYl9fO3QuX2lzVnVlfHxuJiZuLnZtQ291bnR8fG0odCxlKSYmKGRlbGV0ZSB0W2VdLG4mJm4uZGVwLm5vdGlmeSgpKX19YnQucHJvdG90eXBlLndhbGs9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPU9iamVjdC5rZXlzKHQpLG49MDtuPGUubGVuZ3RoO24rKykkdCh0LGVbbl0pfSxidC5wcm90b3R5cGUub2JzZXJ2ZUFycmF5PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dC5sZW5ndGg7ZTxuO2UrKylDdCh0W2VdKX07dmFyIHh0PUwub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO2Z1bmN0aW9uIE90KHQsZSl7aWYoIWUpcmV0dXJuIHQ7Zm9yKHZhciBuLHIsbyxpPXJ0P1JlZmxlY3Qub3duS2V5cyhlKTpPYmplY3Qua2V5cyhlKSxhPTA7YTxpLmxlbmd0aDthKyspXCJfX29iX19cIiE9PShuPWlbYV0pJiYocj10W25dLG89ZVtuXSxtKHQsbik/ciE9PW8mJnMocikmJnMobykmJk90KHIsbyk6d3QodCxuLG8pKTtyZXR1cm4gdH1mdW5jdGlvbiBrdCh0LGUsbil7cmV0dXJuIG4/ZnVuY3Rpb24oKXt2YXIgcj1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2UuY2FsbChuLG4pOmUsbz1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0P3QuY2FsbChuLG4pOnQ7cmV0dXJuIHI/T3QocixvKTpvfTplP3Q/ZnVuY3Rpb24oKXtyZXR1cm4gT3QoXCJmdW5jdGlvblwiPT10eXBlb2YgZT9lLmNhbGwodGhpcyx0aGlzKTplLFwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/dC5jYWxsKHRoaXMsdGhpcyk6dCl9OmU6dH1mdW5jdGlvbiBTdCh0LGUpe3ZhciBuPWU/dD90LmNvbmNhdChlKTpBcnJheS5pc0FycmF5KGUpP2U6W2VdOnQ7cmV0dXJuIG4/ZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoO24rKyktMT09PWUuaW5kZXhPZih0W25dKSYmZS5wdXNoKHRbbl0pO3JldHVybiBlfShuKTpufWZ1bmN0aW9uIEV0KHQsZSxuLHIpe3ZhciBvPU9iamVjdC5jcmVhdGUodHx8bnVsbCk7cmV0dXJuIGU/eChvLGUpOm99eHQuZGF0YT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIG4/a3QodCxlLG4pOmUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGU/dDprdCh0LGUpfSxQLmZvckVhY2goZnVuY3Rpb24odCl7eHRbdF09U3R9KSxOLmZvckVhY2goZnVuY3Rpb24odCl7eHRbdCtcInNcIl09RXR9KSx4dC53YXRjaD1mdW5jdGlvbih0LGUsbixyKXtpZih0PT09WiYmKHQ9dm9pZCAwKSxlPT09WiYmKGU9dm9pZCAwKSwhZSlyZXR1cm4gT2JqZWN0LmNyZWF0ZSh0fHxudWxsKTtpZighdClyZXR1cm4gZTt2YXIgbz17fTtmb3IodmFyIGkgaW4geChvLHQpLGUpe3ZhciBhPW9baV0scz1lW2ldO2EmJiFBcnJheS5pc0FycmF5KGEpJiYoYT1bYV0pLG9baV09YT9hLmNvbmNhdChzKTpBcnJheS5pc0FycmF5KHMpP3M6W3NdfXJldHVybiBvfSx4dC5wcm9wcz14dC5tZXRob2RzPXh0LmluamVjdD14dC5jb21wdXRlZD1mdW5jdGlvbih0LGUsbixyKXtpZighdClyZXR1cm4gZTt2YXIgbz1PYmplY3QuY3JlYXRlKG51bGwpO3JldHVybiB4KG8sdCksZSYmeChvLGUpLG99LHh0LnByb3ZpZGU9a3Q7dmFyIGp0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWU/dDplfTtmdW5jdGlvbiBUdCh0LGUsbil7aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZSYmKGU9ZS5vcHRpb25zKSxmdW5jdGlvbih0LGUpe3ZhciBuPXQucHJvcHM7aWYobil7dmFyIHIsbyxpPXt9O2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHI9bi5sZW5ndGg7ci0tOylcInN0cmluZ1wiPT10eXBlb2Yobz1uW3JdKSYmKGlbXyhvKV09e3R5cGU6bnVsbH0pO2Vsc2UgaWYocyhuKSlmb3IodmFyIGEgaW4gbilvPW5bYV0saVtfKGEpXT1zKG8pP286e3R5cGU6b307dC5wcm9wcz1pfX0oZSksZnVuY3Rpb24odCxlKXt2YXIgbj10LmluamVjdDtpZihuKXt2YXIgcj10LmluamVjdD17fTtpZihBcnJheS5pc0FycmF5KG4pKWZvcih2YXIgbz0wO288bi5sZW5ndGg7bysrKXJbbltvXV09e2Zyb206bltvXX07ZWxzZSBpZihzKG4pKWZvcih2YXIgaSBpbiBuKXt2YXIgYT1uW2ldO3JbaV09cyhhKT94KHtmcm9tOml9LGEpOntmcm9tOmF9fX19KGUpLGZ1bmN0aW9uKHQpe3ZhciBlPXQuZGlyZWN0aXZlcztpZihlKWZvcih2YXIgbiBpbiBlKXt2YXIgcj1lW25dO1wiZnVuY3Rpb25cIj09dHlwZW9mIHImJihlW25dPXtiaW5kOnIsdXBkYXRlOnJ9KX19KGUpLCFlLl9iYXNlJiYoZS5leHRlbmRzJiYodD1UdCh0LGUuZXh0ZW5kcyxuKSksZS5taXhpbnMpKWZvcih2YXIgcj0wLG89ZS5taXhpbnMubGVuZ3RoO3I8bztyKyspdD1UdCh0LGUubWl4aW5zW3JdLG4pO3ZhciBpLGE9e307Zm9yKGkgaW4gdCljKGkpO2ZvcihpIGluIGUpbSh0LGkpfHxjKGkpO2Z1bmN0aW9uIGMocil7dmFyIG89eHRbcl18fGp0O2Fbcl09byh0W3JdLGVbcl0sbixyKX1yZXR1cm4gYX1mdW5jdGlvbiBJdCh0LGUsbixyKXtpZihcInN0cmluZ1wiPT10eXBlb2Ygbil7dmFyIG89dFtlXTtpZihtKG8sbikpcmV0dXJuIG9bbl07dmFyIGk9XyhuKTtpZihtKG8saSkpcmV0dXJuIG9baV07dmFyIGE9YihpKTtyZXR1cm4gbShvLGEpP29bYV06b1tuXXx8b1tpXXx8b1thXX19ZnVuY3Rpb24gRHQodCxlLG4scil7dmFyIG89ZVt0XSxpPSFtKG4sdCksYT1uW3RdLHM9THQoQm9vbGVhbixvLnR5cGUpO2lmKHM+LTEpaWYoaSYmIW0obyxcImRlZmF1bHRcIikpYT0hMTtlbHNlIGlmKFwiXCI9PT1hfHxhPT09JCh0KSl7dmFyIGM9THQoU3RyaW5nLG8udHlwZSk7KGM8MHx8czxjKSYmKGE9ITApfWlmKHZvaWQgMD09PWEpe2E9ZnVuY3Rpb24odCxlLG4pe2lmKCFtKGUsXCJkZWZhdWx0XCIpKXJldHVybjt2YXIgcj1lLmRlZmF1bHQ7aWYodCYmdC4kb3B0aW9ucy5wcm9wc0RhdGEmJnZvaWQgMD09PXQuJG9wdGlvbnMucHJvcHNEYXRhW25dJiZ2b2lkIDAhPT10Ll9wcm9wc1tuXSlyZXR1cm4gdC5fcHJvcHNbbl07cmV0dXJuXCJmdW5jdGlvblwiPT10eXBlb2YgciYmXCJGdW5jdGlvblwiIT09TnQoZS50eXBlKT9yLmNhbGwodCk6cn0ocixvLHQpO3ZhciB1PWd0O190KCEwKSxDdChhKSxfdCh1KX1yZXR1cm4gYX1mdW5jdGlvbiBOdCh0KXt2YXIgZT10JiZ0LnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7cmV0dXJuIGU/ZVsxXTpcIlwifWZ1bmN0aW9uIFB0KHQsZSl7cmV0dXJuIE50KHQpPT09TnQoZSl9ZnVuY3Rpb24gTHQodCxlKXtpZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gUHQoZSx0KT8wOi0xO2Zvcih2YXIgbj0wLHI9ZS5sZW5ndGg7bjxyO24rKylpZihQdChlW25dLHQpKXJldHVybiBuO3JldHVybi0xfWZ1bmN0aW9uIE10KHQsZSxuKXtjdCgpO3RyeXtpZihlKWZvcih2YXIgcj1lO3I9ci4kcGFyZW50Oyl7dmFyIG89ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO2lmKG8pZm9yKHZhciBpPTA7aTxvLmxlbmd0aDtpKyspdHJ5e2lmKCExPT09b1tpXS5jYWxsKHIsdCxlLG4pKXJldHVybn1jYXRjaCh0KXtSdCh0LHIsXCJlcnJvckNhcHR1cmVkIGhvb2tcIil9fVJ0KHQsZSxuKX1maW5hbGx5e3V0KCl9fWZ1bmN0aW9uIEZ0KHQsZSxuLHIsbyl7dmFyIGk7dHJ5eyhpPW4/dC5hcHBseShlLG4pOnQuY2FsbChlKSkmJiFpLl9pc1Z1ZSYmdShpKSYmIWkuX2hhbmRsZWQmJihpLmNhdGNoKGZ1bmN0aW9uKHQpe3JldHVybiBNdCh0LHIsbytcIiAoUHJvbWlzZS9hc3luYylcIil9KSxpLl9oYW5kbGVkPSEwKX1jYXRjaCh0KXtNdCh0LHIsbyl9cmV0dXJuIGl9ZnVuY3Rpb24gUnQodCxlLG4pe2lmKEwuZXJyb3JIYW5kbGVyKXRyeXtyZXR1cm4gTC5lcnJvckhhbmRsZXIuY2FsbChudWxsLHQsZSxuKX1jYXRjaChlKXtlIT09dCYmVXQoZSxudWxsLFwiY29uZmlnLmVycm9ySGFuZGxlclwiKX1VdCh0LGUsbil9ZnVuY3Rpb24gVXQodCxlLG4pe2lmKCFIJiYhQnx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGNvbnNvbGUpdGhyb3cgdDtjb25zb2xlLmVycm9yKHQpfXZhciBIdCxCdD0hMSxWdD1bXSx6dD0hMTtmdW5jdGlvbiBXdCgpe3p0PSExO3ZhciB0PVZ0LnNsaWNlKDApO1Z0Lmxlbmd0aD0wO2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXRbZV0oKX1pZihcInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSYmZXQoUHJvbWlzZSkpe3ZhciBxdD1Qcm9taXNlLnJlc29sdmUoKTtIdD1mdW5jdGlvbigpe3F0LnRoZW4oV3QpLFgmJnNldFRpbWVvdXQoayl9LEJ0PSEwfWVsc2UgaWYoV3x8XCJ1bmRlZmluZWRcIj09dHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXJ8fCFldChNdXRhdGlvbk9ic2VydmVyKSYmXCJbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl1cIiE9PU11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSlIdD1cInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZldChzZXRJbW1lZGlhdGUpP2Z1bmN0aW9uKCl7c2V0SW1tZWRpYXRlKFd0KX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KFd0LDApfTtlbHNle3ZhciBLdD0xLFh0PW5ldyBNdXRhdGlvbk9ic2VydmVyKFd0KSxHdD1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoS3QpKTtYdC5vYnNlcnZlKEd0LHtjaGFyYWN0ZXJEYXRhOiEwfSksSHQ9ZnVuY3Rpb24oKXtLdD0oS3QrMSklMixHdC5kYXRhPVN0cmluZyhLdCl9LEJ0PSEwfWZ1bmN0aW9uIFp0KHQsZSl7dmFyIG47aWYoVnQucHVzaChmdW5jdGlvbigpe2lmKHQpdHJ5e3QuY2FsbChlKX1jYXRjaCh0KXtNdCh0LGUsXCJuZXh0VGlja1wiKX1lbHNlIG4mJm4oZSl9KSx6dHx8KHp0PSEwLEh0KCkpLCF0JiZcInVuZGVmaW5lZFwiIT10eXBlb2YgUHJvbWlzZSlyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCl7bj10fSl9dmFyIEp0PW5ldyBudDtmdW5jdGlvbiBRdCh0KXshZnVuY3Rpb24gdChlLG4pe3ZhciByLG87dmFyIGE9QXJyYXkuaXNBcnJheShlKTtpZighYSYmIWkoZSl8fE9iamVjdC5pc0Zyb3plbihlKXx8ZSBpbnN0YW5jZW9mIGx0KXJldHVybjtpZihlLl9fb2JfXyl7dmFyIHM9ZS5fX29iX18uZGVwLmlkO2lmKG4uaGFzKHMpKXJldHVybjtuLmFkZChzKX1pZihhKWZvcihyPWUubGVuZ3RoO3ItLTspdChlW3JdLG4pO2Vsc2UgZm9yKG89T2JqZWN0LmtleXMoZSkscj1vLmxlbmd0aDtyLS07KXQoZVtvW3JdXSxuKX0odCxKdCksSnQuY2xlYXIoKX12YXIgWXQ9eShmdW5jdGlvbih0KXt2YXIgZT1cIiZcIj09PXQuY2hhckF0KDApLG49XCJ+XCI9PT0odD1lP3Quc2xpY2UoMSk6dCkuY2hhckF0KDApLHI9XCIhXCI9PT0odD1uP3Quc2xpY2UoMSk6dCkuY2hhckF0KDApO3JldHVybntuYW1lOnQ9cj90LnNsaWNlKDEpOnQsb25jZTpuLGNhcHR1cmU6cixwYXNzaXZlOmV9fSk7ZnVuY3Rpb24gdGUodCxlKXtmdW5jdGlvbiBuKCl7dmFyIHQ9YXJndW1lbnRzLHI9bi5mbnM7aWYoIUFycmF5LmlzQXJyYXkocikpcmV0dXJuIEZ0KHIsbnVsbCxhcmd1bWVudHMsZSxcInYtb24gaGFuZGxlclwiKTtmb3IodmFyIG89ci5zbGljZSgpLGk9MDtpPG8ubGVuZ3RoO2krKylGdChvW2ldLG51bGwsdCxlLFwidi1vbiBoYW5kbGVyXCIpfXJldHVybiBuLmZucz10LG59ZnVuY3Rpb24gZWUodCxuLG8saSxhLHMpe3ZhciBjLHUsbCxmO2ZvcihjIGluIHQpdT10W2NdLGw9bltjXSxmPVl0KGMpLGUodSl8fChlKGwpPyhlKHUuZm5zKSYmKHU9dFtjXT10ZSh1LHMpKSxyKGYub25jZSkmJih1PXRbY109YShmLm5hbWUsdSxmLmNhcHR1cmUpKSxvKGYubmFtZSx1LGYuY2FwdHVyZSxmLnBhc3NpdmUsZi5wYXJhbXMpKTp1IT09bCYmKGwuZm5zPXUsdFtjXT1sKSk7Zm9yKGMgaW4gbillKHRbY10pJiZpKChmPVl0KGMpKS5uYW1lLG5bY10sZi5jYXB0dXJlKX1mdW5jdGlvbiBuZSh0LG8saSl7dmFyIGE7dCBpbnN0YW5jZW9mIGx0JiYodD10LmRhdGEuaG9va3x8KHQuZGF0YS5ob29rPXt9KSk7dmFyIHM9dFtvXTtmdW5jdGlvbiBjKCl7aS5hcHBseSh0aGlzLGFyZ3VtZW50cyksdihhLmZucyxjKX1lKHMpP2E9dGUoW2NdKTpuKHMuZm5zKSYmcihzLm1lcmdlZCk/KGE9cykuZm5zLnB1c2goYyk6YT10ZShbcyxjXSksYS5tZXJnZWQ9ITAsdFtvXT1hfWZ1bmN0aW9uIHJlKHQsZSxyLG8saSl7aWYobihlKSl7aWYobShlLHIpKXJldHVybiB0W3JdPWVbcl0saXx8ZGVsZXRlIGVbcl0sITA7aWYobShlLG8pKXJldHVybiB0W3JdPWVbb10saXx8ZGVsZXRlIGVbb10sITB9cmV0dXJuITF9ZnVuY3Rpb24gb2UodCl7cmV0dXJuIG8odCk/W2R0KHQpXTpBcnJheS5pc0FycmF5KHQpP2Z1bmN0aW9uIHQoaSxhKXt2YXIgcz1bXTt2YXIgYyx1LGwsZjtmb3IoYz0wO2M8aS5sZW5ndGg7YysrKWUodT1pW2NdKXx8XCJib29sZWFuXCI9PXR5cGVvZiB1fHwobD1zLmxlbmd0aC0xLGY9c1tsXSxBcnJheS5pc0FycmF5KHUpP3UubGVuZ3RoPjAmJihpZSgodT10KHUsKGF8fFwiXCIpK1wiX1wiK2MpKVswXSkmJmllKGYpJiYoc1tsXT1kdChmLnRleHQrdVswXS50ZXh0KSx1LnNoaWZ0KCkpLHMucHVzaC5hcHBseShzLHUpKTpvKHUpP2llKGYpP3NbbF09ZHQoZi50ZXh0K3UpOlwiXCIhPT11JiZzLnB1c2goZHQodSkpOmllKHUpJiZpZShmKT9zW2xdPWR0KGYudGV4dCt1LnRleHQpOihyKGkuX2lzVkxpc3QpJiZuKHUudGFnKSYmZSh1LmtleSkmJm4oYSkmJih1LmtleT1cIl9fdmxpc3RcIithK1wiX1wiK2MrXCJfX1wiKSxzLnB1c2godSkpKTtyZXR1cm4gc30odCk6dm9pZCAwfWZ1bmN0aW9uIGllKHQpe3JldHVybiBuKHQpJiZuKHQudGV4dCkmJiExPT09dC5pc0NvbW1lbnR9ZnVuY3Rpb24gYWUodCxlKXtpZih0KXtmb3IodmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPXJ0P1JlZmxlY3Qub3duS2V5cyh0KTpPYmplY3Qua2V5cyh0KSxvPTA7bzxyLmxlbmd0aDtvKyspe3ZhciBpPXJbb107aWYoXCJfX29iX19cIiE9PWkpe2Zvcih2YXIgYT10W2ldLmZyb20scz1lO3M7KXtpZihzLl9wcm92aWRlZCYmbShzLl9wcm92aWRlZCxhKSl7bltpXT1zLl9wcm92aWRlZFthXTticmVha31zPXMuJHBhcmVudH1pZighcyYmXCJkZWZhdWx0XCJpbiB0W2ldKXt2YXIgYz10W2ldLmRlZmF1bHQ7bltpXT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBjP2MuY2FsbChlKTpjfX19cmV0dXJuIG59fWZ1bmN0aW9uIHNlKHQsZSl7aWYoIXR8fCF0Lmxlbmd0aClyZXR1cm57fTtmb3IodmFyIG49e30scj0wLG89dC5sZW5ndGg7cjxvO3IrKyl7dmFyIGk9dFtyXSxhPWkuZGF0YTtpZihhJiZhLmF0dHJzJiZhLmF0dHJzLnNsb3QmJmRlbGV0ZSBhLmF0dHJzLnNsb3QsaS5jb250ZXh0IT09ZSYmaS5mbkNvbnRleHQhPT1lfHwhYXx8bnVsbD09YS5zbG90KShuLmRlZmF1bHR8fChuLmRlZmF1bHQ9W10pKS5wdXNoKGkpO2Vsc2V7dmFyIHM9YS5zbG90LGM9bltzXXx8KG5bc109W10pO1widGVtcGxhdGVcIj09PWkudGFnP2MucHVzaC5hcHBseShjLGkuY2hpbGRyZW58fFtdKTpjLnB1c2goaSl9fWZvcih2YXIgdSBpbiBuKW5bdV0uZXZlcnkoY2UpJiZkZWxldGUgblt1XTtyZXR1cm4gbn1mdW5jdGlvbiBjZSh0KXtyZXR1cm4gdC5pc0NvbW1lbnQmJiF0LmFzeW5jRmFjdG9yeXx8XCIgXCI9PT10LnRleHR9ZnVuY3Rpb24gdWUoZSxuLHIpe3ZhciBvLGk9T2JqZWN0LmtleXMobikubGVuZ3RoPjAsYT1lPyEhZS4kc3RhYmxlOiFpLHM9ZSYmZS4ka2V5O2lmKGUpe2lmKGUuX25vcm1hbGl6ZWQpcmV0dXJuIGUuX25vcm1hbGl6ZWQ7aWYoYSYmciYmciE9PXQmJnM9PT1yLiRrZXkmJiFpJiYhci4kaGFzTm9ybWFsKXJldHVybiByO2Zvcih2YXIgYyBpbiBvPXt9LGUpZVtjXSYmXCIkXCIhPT1jWzBdJiYob1tjXT1sZShuLGMsZVtjXSkpfWVsc2Ugbz17fTtmb3IodmFyIHUgaW4gbil1IGluIG98fChvW3VdPWZlKG4sdSkpO3JldHVybiBlJiZPYmplY3QuaXNFeHRlbnNpYmxlKGUpJiYoZS5fbm9ybWFsaXplZD1vKSxNKG8sXCIkc3RhYmxlXCIsYSksTShvLFwiJGtleVwiLHMpLE0obyxcIiRoYXNOb3JtYWxcIixpKSxvfWZ1bmN0aW9uIGxlKHQsZSxuKXt2YXIgcj1mdW5jdGlvbigpe3ZhciB0PWFyZ3VtZW50cy5sZW5ndGg/bi5hcHBseShudWxsLGFyZ3VtZW50cyk6bih7fSk7cmV0dXJuKHQ9dCYmXCJvYmplY3RcIj09dHlwZW9mIHQmJiFBcnJheS5pc0FycmF5KHQpP1t0XTpvZSh0KSkmJigwPT09dC5sZW5ndGh8fDE9PT10Lmxlbmd0aCYmdFswXS5pc0NvbW1lbnQpP3ZvaWQgMDp0fTtyZXR1cm4gbi5wcm94eSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7Z2V0OnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxyfWZ1bmN0aW9uIGZlKHQsZSl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIHRbZV19fWZ1bmN0aW9uIHBlKHQsZSl7dmFyIHIsbyxhLHMsYztpZihBcnJheS5pc0FycmF5KHQpfHxcInN0cmluZ1wiPT10eXBlb2YgdClmb3Iocj1uZXcgQXJyYXkodC5sZW5ndGgpLG89MCxhPXQubGVuZ3RoO288YTtvKyspcltvXT1lKHRbb10sbyk7ZWxzZSBpZihcIm51bWJlclwiPT10eXBlb2YgdClmb3Iocj1uZXcgQXJyYXkodCksbz0wO288dDtvKyspcltvXT1lKG8rMSxvKTtlbHNlIGlmKGkodCkpaWYocnQmJnRbU3ltYm9sLml0ZXJhdG9yXSl7cj1bXTtmb3IodmFyIHU9dFtTeW1ib2wuaXRlcmF0b3JdKCksbD11Lm5leHQoKTshbC5kb25lOylyLnB1c2goZShsLnZhbHVlLHIubGVuZ3RoKSksbD11Lm5leHQoKX1lbHNlIGZvcihzPU9iamVjdC5rZXlzKHQpLHI9bmV3IEFycmF5KHMubGVuZ3RoKSxvPTAsYT1zLmxlbmd0aDtvPGE7bysrKWM9c1tvXSxyW29dPWUodFtjXSxjLG8pO3JldHVybiBuKHIpfHwocj1bXSksci5faXNWTGlzdD0hMCxyfWZ1bmN0aW9uIGRlKHQsZSxuLHIpe3ZhciBvLGk9dGhpcy4kc2NvcGVkU2xvdHNbdF07aT8obj1ufHx7fSxyJiYobj14KHgoe30sciksbikpLG89aShuKXx8ZSk6bz10aGlzLiRzbG90c1t0XXx8ZTt2YXIgYT1uJiZuLnNsb3Q7cmV0dXJuIGE/dGhpcy4kY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIse3Nsb3Q6YX0sbyk6b31mdW5jdGlvbiB2ZSh0KXtyZXR1cm4gSXQodGhpcy4kb3B0aW9ucyxcImZpbHRlcnNcIix0KXx8RX1mdW5jdGlvbiBoZSh0LGUpe3JldHVybiBBcnJheS5pc0FycmF5KHQpPy0xPT09dC5pbmRleE9mKGUpOnQhPT1lfWZ1bmN0aW9uIG1lKHQsZSxuLHIsbyl7dmFyIGk9TC5rZXlDb2Rlc1tlXXx8bjtyZXR1cm4gbyYmciYmIUwua2V5Q29kZXNbZV0/aGUobyxyKTppP2hlKGksdCk6cj8kKHIpIT09ZTp2b2lkIDB9ZnVuY3Rpb24geWUodCxlLG4scixvKXtpZihuKWlmKGkobikpe3ZhciBhO0FycmF5LmlzQXJyYXkobikmJihuPU8obikpO3ZhciBzPWZ1bmN0aW9uKGkpe2lmKFwiY2xhc3NcIj09PWl8fFwic3R5bGVcIj09PWl8fGQoaSkpYT10O2Vsc2V7dmFyIHM9dC5hdHRycyYmdC5hdHRycy50eXBlO2E9cnx8TC5tdXN0VXNlUHJvcChlLHMsaSk/dC5kb21Qcm9wc3x8KHQuZG9tUHJvcHM9e30pOnQuYXR0cnN8fCh0LmF0dHJzPXt9KX12YXIgYz1fKGkpLHU9JChpKTtjIGluIGF8fHUgaW4gYXx8KGFbaV09bltpXSxvJiYoKHQub258fCh0Lm9uPXt9KSlbXCJ1cGRhdGU6XCIraV09ZnVuY3Rpb24odCl7bltpXT10fSkpfTtmb3IodmFyIGMgaW4gbilzKGMpfWVsc2U7cmV0dXJuIHR9ZnVuY3Rpb24gZ2UodCxlKXt2YXIgbj10aGlzLl9zdGF0aWNUcmVlc3x8KHRoaXMuX3N0YXRpY1RyZWVzPVtdKSxyPW5bdF07cmV0dXJuIHImJiFlP3I6KGJlKHI9blt0XT10aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1t0XS5jYWxsKHRoaXMuX3JlbmRlclByb3h5LG51bGwsdGhpcyksXCJfX3N0YXRpY19fXCIrdCwhMSkscil9ZnVuY3Rpb24gX2UodCxlLG4pe3JldHVybiBiZSh0LFwiX19vbmNlX19cIitlKyhuP1wiX1wiK246XCJcIiksITApLHR9ZnVuY3Rpb24gYmUodCxlLG4pe2lmKEFycmF5LmlzQXJyYXkodCkpZm9yKHZhciByPTA7cjx0Lmxlbmd0aDtyKyspdFtyXSYmXCJzdHJpbmdcIiE9dHlwZW9mIHRbcl0mJkNlKHRbcl0sZStcIl9cIityLG4pO2Vsc2UgQ2UodCxlLG4pfWZ1bmN0aW9uIENlKHQsZSxuKXt0LmlzU3RhdGljPSEwLHQua2V5PWUsdC5pc09uY2U9bn1mdW5jdGlvbiAkZSh0LGUpe2lmKGUpaWYocyhlKSl7dmFyIG49dC5vbj10Lm9uP3goe30sdC5vbik6e307Zm9yKHZhciByIGluIGUpe3ZhciBvPW5bcl0saT1lW3JdO25bcl09bz9bXS5jb25jYXQobyxpKTppfX1lbHNlO3JldHVybiB0fWZ1bmN0aW9uIHdlKHQsZSxuLHIpe2U9ZXx8eyRzdGFibGU6IW59O2Zvcih2YXIgbz0wO288dC5sZW5ndGg7bysrKXt2YXIgaT10W29dO0FycmF5LmlzQXJyYXkoaSk/d2UoaSxlLG4pOmkmJihpLnByb3h5JiYoaS5mbi5wcm94eT0hMCksZVtpLmtleV09aS5mbil9cmV0dXJuIHImJihlLiRrZXk9ciksZX1mdW5jdGlvbiBBZSh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bis9Mil7dmFyIHI9ZVtuXTtcInN0cmluZ1wiPT10eXBlb2YgciYmciYmKHRbZVtuXV09ZVtuKzFdKX1yZXR1cm4gdH1mdW5jdGlvbiB4ZSh0LGUpe3JldHVyblwic3RyaW5nXCI9PXR5cGVvZiB0P2UrdDp0fWZ1bmN0aW9uIE9lKHQpe3QuX289X2UsdC5fbj1mLHQuX3M9bCx0Ll9sPXBlLHQuX3Q9ZGUsdC5fcT1qLHQuX2k9VCx0Ll9tPWdlLHQuX2Y9dmUsdC5faz1tZSx0Ll9iPXllLHQuX3Y9ZHQsdC5fZT1wdCx0Ll91PXdlLHQuX2c9JGUsdC5fZD1BZSx0Ll9wPXhlfWZ1bmN0aW9uIGtlKGUsbixvLGksYSl7dmFyIHMsYz10aGlzLHU9YS5vcHRpb25zO20oaSxcIl91aWRcIik/KHM9T2JqZWN0LmNyZWF0ZShpKSkuX29yaWdpbmFsPWk6KHM9aSxpPWkuX29yaWdpbmFsKTt2YXIgbD1yKHUuX2NvbXBpbGVkKSxmPSFsO3RoaXMuZGF0YT1lLHRoaXMucHJvcHM9bix0aGlzLmNoaWxkcmVuPW8sdGhpcy5wYXJlbnQ9aSx0aGlzLmxpc3RlbmVycz1lLm9ufHx0LHRoaXMuaW5qZWN0aW9ucz1hZSh1LmluamVjdCxpKSx0aGlzLnNsb3RzPWZ1bmN0aW9uKCl7cmV0dXJuIGMuJHNsb3RzfHx1ZShlLnNjb3BlZFNsb3RzLGMuJHNsb3RzPXNlKG8saSkpLGMuJHNsb3RzfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyxcInNjb3BlZFNsb3RzXCIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHVlKGUuc2NvcGVkU2xvdHMsdGhpcy5zbG90cygpKX19KSxsJiYodGhpcy4kb3B0aW9ucz11LHRoaXMuJHNsb3RzPXRoaXMuc2xvdHMoKSx0aGlzLiRzY29wZWRTbG90cz11ZShlLnNjb3BlZFNsb3RzLHRoaXMuJHNsb3RzKSksdS5fc2NvcGVJZD90aGlzLl9jPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPUxlKHMsdCxlLG4scixmKTtyZXR1cm4gbyYmIUFycmF5LmlzQXJyYXkobykmJihvLmZuU2NvcGVJZD11Ll9zY29wZUlkLG8uZm5Db250ZXh0PWkpLG99OnRoaXMuX2M9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIExlKHMsdCxlLG4scixmKX19ZnVuY3Rpb24gU2UodCxlLG4scixvKXt2YXIgaT12dCh0KTtyZXR1cm4gaS5mbkNvbnRleHQ9bixpLmZuT3B0aW9ucz1yLGUuc2xvdCYmKChpLmRhdGF8fChpLmRhdGE9e30pKS5zbG90PWUuc2xvdCksaX1mdW5jdGlvbiBFZSh0LGUpe2Zvcih2YXIgbiBpbiBlKXRbXyhuKV09ZVtuXX1PZShrZS5wcm90b3R5cGUpO3ZhciBqZT17aW5pdDpmdW5jdGlvbih0LGUpe2lmKHQuY29tcG9uZW50SW5zdGFuY2UmJiF0LmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCYmdC5kYXRhLmtlZXBBbGl2ZSl7dmFyIHI9dDtqZS5wcmVwYXRjaChyLHIpfWVsc2V7KHQuY29tcG9uZW50SW5zdGFuY2U9ZnVuY3Rpb24odCxlKXt2YXIgcj17X2lzQ29tcG9uZW50OiEwLF9wYXJlbnRWbm9kZTp0LHBhcmVudDplfSxvPXQuZGF0YS5pbmxpbmVUZW1wbGF0ZTtuKG8pJiYoci5yZW5kZXI9by5yZW5kZXIsci5zdGF0aWNSZW5kZXJGbnM9by5zdGF0aWNSZW5kZXJGbnMpO3JldHVybiBuZXcgdC5jb21wb25lbnRPcHRpb25zLkN0b3Iocil9KHQscWUpKS4kbW91bnQoZT90LmVsbTp2b2lkIDAsZSl9fSxwcmVwYXRjaDpmdW5jdGlvbihlLG4pe3ZhciByPW4uY29tcG9uZW50T3B0aW9uczshZnVuY3Rpb24oZSxuLHIsbyxpKXt2YXIgYT1vLmRhdGEuc2NvcGVkU2xvdHMscz1lLiRzY29wZWRTbG90cyxjPSEhKGEmJiFhLiRzdGFibGV8fHMhPT10JiYhcy4kc3RhYmxlfHxhJiZlLiRzY29wZWRTbG90cy4ka2V5IT09YS4ka2V5KSx1PSEhKGl8fGUuJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVufHxjKTtlLiRvcHRpb25zLl9wYXJlbnRWbm9kZT1vLGUuJHZub2RlPW8sZS5fdm5vZGUmJihlLl92bm9kZS5wYXJlbnQ9byk7aWYoZS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW49aSxlLiRhdHRycz1vLmRhdGEuYXR0cnN8fHQsZS4kbGlzdGVuZXJzPXJ8fHQsbiYmZS4kb3B0aW9ucy5wcm9wcyl7X3QoITEpO2Zvcih2YXIgbD1lLl9wcm9wcyxmPWUuJG9wdGlvbnMuX3Byb3BLZXlzfHxbXSxwPTA7cDxmLmxlbmd0aDtwKyspe3ZhciBkPWZbcF0sdj1lLiRvcHRpb25zLnByb3BzO2xbZF09RHQoZCx2LG4sZSl9X3QoITApLGUuJG9wdGlvbnMucHJvcHNEYXRhPW59cj1yfHx0O3ZhciBoPWUuJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztlLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM9cixXZShlLHIsaCksdSYmKGUuJHNsb3RzPXNlKGksby5jb250ZXh0KSxlLiRmb3JjZVVwZGF0ZSgpKX0obi5jb21wb25lbnRJbnN0YW5jZT1lLmNvbXBvbmVudEluc3RhbmNlLHIucHJvcHNEYXRhLHIubGlzdGVuZXJzLG4sci5jaGlsZHJlbil9LGluc2VydDpmdW5jdGlvbih0KXt2YXIgZSxuPXQuY29udGV4dCxyPXQuY29tcG9uZW50SW5zdGFuY2U7ci5faXNNb3VudGVkfHwoci5faXNNb3VudGVkPSEwLFplKHIsXCJtb3VudGVkXCIpKSx0LmRhdGEua2VlcEFsaXZlJiYobi5faXNNb3VudGVkPygoZT1yKS5faW5hY3RpdmU9ITEsUWUucHVzaChlKSk6R2UociwhMCkpfSxkZXN0cm95OmZ1bmN0aW9uKHQpe3ZhciBlPXQuY29tcG9uZW50SW5zdGFuY2U7ZS5faXNEZXN0cm95ZWR8fCh0LmRhdGEua2VlcEFsaXZlP2Z1bmN0aW9uIHQoZSxuKXtpZihuJiYoZS5fZGlyZWN0SW5hY3RpdmU9ITAsWGUoZSkpKXJldHVybjtpZighZS5faW5hY3RpdmUpe2UuX2luYWN0aXZlPSEwO2Zvcih2YXIgcj0wO3I8ZS4kY2hpbGRyZW4ubGVuZ3RoO3IrKyl0KGUuJGNoaWxkcmVuW3JdKTtaZShlLFwiZGVhY3RpdmF0ZWRcIil9fShlLCEwKTplLiRkZXN0cm95KCkpfX0sVGU9T2JqZWN0LmtleXMoamUpO2Z1bmN0aW9uIEllKG8sYSxzLGMsbCl7aWYoIWUobykpe3ZhciBmPXMuJG9wdGlvbnMuX2Jhc2U7aWYoaShvKSYmKG89Zi5leHRlbmQobykpLFwiZnVuY3Rpb25cIj09dHlwZW9mIG8pe3ZhciBwO2lmKGUoby5jaWQpJiZ2b2lkIDA9PT0obz1mdW5jdGlvbih0LG8pe2lmKHIodC5lcnJvcikmJm4odC5lcnJvckNvbXApKXJldHVybiB0LmVycm9yQ29tcDtpZihuKHQucmVzb2x2ZWQpKXJldHVybiB0LnJlc29sdmVkO3ZhciBhPUZlO2EmJm4odC5vd25lcnMpJiYtMT09PXQub3duZXJzLmluZGV4T2YoYSkmJnQub3duZXJzLnB1c2goYSk7aWYocih0LmxvYWRpbmcpJiZuKHQubG9hZGluZ0NvbXApKXJldHVybiB0LmxvYWRpbmdDb21wO2lmKGEmJiFuKHQub3duZXJzKSl7dmFyIHM9dC5vd25lcnM9W2FdLGM9ITAsbD1udWxsLGY9bnVsbDthLiRvbihcImhvb2s6ZGVzdHJveWVkXCIsZnVuY3Rpb24oKXtyZXR1cm4gdihzLGEpfSk7dmFyIHA9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPTAsbj1zLmxlbmd0aDtlPG47ZSsrKXNbZV0uJGZvcmNlVXBkYXRlKCk7dCYmKHMubGVuZ3RoPTAsbnVsbCE9PWwmJihjbGVhclRpbWVvdXQobCksbD1udWxsKSxudWxsIT09ZiYmKGNsZWFyVGltZW91dChmKSxmPW51bGwpKX0sZD1JKGZ1bmN0aW9uKGUpe3QucmVzb2x2ZWQ9UmUoZSxvKSxjP3MubGVuZ3RoPTA6cCghMCl9KSxoPUkoZnVuY3Rpb24oZSl7bih0LmVycm9yQ29tcCkmJih0LmVycm9yPSEwLHAoITApKX0pLG09dChkLGgpO3JldHVybiBpKG0pJiYodShtKT9lKHQucmVzb2x2ZWQpJiZtLnRoZW4oZCxoKTp1KG0uY29tcG9uZW50KSYmKG0uY29tcG9uZW50LnRoZW4oZCxoKSxuKG0uZXJyb3IpJiYodC5lcnJvckNvbXA9UmUobS5lcnJvcixvKSksbihtLmxvYWRpbmcpJiYodC5sb2FkaW5nQ29tcD1SZShtLmxvYWRpbmcsbyksMD09PW0uZGVsYXk/dC5sb2FkaW5nPSEwOmw9c2V0VGltZW91dChmdW5jdGlvbigpe2w9bnVsbCxlKHQucmVzb2x2ZWQpJiZlKHQuZXJyb3IpJiYodC5sb2FkaW5nPSEwLHAoITEpKX0sbS5kZWxheXx8MjAwKSksbihtLnRpbWVvdXQpJiYoZj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zj1udWxsLGUodC5yZXNvbHZlZCkmJmgobnVsbCl9LG0udGltZW91dCkpKSksYz0hMSx0LmxvYWRpbmc/dC5sb2FkaW5nQ29tcDp0LnJlc29sdmVkfX0ocD1vLGYpKSlyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt2YXIgaT1wdCgpO3JldHVybiBpLmFzeW5jRmFjdG9yeT10LGkuYXN5bmNNZXRhPXtkYXRhOmUsY29udGV4dDpuLGNoaWxkcmVuOnIsdGFnOm99LGl9KHAsYSxzLGMsbCk7YT1hfHx7fSxfbihvKSxuKGEubW9kZWwpJiZmdW5jdGlvbih0LGUpe3ZhciByPXQubW9kZWwmJnQubW9kZWwucHJvcHx8XCJ2YWx1ZVwiLG89dC5tb2RlbCYmdC5tb2RlbC5ldmVudHx8XCJpbnB1dFwiOyhlLmF0dHJzfHwoZS5hdHRycz17fSkpW3JdPWUubW9kZWwudmFsdWU7dmFyIGk9ZS5vbnx8KGUub249e30pLGE9aVtvXSxzPWUubW9kZWwuY2FsbGJhY2s7bihhKT8oQXJyYXkuaXNBcnJheShhKT8tMT09PWEuaW5kZXhPZihzKTphIT09cykmJihpW29dPVtzXS5jb25jYXQoYSkpOmlbb109c30oby5vcHRpb25zLGEpO3ZhciBkPWZ1bmN0aW9uKHQscixvKXt2YXIgaT1yLm9wdGlvbnMucHJvcHM7aWYoIWUoaSkpe3ZhciBhPXt9LHM9dC5hdHRycyxjPXQucHJvcHM7aWYobihzKXx8bihjKSlmb3IodmFyIHUgaW4gaSl7dmFyIGw9JCh1KTtyZShhLGMsdSxsLCEwKXx8cmUoYSxzLHUsbCwhMSl9cmV0dXJuIGF9fShhLG8pO2lmKHIoby5vcHRpb25zLmZ1bmN0aW9uYWwpKXJldHVybiBmdW5jdGlvbihlLHIsbyxpLGEpe3ZhciBzPWUub3B0aW9ucyxjPXt9LHU9cy5wcm9wcztpZihuKHUpKWZvcih2YXIgbCBpbiB1KWNbbF09RHQobCx1LHJ8fHQpO2Vsc2UgbihvLmF0dHJzKSYmRWUoYyxvLmF0dHJzKSxuKG8ucHJvcHMpJiZFZShjLG8ucHJvcHMpO3ZhciBmPW5ldyBrZShvLGMsYSxpLGUpLHA9cy5yZW5kZXIuY2FsbChudWxsLGYuX2MsZik7aWYocCBpbnN0YW5jZW9mIGx0KXJldHVybiBTZShwLG8sZi5wYXJlbnQscyk7aWYoQXJyYXkuaXNBcnJheShwKSl7Zm9yKHZhciBkPW9lKHApfHxbXSx2PW5ldyBBcnJheShkLmxlbmd0aCksaD0wO2g8ZC5sZW5ndGg7aCsrKXZbaF09U2UoZFtoXSxvLGYucGFyZW50LHMpO3JldHVybiB2fX0obyxkLGEscyxjKTt2YXIgaD1hLm9uO2lmKGEub249YS5uYXRpdmVPbixyKG8ub3B0aW9ucy5hYnN0cmFjdCkpe3ZhciBtPWEuc2xvdDthPXt9LG0mJihhLnNsb3Q9bSl9IWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10Lmhvb2t8fCh0Lmhvb2s9e30pLG49MDtuPFRlLmxlbmd0aDtuKyspe3ZhciByPVRlW25dLG89ZVtyXSxpPWplW3JdO289PT1pfHxvJiZvLl9tZXJnZWR8fChlW3JdPW8/RGUoaSxvKTppKX19KGEpO3ZhciB5PW8ub3B0aW9ucy5uYW1lfHxsO3JldHVybiBuZXcgbHQoXCJ2dWUtY29tcG9uZW50LVwiK28uY2lkKyh5P1wiLVwiK3k6XCJcIiksYSx2b2lkIDAsdm9pZCAwLHZvaWQgMCxzLHtDdG9yOm8scHJvcHNEYXRhOmQsbGlzdGVuZXJzOmgsdGFnOmwsY2hpbGRyZW46Y30scCl9fX1mdW5jdGlvbiBEZSh0LGUpe3ZhciBuPWZ1bmN0aW9uKG4scil7dChuLHIpLGUobixyKX07cmV0dXJuIG4uX21lcmdlZD0hMCxufXZhciBOZT0xLFBlPTI7ZnVuY3Rpb24gTGUodCxhLHMsYyx1LGwpe3JldHVybihBcnJheS5pc0FycmF5KHMpfHxvKHMpKSYmKHU9YyxjPXMscz12b2lkIDApLHIobCkmJih1PVBlKSxmdW5jdGlvbih0LG8sYSxzLGMpe2lmKG4oYSkmJm4oYS5fX29iX18pKXJldHVybiBwdCgpO24oYSkmJm4oYS5pcykmJihvPWEuaXMpO2lmKCFvKXJldHVybiBwdCgpO0FycmF5LmlzQXJyYXkocykmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHNbMF0mJigoYT1hfHx7fSkuc2NvcGVkU2xvdHM9e2RlZmF1bHQ6c1swXX0scy5sZW5ndGg9MCk7Yz09PVBlP3M9b2Uocyk6Yz09PU5lJiYocz1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoO2UrKylpZihBcnJheS5pc0FycmF5KHRbZV0pKXJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLHQpO3JldHVybiB0fShzKSk7dmFyIHUsbDtpZihcInN0cmluZ1wiPT10eXBlb2Ygbyl7dmFyIGY7bD10LiR2bm9kZSYmdC4kdm5vZGUubnN8fEwuZ2V0VGFnTmFtZXNwYWNlKG8pLHU9TC5pc1Jlc2VydmVkVGFnKG8pP25ldyBsdChMLnBhcnNlUGxhdGZvcm1UYWdOYW1lKG8pLGEscyx2b2lkIDAsdm9pZCAwLHQpOmEmJmEucHJlfHwhbihmPUl0KHQuJG9wdGlvbnMsXCJjb21wb25lbnRzXCIsbykpP25ldyBsdChvLGEscyx2b2lkIDAsdm9pZCAwLHQpOkllKGYsYSx0LHMsbyl9ZWxzZSB1PUllKG8sYSx0LHMpO3JldHVybiBBcnJheS5pc0FycmF5KHUpP3U6bih1KT8obihsKSYmZnVuY3Rpb24gdChvLGksYSl7by5ucz1pO1wiZm9yZWlnbk9iamVjdFwiPT09by50YWcmJihpPXZvaWQgMCxhPSEwKTtpZihuKG8uY2hpbGRyZW4pKWZvcih2YXIgcz0wLGM9by5jaGlsZHJlbi5sZW5ndGg7czxjO3MrKyl7dmFyIHU9by5jaGlsZHJlbltzXTtuKHUudGFnKSYmKGUodS5ucyl8fHIoYSkmJlwic3ZnXCIhPT11LnRhZykmJnQodSxpLGEpfX0odSxsKSxuKGEpJiZmdW5jdGlvbih0KXtpKHQuc3R5bGUpJiZRdCh0LnN0eWxlKTtpKHQuY2xhc3MpJiZRdCh0LmNsYXNzKX0oYSksdSk6cHQoKX0odCxhLHMsYyx1KX12YXIgTWUsRmU9bnVsbDtmdW5jdGlvbiBSZSh0LGUpe3JldHVybih0Ll9fZXNNb2R1bGV8fHJ0JiZcIk1vZHVsZVwiPT09dFtTeW1ib2wudG9TdHJpbmdUYWddKSYmKHQ9dC5kZWZhdWx0KSxpKHQpP2UuZXh0ZW5kKHQpOnR9ZnVuY3Rpb24gVWUodCl7cmV0dXJuIHQuaXNDb21tZW50JiZ0LmFzeW5jRmFjdG9yeX1mdW5jdGlvbiBIZSh0KXtpZihBcnJheS5pc0FycmF5KHQpKWZvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgcj10W2VdO2lmKG4ocikmJihuKHIuY29tcG9uZW50T3B0aW9ucyl8fFVlKHIpKSlyZXR1cm4gcn19ZnVuY3Rpb24gQmUodCxlKXtNZS4kb24odCxlKX1mdW5jdGlvbiBWZSh0LGUpe01lLiRvZmYodCxlKX1mdW5jdGlvbiB6ZSh0LGUpe3ZhciBuPU1lO3JldHVybiBmdW5jdGlvbiByKCl7bnVsbCE9PWUuYXBwbHkobnVsbCxhcmd1bWVudHMpJiZuLiRvZmYodCxyKX19ZnVuY3Rpb24gV2UodCxlLG4pe01lPXQsZWUoZSxufHx7fSxCZSxWZSx6ZSx0KSxNZT12b2lkIDB9dmFyIHFlPW51bGw7ZnVuY3Rpb24gS2UodCl7dmFyIGU9cWU7cmV0dXJuIHFlPXQsZnVuY3Rpb24oKXtxZT1lfX1mdW5jdGlvbiBYZSh0KXtmb3IoO3QmJih0PXQuJHBhcmVudCk7KWlmKHQuX2luYWN0aXZlKXJldHVybiEwO3JldHVybiExfWZ1bmN0aW9uIEdlKHQsZSl7aWYoZSl7aWYodC5fZGlyZWN0SW5hY3RpdmU9ITEsWGUodCkpcmV0dXJufWVsc2UgaWYodC5fZGlyZWN0SW5hY3RpdmUpcmV0dXJuO2lmKHQuX2luYWN0aXZlfHxudWxsPT09dC5faW5hY3RpdmUpe3QuX2luYWN0aXZlPSExO2Zvcih2YXIgbj0wO248dC4kY2hpbGRyZW4ubGVuZ3RoO24rKylHZSh0LiRjaGlsZHJlbltuXSk7WmUodCxcImFjdGl2YXRlZFwiKX19ZnVuY3Rpb24gWmUodCxlKXtjdCgpO3ZhciBuPXQuJG9wdGlvbnNbZV0scj1lK1wiIGhvb2tcIjtpZihuKWZvcih2YXIgbz0wLGk9bi5sZW5ndGg7bzxpO28rKylGdChuW29dLHQsbnVsbCx0LHIpO3QuX2hhc0hvb2tFdmVudCYmdC4kZW1pdChcImhvb2s6XCIrZSksdXQoKX12YXIgSmU9W10sUWU9W10sWWU9e30sdG49ITEsZW49ITEsbm49MDt2YXIgcm49MCxvbj1EYXRlLm5vdztpZihIJiYhVyl7dmFyIGFuPXdpbmRvdy5wZXJmb3JtYW5jZTthbiYmXCJmdW5jdGlvblwiPT10eXBlb2YgYW4ubm93JiZvbigpPmRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiRXZlbnRcIikudGltZVN0YW1wJiYob249ZnVuY3Rpb24oKXtyZXR1cm4gYW4ubm93KCl9KX1mdW5jdGlvbiBzbigpe3ZhciB0LGU7Zm9yKHJuPW9uKCksZW49ITAsSmUuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0LmlkLWUuaWR9KSxubj0wO25uPEplLmxlbmd0aDtubisrKSh0PUplW25uXSkuYmVmb3JlJiZ0LmJlZm9yZSgpLGU9dC5pZCxZZVtlXT1udWxsLHQucnVuKCk7dmFyIG49UWUuc2xpY2UoKSxyPUplLnNsaWNlKCk7bm49SmUubGVuZ3RoPVFlLmxlbmd0aD0wLFllPXt9LHRuPWVuPSExLGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXRbZV0uX2luYWN0aXZlPSEwLEdlKHRbZV0sITApfShuKSxmdW5jdGlvbih0KXt2YXIgZT10Lmxlbmd0aDtmb3IoO2UtLTspe3ZhciBuPXRbZV0scj1uLnZtO3IuX3dhdGNoZXI9PT1uJiZyLl9pc01vdW50ZWQmJiFyLl9pc0Rlc3Ryb3llZCYmWmUocixcInVwZGF0ZWRcIil9fShyKSx0dCYmTC5kZXZ0b29scyYmdHQuZW1pdChcImZsdXNoXCIpfXZhciBjbj0wLHVuPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52bT10LG8mJih0Ll93YXRjaGVyPXRoaXMpLHQuX3dhdGNoZXJzLnB1c2godGhpcykscj8odGhpcy5kZWVwPSEhci5kZWVwLHRoaXMudXNlcj0hIXIudXNlcix0aGlzLmxhenk9ISFyLmxhenksdGhpcy5zeW5jPSEhci5zeW5jLHRoaXMuYmVmb3JlPXIuYmVmb3JlKTp0aGlzLmRlZXA9dGhpcy51c2VyPXRoaXMubGF6eT10aGlzLnN5bmM9ITEsdGhpcy5jYj1uLHRoaXMuaWQ9Kytjbix0aGlzLmFjdGl2ZT0hMCx0aGlzLmRpcnR5PXRoaXMubGF6eSx0aGlzLmRlcHM9W10sdGhpcy5uZXdEZXBzPVtdLHRoaXMuZGVwSWRzPW5ldyBudCx0aGlzLm5ld0RlcElkcz1uZXcgbnQsdGhpcy5leHByZXNzaW9uPVwiXCIsXCJmdW5jdGlvblwiPT10eXBlb2YgZT90aGlzLmdldHRlcj1lOih0aGlzLmdldHRlcj1mdW5jdGlvbih0KXtpZighRi50ZXN0KHQpKXt2YXIgZT10LnNwbGl0KFwiLlwiKTtyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe2lmKCF0KXJldHVybjt0PXRbZVtuXV19cmV0dXJuIHR9fX0oZSksdGhpcy5nZXR0ZXJ8fCh0aGlzLmdldHRlcj1rKSksdGhpcy52YWx1ZT10aGlzLmxhenk/dm9pZCAwOnRoaXMuZ2V0KCl9O3VuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt2YXIgdDtjdCh0aGlzKTt2YXIgZT10aGlzLnZtO3RyeXt0PXRoaXMuZ2V0dGVyLmNhbGwoZSxlKX1jYXRjaCh0KXtpZighdGhpcy51c2VyKXRocm93IHQ7TXQodCxlLCdnZXR0ZXIgZm9yIHdhdGNoZXIgXCInK3RoaXMuZXhwcmVzc2lvbisnXCInKX1maW5hbGx5e3RoaXMuZGVlcCYmUXQodCksdXQoKSx0aGlzLmNsZWFudXBEZXBzKCl9cmV0dXJuIHR9LHVuLnByb3RvdHlwZS5hZGREZXA9ZnVuY3Rpb24odCl7dmFyIGU9dC5pZDt0aGlzLm5ld0RlcElkcy5oYXMoZSl8fCh0aGlzLm5ld0RlcElkcy5hZGQoZSksdGhpcy5uZXdEZXBzLnB1c2godCksdGhpcy5kZXBJZHMuaGFzKGUpfHx0LmFkZFN1Yih0aGlzKSl9LHVuLnByb3RvdHlwZS5jbGVhbnVwRGVwcz1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmRlcHMubGVuZ3RoO3QtLTspe3ZhciBlPXRoaXMuZGVwc1t0XTt0aGlzLm5ld0RlcElkcy5oYXMoZS5pZCl8fGUucmVtb3ZlU3ViKHRoaXMpfXZhciBuPXRoaXMuZGVwSWRzO3RoaXMuZGVwSWRzPXRoaXMubmV3RGVwSWRzLHRoaXMubmV3RGVwSWRzPW4sdGhpcy5uZXdEZXBJZHMuY2xlYXIoKSxuPXRoaXMuZGVwcyx0aGlzLmRlcHM9dGhpcy5uZXdEZXBzLHRoaXMubmV3RGVwcz1uLHRoaXMubmV3RGVwcy5sZW5ndGg9MH0sdW4ucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3RoaXMubGF6eT90aGlzLmRpcnR5PSEwOnRoaXMuc3luYz90aGlzLnJ1bigpOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaWQ7aWYobnVsbD09WWVbZV0pe2lmKFllW2VdPSEwLGVuKXtmb3IodmFyIG49SmUubGVuZ3RoLTE7bj5ubiYmSmVbbl0uaWQ+dC5pZDspbi0tO0plLnNwbGljZShuKzEsMCx0KX1lbHNlIEplLnB1c2godCk7dG58fCh0bj0hMCxadChzbikpfX0odGhpcyl9LHVuLnByb3RvdHlwZS5ydW49ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZSl7dmFyIHQ9dGhpcy5nZXQoKTtpZih0IT09dGhpcy52YWx1ZXx8aSh0KXx8dGhpcy5kZWVwKXt2YXIgZT10aGlzLnZhbHVlO2lmKHRoaXMudmFsdWU9dCx0aGlzLnVzZXIpdHJ5e3RoaXMuY2IuY2FsbCh0aGlzLnZtLHQsZSl9Y2F0Y2godCl7TXQodCx0aGlzLnZtLCdjYWxsYmFjayBmb3Igd2F0Y2hlciBcIicrdGhpcy5leHByZXNzaW9uKydcIicpfWVsc2UgdGhpcy5jYi5jYWxsKHRoaXMudm0sdCxlKX19fSx1bi5wcm90b3R5cGUuZXZhbHVhdGU9ZnVuY3Rpb24oKXt0aGlzLnZhbHVlPXRoaXMuZ2V0KCksdGhpcy5kaXJ0eT0hMX0sdW4ucHJvdG90eXBlLmRlcGVuZD1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmRlcHMubGVuZ3RoO3QtLTspdGhpcy5kZXBzW3RdLmRlcGVuZCgpfSx1bi5wcm90b3R5cGUudGVhcmRvd249ZnVuY3Rpb24oKXtpZih0aGlzLmFjdGl2ZSl7dGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZHx8dih0aGlzLnZtLl93YXRjaGVycyx0aGlzKTtmb3IodmFyIHQ9dGhpcy5kZXBzLmxlbmd0aDt0LS07KXRoaXMuZGVwc1t0XS5yZW1vdmVTdWIodGhpcyk7dGhpcy5hY3RpdmU9ITF9fTt2YXIgbG49e2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDprLHNldDprfTtmdW5jdGlvbiBmbih0LGUsbil7bG4uZ2V0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXNbZV1bbl19LGxuLnNldD1mdW5jdGlvbih0KXt0aGlzW2VdW25dPXR9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG4sbG4pfWZ1bmN0aW9uIHBuKHQpe3QuX3dhdGNoZXJzPVtdO3ZhciBlPXQuJG9wdGlvbnM7ZS5wcm9wcyYmZnVuY3Rpb24odCxlKXt2YXIgbj10LiRvcHRpb25zLnByb3BzRGF0YXx8e30scj10Ll9wcm9wcz17fSxvPXQuJG9wdGlvbnMuX3Byb3BLZXlzPVtdO3QuJHBhcmVudCYmX3QoITEpO3ZhciBpPWZ1bmN0aW9uKGkpe28ucHVzaChpKTt2YXIgYT1EdChpLGUsbix0KTskdChyLGksYSksaSBpbiB0fHxmbih0LFwiX3Byb3BzXCIsaSl9O2Zvcih2YXIgYSBpbiBlKWkoYSk7X3QoITApfSh0LGUucHJvcHMpLGUubWV0aG9kcyYmZnVuY3Rpb24odCxlKXt0LiRvcHRpb25zLnByb3BzO2Zvcih2YXIgbiBpbiBlKXRbbl09XCJmdW5jdGlvblwiIT10eXBlb2YgZVtuXT9rOncoZVtuXSx0KX0odCxlLm1ldGhvZHMpLGUuZGF0YT9mdW5jdGlvbih0KXt2YXIgZT10LiRvcHRpb25zLmRhdGE7cyhlPXQuX2RhdGE9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9mdW5jdGlvbih0LGUpe2N0KCk7dHJ5e3JldHVybiB0LmNhbGwoZSxlKX1jYXRjaCh0KXtyZXR1cm4gTXQodCxlLFwiZGF0YSgpXCIpLHt9fWZpbmFsbHl7dXQoKX19KGUsdCk6ZXx8e30pfHwoZT17fSk7dmFyIG49T2JqZWN0LmtleXMoZSkscj10LiRvcHRpb25zLnByb3BzLG89KHQuJG9wdGlvbnMubWV0aG9kcyxuLmxlbmd0aCk7Zm9yKDtvLS07KXt2YXIgaT1uW29dO3ImJm0ocixpKXx8KGE9dm9pZCAwLDM2IT09KGE9KGkrXCJcIikuY2hhckNvZGVBdCgwKSkmJjk1IT09YSYmZm4odCxcIl9kYXRhXCIsaSkpfXZhciBhO0N0KGUsITApfSh0KTpDdCh0Ll9kYXRhPXt9LCEwKSxlLmNvbXB1dGVkJiZmdW5jdGlvbih0LGUpe3ZhciBuPXQuX2NvbXB1dGVkV2F0Y2hlcnM9T2JqZWN0LmNyZWF0ZShudWxsKSxyPVkoKTtmb3IodmFyIG8gaW4gZSl7dmFyIGk9ZVtvXSxhPVwiZnVuY3Rpb25cIj09dHlwZW9mIGk/aTppLmdldDtyfHwobltvXT1uZXcgdW4odCxhfHxrLGssZG4pKSxvIGluIHR8fHZuKHQsbyxpKX19KHQsZS5jb21wdXRlZCksZS53YXRjaCYmZS53YXRjaCE9PVomJmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpe3ZhciByPWVbbl07aWYoQXJyYXkuaXNBcnJheShyKSlmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKyl5bih0LG4scltvXSk7ZWxzZSB5bih0LG4scil9fSh0LGUud2F0Y2gpfXZhciBkbj17bGF6eTohMH07ZnVuY3Rpb24gdm4odCxlLG4pe3ZhciByPSFZKCk7XCJmdW5jdGlvblwiPT10eXBlb2Ygbj8obG4uZ2V0PXI/aG4oZSk6bW4obiksbG4uc2V0PWspOihsbi5nZXQ9bi5nZXQ/ciYmITEhPT1uLmNhY2hlP2huKGUpOm1uKG4uZ2V0KTprLGxuLnNldD1uLnNldHx8ayksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSxsbil9ZnVuY3Rpb24gaG4odCl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5fY29tcHV0ZWRXYXRjaGVycyYmdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1t0XTtpZihlKXJldHVybiBlLmRpcnR5JiZlLmV2YWx1YXRlKCksYXQudGFyZ2V0JiZlLmRlcGVuZCgpLGUudmFsdWV9fWZ1bmN0aW9uIG1uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0LmNhbGwodGhpcyx0aGlzKX19ZnVuY3Rpb24geW4odCxlLG4scil7cmV0dXJuIHMobikmJihyPW4sbj1uLmhhbmRsZXIpLFwic3RyaW5nXCI9PXR5cGVvZiBuJiYobj10W25dKSx0LiR3YXRjaChlLG4scil9dmFyIGduPTA7ZnVuY3Rpb24gX24odCl7dmFyIGU9dC5vcHRpb25zO2lmKHQuc3VwZXIpe3ZhciBuPV9uKHQuc3VwZXIpO2lmKG4hPT10LnN1cGVyT3B0aW9ucyl7dC5zdXBlck9wdGlvbnM9bjt2YXIgcj1mdW5jdGlvbih0KXt2YXIgZSxuPXQub3B0aW9ucyxyPXQuc2VhbGVkT3B0aW9ucztmb3IodmFyIG8gaW4gbiluW29dIT09cltvXSYmKGV8fChlPXt9KSxlW29dPW5bb10pO3JldHVybiBlfSh0KTtyJiZ4KHQuZXh0ZW5kT3B0aW9ucyxyKSwoZT10Lm9wdGlvbnM9VHQobix0LmV4dGVuZE9wdGlvbnMpKS5uYW1lJiYoZS5jb21wb25lbnRzW2UubmFtZV09dCl9fXJldHVybiBlfWZ1bmN0aW9uIGJuKHQpe3RoaXMuX2luaXQodCl9ZnVuY3Rpb24gQ24odCl7dC5jaWQ9MDt2YXIgZT0xO3QuZXh0ZW5kPWZ1bmN0aW9uKHQpe3Q9dHx8e307dmFyIG49dGhpcyxyPW4uY2lkLG89dC5fQ3Rvcnx8KHQuX0N0b3I9e30pO2lmKG9bcl0pcmV0dXJuIG9bcl07dmFyIGk9dC5uYW1lfHxuLm9wdGlvbnMubmFtZSxhPWZ1bmN0aW9uKHQpe3RoaXMuX2luaXQodCl9O3JldHVybihhLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKG4ucHJvdG90eXBlKSkuY29uc3RydWN0b3I9YSxhLmNpZD1lKyssYS5vcHRpb25zPVR0KG4ub3B0aW9ucyx0KSxhLnN1cGVyPW4sYS5vcHRpb25zLnByb3BzJiZmdW5jdGlvbih0KXt2YXIgZT10Lm9wdGlvbnMucHJvcHM7Zm9yKHZhciBuIGluIGUpZm4odC5wcm90b3R5cGUsXCJfcHJvcHNcIixuKX0oYSksYS5vcHRpb25zLmNvbXB1dGVkJiZmdW5jdGlvbih0KXt2YXIgZT10Lm9wdGlvbnMuY29tcHV0ZWQ7Zm9yKHZhciBuIGluIGUpdm4odC5wcm90b3R5cGUsbixlW25dKX0oYSksYS5leHRlbmQ9bi5leHRlbmQsYS5taXhpbj1uLm1peGluLGEudXNlPW4udXNlLE4uZm9yRWFjaChmdW5jdGlvbih0KXthW3RdPW5bdF19KSxpJiYoYS5vcHRpb25zLmNvbXBvbmVudHNbaV09YSksYS5zdXBlck9wdGlvbnM9bi5vcHRpb25zLGEuZXh0ZW5kT3B0aW9ucz10LGEuc2VhbGVkT3B0aW9ucz14KHt9LGEub3B0aW9ucyksb1tyXT1hLGF9fWZ1bmN0aW9uICRuKHQpe3JldHVybiB0JiYodC5DdG9yLm9wdGlvbnMubmFtZXx8dC50YWcpfWZ1bmN0aW9uIHduKHQsZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/dC5pbmRleE9mKGUpPi0xOlwic3RyaW5nXCI9PXR5cGVvZiB0P3Quc3BsaXQoXCIsXCIpLmluZGV4T2YoZSk+LTE6KG49dCxcIltvYmplY3QgUmVnRXhwXVwiPT09YS5jYWxsKG4pJiZ0LnRlc3QoZSkpO3ZhciBufWZ1bmN0aW9uIEFuKHQsZSl7dmFyIG49dC5jYWNoZSxyPXQua2V5cyxvPXQuX3Zub2RlO2Zvcih2YXIgaSBpbiBuKXt2YXIgYT1uW2ldO2lmKGEpe3ZhciBzPSRuKGEuY29tcG9uZW50T3B0aW9ucyk7cyYmIWUocykmJnhuKG4saSxyLG8pfX19ZnVuY3Rpb24geG4odCxlLG4scil7dmFyIG89dFtlXTshb3x8ciYmby50YWc9PT1yLnRhZ3x8by5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpLHRbZV09bnVsbCx2KG4sZSl9IWZ1bmN0aW9uKGUpe2UucHJvdG90eXBlLl9pbml0PWZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7bi5fdWlkPWduKyssbi5faXNWdWU9ITAsZSYmZS5faXNDb21wb25lbnQ/ZnVuY3Rpb24odCxlKXt2YXIgbj10LiRvcHRpb25zPU9iamVjdC5jcmVhdGUodC5jb25zdHJ1Y3Rvci5vcHRpb25zKSxyPWUuX3BhcmVudFZub2RlO24ucGFyZW50PWUucGFyZW50LG4uX3BhcmVudFZub2RlPXI7dmFyIG89ci5jb21wb25lbnRPcHRpb25zO24ucHJvcHNEYXRhPW8ucHJvcHNEYXRhLG4uX3BhcmVudExpc3RlbmVycz1vLmxpc3RlbmVycyxuLl9yZW5kZXJDaGlsZHJlbj1vLmNoaWxkcmVuLG4uX2NvbXBvbmVudFRhZz1vLnRhZyxlLnJlbmRlciYmKG4ucmVuZGVyPWUucmVuZGVyLG4uc3RhdGljUmVuZGVyRm5zPWUuc3RhdGljUmVuZGVyRm5zKX0obixlKTpuLiRvcHRpb25zPVR0KF9uKG4uY29uc3RydWN0b3IpLGV8fHt9LG4pLG4uX3JlbmRlclByb3h5PW4sbi5fc2VsZj1uLGZ1bmN0aW9uKHQpe3ZhciBlPXQuJG9wdGlvbnMsbj1lLnBhcmVudDtpZihuJiYhZS5hYnN0cmFjdCl7Zm9yKDtuLiRvcHRpb25zLmFic3RyYWN0JiZuLiRwYXJlbnQ7KW49bi4kcGFyZW50O24uJGNoaWxkcmVuLnB1c2godCl9dC4kcGFyZW50PW4sdC4kcm9vdD1uP24uJHJvb3Q6dCx0LiRjaGlsZHJlbj1bXSx0LiRyZWZzPXt9LHQuX3dhdGNoZXI9bnVsbCx0Ll9pbmFjdGl2ZT1udWxsLHQuX2RpcmVjdEluYWN0aXZlPSExLHQuX2lzTW91bnRlZD0hMSx0Ll9pc0Rlc3Ryb3llZD0hMSx0Ll9pc0JlaW5nRGVzdHJveWVkPSExfShuKSxmdW5jdGlvbih0KXt0Ll9ldmVudHM9T2JqZWN0LmNyZWF0ZShudWxsKSx0Ll9oYXNIb29rRXZlbnQ9ITE7dmFyIGU9dC4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO2UmJldlKHQsZSl9KG4pLGZ1bmN0aW9uKGUpe2UuX3Zub2RlPW51bGwsZS5fc3RhdGljVHJlZXM9bnVsbDt2YXIgbj1lLiRvcHRpb25zLHI9ZS4kdm5vZGU9bi5fcGFyZW50Vm5vZGUsbz1yJiZyLmNvbnRleHQ7ZS4kc2xvdHM9c2Uobi5fcmVuZGVyQ2hpbGRyZW4sbyksZS4kc2NvcGVkU2xvdHM9dCxlLl9jPWZ1bmN0aW9uKHQsbixyLG8pe3JldHVybiBMZShlLHQsbixyLG8sITEpfSxlLiRjcmVhdGVFbGVtZW50PWZ1bmN0aW9uKHQsbixyLG8pe3JldHVybiBMZShlLHQsbixyLG8sITApfTt2YXIgaT1yJiZyLmRhdGE7JHQoZSxcIiRhdHRyc1wiLGkmJmkuYXR0cnN8fHQsbnVsbCwhMCksJHQoZSxcIiRsaXN0ZW5lcnNcIixuLl9wYXJlbnRMaXN0ZW5lcnN8fHQsbnVsbCwhMCl9KG4pLFplKG4sXCJiZWZvcmVDcmVhdGVcIiksZnVuY3Rpb24odCl7dmFyIGU9YWUodC4kb3B0aW9ucy5pbmplY3QsdCk7ZSYmKF90KCExKSxPYmplY3Qua2V5cyhlKS5mb3JFYWNoKGZ1bmN0aW9uKG4peyR0KHQsbixlW25dKX0pLF90KCEwKSl9KG4pLHBuKG4pLGZ1bmN0aW9uKHQpe3ZhciBlPXQuJG9wdGlvbnMucHJvdmlkZTtlJiYodC5fcHJvdmlkZWQ9XCJmdW5jdGlvblwiPT10eXBlb2YgZT9lLmNhbGwodCk6ZSl9KG4pLFplKG4sXCJjcmVhdGVkXCIpLG4uJG9wdGlvbnMuZWwmJm4uJG1vdW50KG4uJG9wdGlvbnMuZWwpfX0oYm4pLGZ1bmN0aW9uKHQpe3ZhciBlPXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fZGF0YX19LG49e2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9wcm9wc319O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcIiRkYXRhXCIsZSksT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiJHByb3BzXCIsbiksdC5wcm90b3R5cGUuJHNldD13dCx0LnByb3RvdHlwZS4kZGVsZXRlPUF0LHQucHJvdG90eXBlLiR3YXRjaD1mdW5jdGlvbih0LGUsbil7aWYocyhlKSlyZXR1cm4geW4odGhpcyx0LGUsbik7KG49bnx8e30pLnVzZXI9ITA7dmFyIHI9bmV3IHVuKHRoaXMsdCxlLG4pO2lmKG4uaW1tZWRpYXRlKXRyeXtlLmNhbGwodGhpcyxyLnZhbHVlKX1jYXRjaCh0KXtNdCh0LHRoaXMsJ2NhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcIicrci5leHByZXNzaW9uKydcIicpfXJldHVybiBmdW5jdGlvbigpe3IudGVhcmRvd24oKX19fShibiksZnVuY3Rpb24odCl7dmFyIGU9L15ob29rOi87dC5wcm90b3R5cGUuJG9uPWZ1bmN0aW9uKHQsbil7dmFyIHI9dGhpcztpZihBcnJheS5pc0FycmF5KHQpKWZvcih2YXIgbz0wLGk9dC5sZW5ndGg7bzxpO28rKylyLiRvbih0W29dLG4pO2Vsc2Uoci5fZXZlbnRzW3RdfHwoci5fZXZlbnRzW3RdPVtdKSkucHVzaChuKSxlLnRlc3QodCkmJihyLl9oYXNIb29rRXZlbnQ9ITApO3JldHVybiByfSx0LnByb3RvdHlwZS4kb25jZT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7ZnVuY3Rpb24gcigpe24uJG9mZih0LHIpLGUuYXBwbHkobixhcmd1bWVudHMpfXJldHVybiByLmZuPWUsbi4kb24odCxyKSxufSx0LnByb3RvdHlwZS4kb2ZmPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztpZighYXJndW1lbnRzLmxlbmd0aClyZXR1cm4gbi5fZXZlbnRzPU9iamVjdC5jcmVhdGUobnVsbCksbjtpZihBcnJheS5pc0FycmF5KHQpKXtmb3IodmFyIHI9MCxvPXQubGVuZ3RoO3I8bztyKyspbi4kb2ZmKHRbcl0sZSk7cmV0dXJuIG59dmFyIGksYT1uLl9ldmVudHNbdF07aWYoIWEpcmV0dXJuIG47aWYoIWUpcmV0dXJuIG4uX2V2ZW50c1t0XT1udWxsLG47Zm9yKHZhciBzPWEubGVuZ3RoO3MtLTspaWYoKGk9YVtzXSk9PT1lfHxpLmZuPT09ZSl7YS5zcGxpY2UocywxKTticmVha31yZXR1cm4gbn0sdC5wcm90b3R5cGUuJGVtaXQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5fZXZlbnRzW3RdO2lmKGUpe2U9ZS5sZW5ndGg+MT9BKGUpOmU7Zm9yKHZhciBuPUEoYXJndW1lbnRzLDEpLHI9J2V2ZW50IGhhbmRsZXIgZm9yIFwiJyt0KydcIicsbz0wLGk9ZS5sZW5ndGg7bzxpO28rKylGdChlW29dLHRoaXMsbix0aGlzLHIpfXJldHVybiB0aGlzfX0oYm4pLGZ1bmN0aW9uKHQpe3QucHJvdG90eXBlLl91cGRhdGU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLHI9bi4kZWwsbz1uLl92bm9kZSxpPUtlKG4pO24uX3Zub2RlPXQsbi4kZWw9bz9uLl9fcGF0Y2hfXyhvLHQpOm4uX19wYXRjaF9fKG4uJGVsLHQsZSwhMSksaSgpLHImJihyLl9fdnVlX189bnVsbCksbi4kZWwmJihuLiRlbC5fX3Z1ZV9fPW4pLG4uJHZub2RlJiZuLiRwYXJlbnQmJm4uJHZub2RlPT09bi4kcGFyZW50Ll92bm9kZSYmKG4uJHBhcmVudC4kZWw9bi4kZWwpfSx0LnByb3RvdHlwZS4kZm9yY2VVcGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl93YXRjaGVyJiZ0aGlzLl93YXRjaGVyLnVwZGF0ZSgpfSx0LnByb3RvdHlwZS4kZGVzdHJveT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoIXQuX2lzQmVpbmdEZXN0cm95ZWQpe1plKHQsXCJiZWZvcmVEZXN0cm95XCIpLHQuX2lzQmVpbmdEZXN0cm95ZWQ9ITA7dmFyIGU9dC4kcGFyZW50OyFlfHxlLl9pc0JlaW5nRGVzdHJveWVkfHx0LiRvcHRpb25zLmFic3RyYWN0fHx2KGUuJGNoaWxkcmVuLHQpLHQuX3dhdGNoZXImJnQuX3dhdGNoZXIudGVhcmRvd24oKTtmb3IodmFyIG49dC5fd2F0Y2hlcnMubGVuZ3RoO24tLTspdC5fd2F0Y2hlcnNbbl0udGVhcmRvd24oKTt0Ll9kYXRhLl9fb2JfXyYmdC5fZGF0YS5fX29iX18udm1Db3VudC0tLHQuX2lzRGVzdHJveWVkPSEwLHQuX19wYXRjaF9fKHQuX3Zub2RlLG51bGwpLFplKHQsXCJkZXN0cm95ZWRcIiksdC4kb2ZmKCksdC4kZWwmJih0LiRlbC5fX3Z1ZV9fPW51bGwpLHQuJHZub2RlJiYodC4kdm5vZGUucGFyZW50PW51bGwpfX19KGJuKSxmdW5jdGlvbih0KXtPZSh0LnByb3RvdHlwZSksdC5wcm90b3R5cGUuJG5leHRUaWNrPWZ1bmN0aW9uKHQpe3JldHVybiBadCh0LHRoaXMpfSx0LnByb3RvdHlwZS5fcmVuZGVyPWZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLG49ZS4kb3B0aW9ucyxyPW4ucmVuZGVyLG89bi5fcGFyZW50Vm5vZGU7byYmKGUuJHNjb3BlZFNsb3RzPXVlKG8uZGF0YS5zY29wZWRTbG90cyxlLiRzbG90cyxlLiRzY29wZWRTbG90cykpLGUuJHZub2RlPW87dHJ5e0ZlPWUsdD1yLmNhbGwoZS5fcmVuZGVyUHJveHksZS4kY3JlYXRlRWxlbWVudCl9Y2F0Y2gobil7TXQobixlLFwicmVuZGVyXCIpLHQ9ZS5fdm5vZGV9ZmluYWxseXtGZT1udWxsfXJldHVybiBBcnJheS5pc0FycmF5KHQpJiYxPT09dC5sZW5ndGgmJih0PXRbMF0pLHQgaW5zdGFuY2VvZiBsdHx8KHQ9cHQoKSksdC5wYXJlbnQ9byx0fX0oYm4pO3ZhciBPbj1bU3RyaW5nLFJlZ0V4cCxBcnJheV0sa249e0tlZXBBbGl2ZTp7bmFtZTpcImtlZXAtYWxpdmVcIixhYnN0cmFjdDohMCxwcm9wczp7aW5jbHVkZTpPbixleGNsdWRlOk9uLG1heDpbU3RyaW5nLE51bWJlcl19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNhY2hlPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5rZXlzPVtdfSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5jYWNoZSl4bih0aGlzLmNhY2hlLHQsdGhpcy5rZXlzKX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy4kd2F0Y2goXCJpbmNsdWRlXCIsZnVuY3Rpb24oZSl7QW4odCxmdW5jdGlvbih0KXtyZXR1cm4gd24oZSx0KX0pfSksdGhpcy4kd2F0Y2goXCJleGNsdWRlXCIsZnVuY3Rpb24oZSl7QW4odCxmdW5jdGlvbih0KXtyZXR1cm4hd24oZSx0KX0pfSl9LHJlbmRlcjpmdW5jdGlvbigpe3ZhciB0PXRoaXMuJHNsb3RzLmRlZmF1bHQsZT1IZSh0KSxuPWUmJmUuY29tcG9uZW50T3B0aW9ucztpZihuKXt2YXIgcj0kbihuKSxvPXRoaXMuaW5jbHVkZSxpPXRoaXMuZXhjbHVkZTtpZihvJiYoIXJ8fCF3bihvLHIpKXx8aSYmciYmd24oaSxyKSlyZXR1cm4gZTt2YXIgYT10aGlzLmNhY2hlLHM9dGhpcy5rZXlzLGM9bnVsbD09ZS5rZXk/bi5DdG9yLmNpZCsobi50YWc/XCI6OlwiK24udGFnOlwiXCIpOmUua2V5O2FbY10/KGUuY29tcG9uZW50SW5zdGFuY2U9YVtjXS5jb21wb25lbnRJbnN0YW5jZSx2KHMsYykscy5wdXNoKGMpKTooYVtjXT1lLHMucHVzaChjKSx0aGlzLm1heCYmcy5sZW5ndGg+cGFyc2VJbnQodGhpcy5tYXgpJiZ4bihhLHNbMF0scyx0aGlzLl92bm9kZSkpLGUuZGF0YS5rZWVwQWxpdmU9ITB9cmV0dXJuIGV8fHQmJnRbMF19fX07IWZ1bmN0aW9uKHQpe3ZhciBlPXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gTH19O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFwiY29uZmlnXCIsZSksdC51dGlsPXt3YXJuOm90LGV4dGVuZDp4LG1lcmdlT3B0aW9uczpUdCxkZWZpbmVSZWFjdGl2ZTokdH0sdC5zZXQ9d3QsdC5kZWxldGU9QXQsdC5uZXh0VGljaz1adCx0Lm9ic2VydmFibGU9ZnVuY3Rpb24odCl7cmV0dXJuIEN0KHQpLHR9LHQub3B0aW9ucz1PYmplY3QuY3JlYXRlKG51bGwpLE4uZm9yRWFjaChmdW5jdGlvbihlKXt0Lm9wdGlvbnNbZStcInNcIl09T2JqZWN0LmNyZWF0ZShudWxsKX0pLHQub3B0aW9ucy5fYmFzZT10LHgodC5vcHRpb25zLmNvbXBvbmVudHMsa24pLGZ1bmN0aW9uKHQpe3QudXNlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuX2luc3RhbGxlZFBsdWdpbnN8fCh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zPVtdKTtpZihlLmluZGV4T2YodCk+LTEpcmV0dXJuIHRoaXM7dmFyIG49QShhcmd1bWVudHMsMSk7cmV0dXJuIG4udW5zaGlmdCh0aGlzKSxcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lmluc3RhbGw/dC5pbnN0YWxsLmFwcGx5KHQsbik6XCJmdW5jdGlvblwiPT10eXBlb2YgdCYmdC5hcHBseShudWxsLG4pLGUucHVzaCh0KSx0aGlzfX0odCksZnVuY3Rpb24odCl7dC5taXhpbj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5vcHRpb25zPVR0KHRoaXMub3B0aW9ucyx0KSx0aGlzfX0odCksQ24odCksZnVuY3Rpb24odCl7Ti5mb3JFYWNoKGZ1bmN0aW9uKGUpe3RbZV09ZnVuY3Rpb24odCxuKXtyZXR1cm4gbj8oXCJjb21wb25lbnRcIj09PWUmJnMobikmJihuLm5hbWU9bi5uYW1lfHx0LG49dGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChuKSksXCJkaXJlY3RpdmVcIj09PWUmJlwiZnVuY3Rpb25cIj09dHlwZW9mIG4mJihuPXtiaW5kOm4sdXBkYXRlOm59KSx0aGlzLm9wdGlvbnNbZStcInNcIl1bdF09bixuKTp0aGlzLm9wdGlvbnNbZStcInNcIl1bdF19fSl9KHQpfShibiksT2JqZWN0LmRlZmluZVByb3BlcnR5KGJuLnByb3RvdHlwZSxcIiRpc1NlcnZlclwiLHtnZXQ6WX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShibi5wcm90b3R5cGUsXCIkc3NyQ29udGV4dFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy4kdm5vZGUmJnRoaXMuJHZub2RlLnNzckNvbnRleHR9fSksT2JqZWN0LmRlZmluZVByb3BlcnR5KGJuLFwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcIix7dmFsdWU6a2V9KSxibi52ZXJzaW9uPVwiMi42LjEyXCI7dmFyIFNuPXAoXCJzdHlsZSxjbGFzc1wiKSxFbj1wKFwiaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzc1wiKSxqbj1wKFwiY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrXCIpLFRuPXAoXCJldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5XCIpLEluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1uKGUpfHxcImZhbHNlXCI9PT1lP1wiZmFsc2VcIjpcImNvbnRlbnRlZGl0YWJsZVwiPT09dCYmVG4oZSk/ZTpcInRydWVcIn0sRG49cChcImFsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLGVuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSxyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLHRydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGVcIiksTm49XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsUG49ZnVuY3Rpb24odCl7cmV0dXJuXCI6XCI9PT10LmNoYXJBdCg1KSYmXCJ4bGlua1wiPT09dC5zbGljZSgwLDUpfSxMbj1mdW5jdGlvbih0KXtyZXR1cm4gUG4odCk/dC5zbGljZSg2LHQubGVuZ3RoKTpcIlwifSxNbj1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dHx8ITE9PT10fTtmdW5jdGlvbiBGbih0KXtmb3IodmFyIGU9dC5kYXRhLHI9dCxvPXQ7bihvLmNvbXBvbmVudEluc3RhbmNlKTspKG89by5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpJiZvLmRhdGEmJihlPVJuKG8uZGF0YSxlKSk7Zm9yKDtuKHI9ci5wYXJlbnQpOylyJiZyLmRhdGEmJihlPVJuKGUsci5kYXRhKSk7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYobih0KXx8bihlKSlyZXR1cm4gVW4odCxIbihlKSk7cmV0dXJuXCJcIn0oZS5zdGF0aWNDbGFzcyxlLmNsYXNzKX1mdW5jdGlvbiBSbih0LGUpe3JldHVybntzdGF0aWNDbGFzczpVbih0LnN0YXRpY0NsYXNzLGUuc3RhdGljQ2xhc3MpLGNsYXNzOm4odC5jbGFzcyk/W3QuY2xhc3MsZS5jbGFzc106ZS5jbGFzc319ZnVuY3Rpb24gVW4odCxlKXtyZXR1cm4gdD9lP3QrXCIgXCIrZTp0OmV8fFwiXCJ9ZnVuY3Rpb24gSG4odCl7cmV0dXJuIEFycmF5LmlzQXJyYXkodCk/ZnVuY3Rpb24odCl7Zm9yKHZhciBlLHI9XCJcIixvPTAsaT10Lmxlbmd0aDtvPGk7bysrKW4oZT1Ibih0W29dKSkmJlwiXCIhPT1lJiYociYmKHIrPVwiIFwiKSxyKz1lKTtyZXR1cm4gcn0odCk6aSh0KT9mdW5jdGlvbih0KXt2YXIgZT1cIlwiO2Zvcih2YXIgbiBpbiB0KXRbbl0mJihlJiYoZSs9XCIgXCIpLGUrPW4pO3JldHVybiBlfSh0KTpcInN0cmluZ1wiPT10eXBlb2YgdD90OlwiXCJ9dmFyIEJuPXtzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiLG1hdGg6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCJ9LFZuPXAoXCJodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSxhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LHMsc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLGVtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLGNhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLGJ1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSxkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdFwiKSx6bj1wKFwic3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLGZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLHBvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXdcIiwhMCksV249ZnVuY3Rpb24odCl7cmV0dXJuIFZuKHQpfHx6bih0KX07dmFyIHFuPU9iamVjdC5jcmVhdGUobnVsbCk7dmFyIEtuPXAoXCJ0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybFwiKTt2YXIgWG49T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDpmdW5jdGlvbih0LGUpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7cmV0dXJuXCJzZWxlY3RcIiE9PXQ/bjooZS5kYXRhJiZlLmRhdGEuYXR0cnMmJnZvaWQgMCE9PWUuZGF0YS5hdHRycy5tdWx0aXBsZSYmbi5zZXRBdHRyaWJ1dGUoXCJtdWx0aXBsZVwiLFwibXVsdGlwbGVcIiksbil9LGNyZWF0ZUVsZW1lbnROUzpmdW5jdGlvbih0LGUpe3JldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoQm5bdF0sZSl9LGNyZWF0ZVRleHROb2RlOmZ1bmN0aW9uKHQpe3JldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KX0sY3JlYXRlQ29tbWVudDpmdW5jdGlvbih0KXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCh0KX0saW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKHQsZSxuKXt0Lmluc2VydEJlZm9yZShlLG4pfSxyZW1vdmVDaGlsZDpmdW5jdGlvbih0LGUpe3QucmVtb3ZlQ2hpbGQoZSl9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKHQsZSl7dC5hcHBlbmRDaGlsZChlKX0scGFyZW50Tm9kZTpmdW5jdGlvbih0KXtyZXR1cm4gdC5wYXJlbnROb2RlfSxuZXh0U2libGluZzpmdW5jdGlvbih0KXtyZXR1cm4gdC5uZXh0U2libGluZ30sdGFnTmFtZTpmdW5jdGlvbih0KXtyZXR1cm4gdC50YWdOYW1lfSxzZXRUZXh0Q29udGVudDpmdW5jdGlvbih0LGUpe3QudGV4dENvbnRlbnQ9ZX0sc2V0U3R5bGVTY29wZTpmdW5jdGlvbih0LGUpe3Quc2V0QXR0cmlidXRlKGUsXCJcIil9fSksR249e2NyZWF0ZTpmdW5jdGlvbih0LGUpe1puKGUpfSx1cGRhdGU6ZnVuY3Rpb24odCxlKXt0LmRhdGEucmVmIT09ZS5kYXRhLnJlZiYmKFpuKHQsITApLFpuKGUpKX0sZGVzdHJveTpmdW5jdGlvbih0KXtabih0LCEwKX19O2Z1bmN0aW9uIFpuKHQsZSl7dmFyIHI9dC5kYXRhLnJlZjtpZihuKHIpKXt2YXIgbz10LmNvbnRleHQsaT10LmNvbXBvbmVudEluc3RhbmNlfHx0LmVsbSxhPW8uJHJlZnM7ZT9BcnJheS5pc0FycmF5KGFbcl0pP3YoYVtyXSxpKTphW3JdPT09aSYmKGFbcl09dm9pZCAwKTp0LmRhdGEucmVmSW5Gb3I/QXJyYXkuaXNBcnJheShhW3JdKT9hW3JdLmluZGV4T2YoaSk8MCYmYVtyXS5wdXNoKGkpOmFbcl09W2ldOmFbcl09aX19dmFyIEpuPW5ldyBsdChcIlwiLHt9LFtdKSxRbj1bXCJjcmVhdGVcIixcImFjdGl2YXRlXCIsXCJ1cGRhdGVcIixcInJlbW92ZVwiLFwiZGVzdHJveVwiXTtmdW5jdGlvbiBZbih0LG8pe3JldHVybiB0LmtleT09PW8ua2V5JiYodC50YWc9PT1vLnRhZyYmdC5pc0NvbW1lbnQ9PT1vLmlzQ29tbWVudCYmbih0LmRhdGEpPT09bihvLmRhdGEpJiZmdW5jdGlvbih0LGUpe2lmKFwiaW5wdXRcIiE9PXQudGFnKXJldHVybiEwO3ZhciByLG89bihyPXQuZGF0YSkmJm4ocj1yLmF0dHJzKSYmci50eXBlLGk9bihyPWUuZGF0YSkmJm4ocj1yLmF0dHJzKSYmci50eXBlO3JldHVybiBvPT09aXx8S24obykmJktuKGkpfSh0LG8pfHxyKHQuaXNBc3luY1BsYWNlaG9sZGVyKSYmdC5hc3luY0ZhY3Rvcnk9PT1vLmFzeW5jRmFjdG9yeSYmZShvLmFzeW5jRmFjdG9yeS5lcnJvcikpfWZ1bmN0aW9uIHRyKHQsZSxyKXt2YXIgbyxpLGE9e307Zm9yKG89ZTtvPD1yOysrbyluKGk9dFtvXS5rZXkpJiYoYVtpXT1vKTtyZXR1cm4gYX12YXIgZXI9e2NyZWF0ZTpucix1cGRhdGU6bnIsZGVzdHJveTpmdW5jdGlvbih0KXtucih0LEpuKX19O2Z1bmN0aW9uIG5yKHQsZSl7KHQuZGF0YS5kaXJlY3RpdmVzfHxlLmRhdGEuZGlyZWN0aXZlcykmJmZ1bmN0aW9uKHQsZSl7dmFyIG4scixvLGk9dD09PUpuLGE9ZT09PUpuLHM9b3IodC5kYXRhLmRpcmVjdGl2ZXMsdC5jb250ZXh0KSxjPW9yKGUuZGF0YS5kaXJlY3RpdmVzLGUuY29udGV4dCksdT1bXSxsPVtdO2ZvcihuIGluIGMpcj1zW25dLG89Y1tuXSxyPyhvLm9sZFZhbHVlPXIudmFsdWUsby5vbGRBcmc9ci5hcmcsYXIobyxcInVwZGF0ZVwiLGUsdCksby5kZWYmJm8uZGVmLmNvbXBvbmVudFVwZGF0ZWQmJmwucHVzaChvKSk6KGFyKG8sXCJiaW5kXCIsZSx0KSxvLmRlZiYmby5kZWYuaW5zZXJ0ZWQmJnUucHVzaChvKSk7aWYodS5sZW5ndGgpe3ZhciBmPWZ1bmN0aW9uKCl7Zm9yKHZhciBuPTA7bjx1Lmxlbmd0aDtuKyspYXIodVtuXSxcImluc2VydGVkXCIsZSx0KX07aT9uZShlLFwiaW5zZXJ0XCIsZik6ZigpfWwubGVuZ3RoJiZuZShlLFwicG9zdHBhdGNoXCIsZnVuY3Rpb24oKXtmb3IodmFyIG49MDtuPGwubGVuZ3RoO24rKylhcihsW25dLFwiY29tcG9uZW50VXBkYXRlZFwiLGUsdCl9KTtpZighaSlmb3IobiBpbiBzKWNbbl18fGFyKHNbbl0sXCJ1bmJpbmRcIix0LHQsYSl9KHQsZSl9dmFyIHJyPU9iamVjdC5jcmVhdGUobnVsbCk7ZnVuY3Rpb24gb3IodCxlKXt2YXIgbixyLG89T2JqZWN0LmNyZWF0ZShudWxsKTtpZighdClyZXR1cm4gbztmb3Iobj0wO248dC5sZW5ndGg7bisrKShyPXRbbl0pLm1vZGlmaWVyc3x8KHIubW9kaWZpZXJzPXJyKSxvW2lyKHIpXT1yLHIuZGVmPUl0KGUuJG9wdGlvbnMsXCJkaXJlY3RpdmVzXCIsci5uYW1lKTtyZXR1cm4gb31mdW5jdGlvbiBpcih0KXtyZXR1cm4gdC5yYXdOYW1lfHx0Lm5hbWUrXCIuXCIrT2JqZWN0LmtleXModC5tb2RpZmllcnN8fHt9KS5qb2luKFwiLlwiKX1mdW5jdGlvbiBhcih0LGUsbixyLG8pe3ZhciBpPXQuZGVmJiZ0LmRlZltlXTtpZihpKXRyeXtpKG4uZWxtLHQsbixyLG8pfWNhdGNoKHIpe010KHIsbi5jb250ZXh0LFwiZGlyZWN0aXZlIFwiK3QubmFtZStcIiBcIitlK1wiIGhvb2tcIil9fXZhciBzcj1bR24sZXJdO2Z1bmN0aW9uIGNyKHQscil7dmFyIG89ci5jb21wb25lbnRPcHRpb25zO2lmKCEobihvKSYmITE9PT1vLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnN8fGUodC5kYXRhLmF0dHJzKSYmZShyLmRhdGEuYXR0cnMpKSl7dmFyIGksYSxzPXIuZWxtLGM9dC5kYXRhLmF0dHJzfHx7fSx1PXIuZGF0YS5hdHRyc3x8e307Zm9yKGkgaW4gbih1Ll9fb2JfXykmJih1PXIuZGF0YS5hdHRycz14KHt9LHUpKSx1KWE9dVtpXSxjW2ldIT09YSYmdXIocyxpLGEpO2ZvcihpIGluKFd8fEspJiZ1LnZhbHVlIT09Yy52YWx1ZSYmdXIocyxcInZhbHVlXCIsdS52YWx1ZSksYyllKHVbaV0pJiYoUG4oaSk/cy5yZW1vdmVBdHRyaWJ1dGVOUyhObixMbihpKSk6am4oaSl8fHMucmVtb3ZlQXR0cmlidXRlKGkpKX19ZnVuY3Rpb24gdXIodCxlLG4pe3QudGFnTmFtZS5pbmRleE9mKFwiLVwiKT4tMT9scih0LGUsbik6RG4oZSk/TW4obik/dC5yZW1vdmVBdHRyaWJ1dGUoZSk6KG49XCJhbGxvd2Z1bGxzY3JlZW5cIj09PWUmJlwiRU1CRURcIj09PXQudGFnTmFtZT9cInRydWVcIjplLHQuc2V0QXR0cmlidXRlKGUsbikpOmpuKGUpP3Quc2V0QXR0cmlidXRlKGUsSW4oZSxuKSk6UG4oZSk/TW4obik/dC5yZW1vdmVBdHRyaWJ1dGVOUyhObixMbihlKSk6dC5zZXRBdHRyaWJ1dGVOUyhObixlLG4pOmxyKHQsZSxuKX1mdW5jdGlvbiBscih0LGUsbil7aWYoTW4obikpdC5yZW1vdmVBdHRyaWJ1dGUoZSk7ZWxzZXtpZihXJiYhcSYmXCJURVhUQVJFQVwiPT09dC50YWdOYW1lJiZcInBsYWNlaG9sZGVyXCI9PT1lJiZcIlwiIT09biYmIXQuX19pZXBoKXt2YXIgcj1mdW5jdGlvbihlKXtlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLHQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImlucHV0XCIscil9O3QuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsciksdC5fX2llcGg9ITB9dC5zZXRBdHRyaWJ1dGUoZSxuKX19dmFyIGZyPXtjcmVhdGU6Y3IsdXBkYXRlOmNyfTtmdW5jdGlvbiBwcih0LHIpe3ZhciBvPXIuZWxtLGk9ci5kYXRhLGE9dC5kYXRhO2lmKCEoZShpLnN0YXRpY0NsYXNzKSYmZShpLmNsYXNzKSYmKGUoYSl8fGUoYS5zdGF0aWNDbGFzcykmJmUoYS5jbGFzcykpKSl7dmFyIHM9Rm4ociksYz1vLl90cmFuc2l0aW9uQ2xhc3NlcztuKGMpJiYocz1VbihzLEhuKGMpKSkscyE9PW8uX3ByZXZDbGFzcyYmKG8uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixzKSxvLl9wcmV2Q2xhc3M9cyl9fXZhciBkcix2cj17Y3JlYXRlOnByLHVwZGF0ZTpwcn0saHI9XCJfX3JcIixtcj1cIl9fY1wiO2Z1bmN0aW9uIHlyKHQsZSxuKXt2YXIgcj1kcjtyZXR1cm4gZnVuY3Rpb24gbygpe251bGwhPT1lLmFwcGx5KG51bGwsYXJndW1lbnRzKSYmYnIodCxvLG4scil9fXZhciBncj1CdCYmIShHJiZOdW1iZXIoR1sxXSk8PTUzKTtmdW5jdGlvbiBfcih0LGUsbixyKXtpZihncil7dmFyIG89cm4saT1lO2U9aS5fd3JhcHBlcj1mdW5jdGlvbih0KXtpZih0LnRhcmdldD09PXQuY3VycmVudFRhcmdldHx8dC50aW1lU3RhbXA+PW98fHQudGltZVN0YW1wPD0wfHx0LnRhcmdldC5vd25lckRvY3VtZW50IT09ZG9jdW1lbnQpcmV0dXJuIGkuYXBwbHkodGhpcyxhcmd1bWVudHMpfX1kci5hZGRFdmVudExpc3RlbmVyKHQsZSxKP3tjYXB0dXJlOm4scGFzc2l2ZTpyfTpuKX1mdW5jdGlvbiBicih0LGUsbixyKXsocnx8ZHIpLnJlbW92ZUV2ZW50TGlzdGVuZXIodCxlLl93cmFwcGVyfHxlLG4pfWZ1bmN0aW9uIENyKHQscil7aWYoIWUodC5kYXRhLm9uKXx8IWUoci5kYXRhLm9uKSl7dmFyIG89ci5kYXRhLm9ufHx7fSxpPXQuZGF0YS5vbnx8e307ZHI9ci5lbG0sZnVuY3Rpb24odCl7aWYobih0W2hyXSkpe3ZhciBlPVc/XCJjaGFuZ2VcIjpcImlucHV0XCI7dFtlXT1bXS5jb25jYXQodFtocl0sdFtlXXx8W10pLGRlbGV0ZSB0W2hyXX1uKHRbbXJdKSYmKHQuY2hhbmdlPVtdLmNvbmNhdCh0W21yXSx0LmNoYW5nZXx8W10pLGRlbGV0ZSB0W21yXSl9KG8pLGVlKG8saSxfcixicix5cixyLmNvbnRleHQpLGRyPXZvaWQgMH19dmFyICRyLHdyPXtjcmVhdGU6Q3IsdXBkYXRlOkNyfTtmdW5jdGlvbiBBcih0LHIpe2lmKCFlKHQuZGF0YS5kb21Qcm9wcyl8fCFlKHIuZGF0YS5kb21Qcm9wcykpe3ZhciBvLGksYT1yLmVsbSxzPXQuZGF0YS5kb21Qcm9wc3x8e30sYz1yLmRhdGEuZG9tUHJvcHN8fHt9O2ZvcihvIGluIG4oYy5fX29iX18pJiYoYz1yLmRhdGEuZG9tUHJvcHM9eCh7fSxjKSkscylvIGluIGN8fChhW29dPVwiXCIpO2ZvcihvIGluIGMpe2lmKGk9Y1tvXSxcInRleHRDb250ZW50XCI9PT1vfHxcImlubmVySFRNTFwiPT09byl7aWYoci5jaGlsZHJlbiYmKHIuY2hpbGRyZW4ubGVuZ3RoPTApLGk9PT1zW29dKWNvbnRpbnVlOzE9PT1hLmNoaWxkTm9kZXMubGVuZ3RoJiZhLnJlbW92ZUNoaWxkKGEuY2hpbGROb2Rlc1swXSl9aWYoXCJ2YWx1ZVwiPT09byYmXCJQUk9HUkVTU1wiIT09YS50YWdOYW1lKXthLl92YWx1ZT1pO3ZhciB1PWUoaSk/XCJcIjpTdHJpbmcoaSk7eHIoYSx1KSYmKGEudmFsdWU9dSl9ZWxzZSBpZihcImlubmVySFRNTFwiPT09byYmem4oYS50YWdOYW1lKSYmZShhLmlubmVySFRNTCkpeygkcj0kcnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSkuaW5uZXJIVE1MPVwiPHN2Zz5cIitpK1wiPC9zdmc+XCI7Zm9yKHZhciBsPSRyLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtsLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQobC5maXJzdENoaWxkKX1lbHNlIGlmKGkhPT1zW29dKXRyeXthW29dPWl9Y2F0Y2godCl7fX19fWZ1bmN0aW9uIHhyKHQsZSl7cmV0dXJuIXQuY29tcG9zaW5nJiYoXCJPUFRJT05cIj09PXQudGFnTmFtZXx8ZnVuY3Rpb24odCxlKXt2YXIgbj0hMDt0cnl7bj1kb2N1bWVudC5hY3RpdmVFbGVtZW50IT09dH1jYXRjaCh0KXt9cmV0dXJuIG4mJnQudmFsdWUhPT1lfSh0LGUpfHxmdW5jdGlvbih0LGUpe3ZhciByPXQudmFsdWUsbz10Ll92TW9kaWZpZXJzO2lmKG4obykpe2lmKG8ubnVtYmVyKXJldHVybiBmKHIpIT09ZihlKTtpZihvLnRyaW0pcmV0dXJuIHIudHJpbSgpIT09ZS50cmltKCl9cmV0dXJuIHIhPT1lfSh0LGUpKX12YXIgT3I9e2NyZWF0ZTpBcix1cGRhdGU6QXJ9LGtyPXkoZnVuY3Rpb24odCl7dmFyIGU9e30sbj0vOiguKykvO3JldHVybiB0LnNwbGl0KC87KD8hW14oXSpcXCkpL2cpLmZvckVhY2goZnVuY3Rpb24odCl7aWYodCl7dmFyIHI9dC5zcGxpdChuKTtyLmxlbmd0aD4xJiYoZVtyWzBdLnRyaW0oKV09clsxXS50cmltKCkpfX0pLGV9KTtmdW5jdGlvbiBTcih0KXt2YXIgZT1Fcih0LnN0eWxlKTtyZXR1cm4gdC5zdGF0aWNTdHlsZT94KHQuc3RhdGljU3R5bGUsZSk6ZX1mdW5jdGlvbiBFcih0KXtyZXR1cm4gQXJyYXkuaXNBcnJheSh0KT9PKHQpOlwic3RyaW5nXCI9PXR5cGVvZiB0P2tyKHQpOnR9dmFyIGpyLFRyPS9eLS0vLElyPS9cXHMqIWltcG9ydGFudCQvLERyPWZ1bmN0aW9uKHQsZSxuKXtpZihUci50ZXN0KGUpKXQuc3R5bGUuc2V0UHJvcGVydHkoZSxuKTtlbHNlIGlmKElyLnRlc3QobikpdC5zdHlsZS5zZXRQcm9wZXJ0eSgkKGUpLG4ucmVwbGFjZShJcixcIlwiKSxcImltcG9ydGFudFwiKTtlbHNle3ZhciByPVByKGUpO2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHZhciBvPTAsaT1uLmxlbmd0aDtvPGk7bysrKXQuc3R5bGVbcl09bltvXTtlbHNlIHQuc3R5bGVbcl09bn19LE5yPVtcIldlYmtpdFwiLFwiTW96XCIsXCJtc1wiXSxQcj15KGZ1bmN0aW9uKHQpe2lmKGpyPWpyfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiZmlsdGVyXCIhPT0odD1fKHQpKSYmdCBpbiBqcilyZXR1cm4gdDtmb3IodmFyIGU9dC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt0LnNsaWNlKDEpLG49MDtuPE5yLmxlbmd0aDtuKyspe3ZhciByPU5yW25dK2U7aWYociBpbiBqcilyZXR1cm4gcn19KTtmdW5jdGlvbiBMcih0LHIpe3ZhciBvPXIuZGF0YSxpPXQuZGF0YTtpZighKGUoby5zdGF0aWNTdHlsZSkmJmUoby5zdHlsZSkmJmUoaS5zdGF0aWNTdHlsZSkmJmUoaS5zdHlsZSkpKXt2YXIgYSxzLGM9ci5lbG0sdT1pLnN0YXRpY1N0eWxlLGw9aS5ub3JtYWxpemVkU3R5bGV8fGkuc3R5bGV8fHt9LGY9dXx8bCxwPUVyKHIuZGF0YS5zdHlsZSl8fHt9O3IuZGF0YS5ub3JtYWxpemVkU3R5bGU9bihwLl9fb2JfXyk/eCh7fSxwKTpwO3ZhciBkPWZ1bmN0aW9uKHQsZSl7dmFyIG4scj17fTtpZihlKWZvcih2YXIgbz10O28uY29tcG9uZW50SW5zdGFuY2U7KShvPW8uY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKSYmby5kYXRhJiYobj1TcihvLmRhdGEpKSYmeChyLG4pOyhuPVNyKHQuZGF0YSkpJiZ4KHIsbik7Zm9yKHZhciBpPXQ7aT1pLnBhcmVudDspaS5kYXRhJiYobj1TcihpLmRhdGEpKSYmeChyLG4pO3JldHVybiByfShyLCEwKTtmb3IocyBpbiBmKWUoZFtzXSkmJkRyKGMscyxcIlwiKTtmb3IocyBpbiBkKShhPWRbc10pIT09ZltzXSYmRHIoYyxzLG51bGw9PWE/XCJcIjphKX19dmFyIE1yPXtjcmVhdGU6THIsdXBkYXRlOkxyfSxGcj0vXFxzKy87ZnVuY3Rpb24gUnIodCxlKXtpZihlJiYoZT1lLnRyaW0oKSkpaWYodC5jbGFzc0xpc3QpZS5pbmRleE9mKFwiIFwiKT4tMT9lLnNwbGl0KEZyKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiB0LmNsYXNzTGlzdC5hZGQoZSl9KTp0LmNsYXNzTGlzdC5hZGQoZSk7ZWxzZXt2YXIgbj1cIiBcIisodC5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKXx8XCJcIikrXCIgXCI7bi5pbmRleE9mKFwiIFwiK2UrXCIgXCIpPDAmJnQuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwobitlKS50cmltKCkpfX1mdW5jdGlvbiBVcih0LGUpe2lmKGUmJihlPWUudHJpbSgpKSlpZih0LmNsYXNzTGlzdCllLmluZGV4T2YoXCIgXCIpPi0xP2Uuc3BsaXQoRnIpLmZvckVhY2goZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2xhc3NMaXN0LnJlbW92ZShlKX0pOnQuY2xhc3NMaXN0LnJlbW92ZShlKSx0LmNsYXNzTGlzdC5sZW5ndGh8fHQucmVtb3ZlQXR0cmlidXRlKFwiY2xhc3NcIik7ZWxzZXtmb3IodmFyIG49XCIgXCIrKHQuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIil8fFwiXCIpK1wiIFwiLHI9XCIgXCIrZStcIiBcIjtuLmluZGV4T2Yocik+PTA7KW49bi5yZXBsYWNlKHIsXCIgXCIpOyhuPW4udHJpbSgpKT90LnNldEF0dHJpYnV0ZShcImNsYXNzXCIsbik6dC5yZW1vdmVBdHRyaWJ1dGUoXCJjbGFzc1wiKX19ZnVuY3Rpb24gSHIodCl7aWYodCl7aWYoXCJvYmplY3RcIj09dHlwZW9mIHQpe3ZhciBlPXt9O3JldHVybiExIT09dC5jc3MmJngoZSxCcih0Lm5hbWV8fFwidlwiKSkseChlLHQpLGV9cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHQ/QnIodCk6dm9pZCAwfX12YXIgQnI9eShmdW5jdGlvbih0KXtyZXR1cm57ZW50ZXJDbGFzczp0K1wiLWVudGVyXCIsZW50ZXJUb0NsYXNzOnQrXCItZW50ZXItdG9cIixlbnRlckFjdGl2ZUNsYXNzOnQrXCItZW50ZXItYWN0aXZlXCIsbGVhdmVDbGFzczp0K1wiLWxlYXZlXCIsbGVhdmVUb0NsYXNzOnQrXCItbGVhdmUtdG9cIixsZWF2ZUFjdGl2ZUNsYXNzOnQrXCItbGVhdmUtYWN0aXZlXCJ9fSksVnI9SCYmIXEsenI9XCJ0cmFuc2l0aW9uXCIsV3I9XCJhbmltYXRpb25cIixxcj1cInRyYW5zaXRpb25cIixLcj1cInRyYW5zaXRpb25lbmRcIixYcj1cImFuaW1hdGlvblwiLEdyPVwiYW5pbWF0aW9uZW5kXCI7VnImJih2b2lkIDA9PT13aW5kb3cub250cmFuc2l0aW9uZW5kJiZ2b2lkIDAhPT13aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kJiYocXI9XCJXZWJraXRUcmFuc2l0aW9uXCIsS3I9XCJ3ZWJraXRUcmFuc2l0aW9uRW5kXCIpLHZvaWQgMD09PXdpbmRvdy5vbmFuaW1hdGlvbmVuZCYmdm9pZCAwIT09d2luZG93Lm9ud2Via2l0YW5pbWF0aW9uZW5kJiYoWHI9XCJXZWJraXRBbmltYXRpb25cIixHcj1cIndlYmtpdEFuaW1hdGlvbkVuZFwiKSk7dmFyIFpyPUg/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZT93aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KTpzZXRUaW1lb3V0OmZ1bmN0aW9uKHQpe3JldHVybiB0KCl9O2Z1bmN0aW9uIEpyKHQpe1pyKGZ1bmN0aW9uKCl7WnIodCl9KX1mdW5jdGlvbiBRcih0LGUpe3ZhciBuPXQuX3RyYW5zaXRpb25DbGFzc2VzfHwodC5fdHJhbnNpdGlvbkNsYXNzZXM9W10pO24uaW5kZXhPZihlKTwwJiYobi5wdXNoKGUpLFJyKHQsZSkpfWZ1bmN0aW9uIFlyKHQsZSl7dC5fdHJhbnNpdGlvbkNsYXNzZXMmJnYodC5fdHJhbnNpdGlvbkNsYXNzZXMsZSksVXIodCxlKX1mdW5jdGlvbiB0byh0LGUsbil7dmFyIHI9bm8odCxlKSxvPXIudHlwZSxpPXIudGltZW91dCxhPXIucHJvcENvdW50O2lmKCFvKXJldHVybiBuKCk7dmFyIHM9bz09PXpyP0tyOkdyLGM9MCx1PWZ1bmN0aW9uKCl7dC5yZW1vdmVFdmVudExpc3RlbmVyKHMsbCksbigpfSxsPWZ1bmN0aW9uKGUpe2UudGFyZ2V0PT09dCYmKytjPj1hJiZ1KCl9O3NldFRpbWVvdXQoZnVuY3Rpb24oKXtjPGEmJnUoKX0saSsxKSx0LmFkZEV2ZW50TGlzdGVuZXIocyxsKX12YXIgZW89L1xcYih0cmFuc2Zvcm18YWxsKSgsfCQpLztmdW5jdGlvbiBubyh0LGUpe3ZhciBuLHI9d2luZG93LmdldENvbXB1dGVkU3R5bGUodCksbz0ocltxcitcIkRlbGF5XCJdfHxcIlwiKS5zcGxpdChcIiwgXCIpLGk9KHJbcXIrXCJEdXJhdGlvblwiXXx8XCJcIikuc3BsaXQoXCIsIFwiKSxhPXJvKG8saSkscz0ocltYcitcIkRlbGF5XCJdfHxcIlwiKS5zcGxpdChcIiwgXCIpLGM9KHJbWHIrXCJEdXJhdGlvblwiXXx8XCJcIikuc3BsaXQoXCIsIFwiKSx1PXJvKHMsYyksbD0wLGY9MDtyZXR1cm4gZT09PXpyP2E+MCYmKG49enIsbD1hLGY9aS5sZW5ndGgpOmU9PT1Xcj91PjAmJihuPVdyLGw9dSxmPWMubGVuZ3RoKTpmPShuPShsPU1hdGgubWF4KGEsdSkpPjA/YT51P3pyOldyOm51bGwpP249PT16cj9pLmxlbmd0aDpjLmxlbmd0aDowLHt0eXBlOm4sdGltZW91dDpsLHByb3BDb3VudDpmLGhhc1RyYW5zZm9ybTpuPT09enImJmVvLnRlc3QocltxcitcIlByb3BlcnR5XCJdKX19ZnVuY3Rpb24gcm8odCxlKXtmb3IoO3QubGVuZ3RoPGUubGVuZ3RoOyl0PXQuY29uY2F0KHQpO3JldHVybiBNYXRoLm1heC5hcHBseShudWxsLGUubWFwKGZ1bmN0aW9uKGUsbil7cmV0dXJuIG9vKGUpK29vKHRbbl0pfSkpfWZ1bmN0aW9uIG9vKHQpe3JldHVybiAxZTMqTnVtYmVyKHQuc2xpY2UoMCwtMSkucmVwbGFjZShcIixcIixcIi5cIikpfWZ1bmN0aW9uIGlvKHQscil7dmFyIG89dC5lbG07bihvLl9sZWF2ZUNiKSYmKG8uX2xlYXZlQ2IuY2FuY2VsbGVkPSEwLG8uX2xlYXZlQ2IoKSk7dmFyIGE9SHIodC5kYXRhLnRyYW5zaXRpb24pO2lmKCFlKGEpJiYhbihvLl9lbnRlckNiKSYmMT09PW8ubm9kZVR5cGUpe2Zvcih2YXIgcz1hLmNzcyxjPWEudHlwZSx1PWEuZW50ZXJDbGFzcyxsPWEuZW50ZXJUb0NsYXNzLHA9YS5lbnRlckFjdGl2ZUNsYXNzLGQ9YS5hcHBlYXJDbGFzcyx2PWEuYXBwZWFyVG9DbGFzcyxoPWEuYXBwZWFyQWN0aXZlQ2xhc3MsbT1hLmJlZm9yZUVudGVyLHk9YS5lbnRlcixnPWEuYWZ0ZXJFbnRlcixfPWEuZW50ZXJDYW5jZWxsZWQsYj1hLmJlZm9yZUFwcGVhcixDPWEuYXBwZWFyLCQ9YS5hZnRlckFwcGVhcix3PWEuYXBwZWFyQ2FuY2VsbGVkLEE9YS5kdXJhdGlvbix4PXFlLE89cWUuJHZub2RlO08mJk8ucGFyZW50Oyl4PU8uY29udGV4dCxPPU8ucGFyZW50O3ZhciBrPSF4Ll9pc01vdW50ZWR8fCF0LmlzUm9vdEluc2VydDtpZigha3x8Q3x8XCJcIj09PUMpe3ZhciBTPWsmJmQ/ZDp1LEU9ayYmaD9oOnAsaj1rJiZ2P3Y6bCxUPWsmJmJ8fG0sRD1rJiZcImZ1bmN0aW9uXCI9PXR5cGVvZiBDP0M6eSxOPWsmJiR8fGcsUD1rJiZ3fHxfLEw9ZihpKEEpP0EuZW50ZXI6QSksTT0hMSE9PXMmJiFxLEY9Y28oRCksUj1vLl9lbnRlckNiPUkoZnVuY3Rpb24oKXtNJiYoWXIobyxqKSxZcihvLEUpKSxSLmNhbmNlbGxlZD8oTSYmWXIobyxTKSxQJiZQKG8pKTpOJiZOKG8pLG8uX2VudGVyQ2I9bnVsbH0pO3QuZGF0YS5zaG93fHxuZSh0LFwiaW5zZXJ0XCIsZnVuY3Rpb24oKXt2YXIgZT1vLnBhcmVudE5vZGUsbj1lJiZlLl9wZW5kaW5nJiZlLl9wZW5kaW5nW3Qua2V5XTtuJiZuLnRhZz09PXQudGFnJiZuLmVsbS5fbGVhdmVDYiYmbi5lbG0uX2xlYXZlQ2IoKSxEJiZEKG8sUil9KSxUJiZUKG8pLE0mJihRcihvLFMpLFFyKG8sRSksSnIoZnVuY3Rpb24oKXtZcihvLFMpLFIuY2FuY2VsbGVkfHwoUXIobyxqKSxGfHwoc28oTCk/c2V0VGltZW91dChSLEwpOnRvKG8sYyxSKSkpfSkpLHQuZGF0YS5zaG93JiYociYmcigpLEQmJkQobyxSKSksTXx8Rnx8UigpfX19ZnVuY3Rpb24gYW8odCxyKXt2YXIgbz10LmVsbTtuKG8uX2VudGVyQ2IpJiYoby5fZW50ZXJDYi5jYW5jZWxsZWQ9ITAsby5fZW50ZXJDYigpKTt2YXIgYT1Icih0LmRhdGEudHJhbnNpdGlvbik7aWYoZShhKXx8MSE9PW8ubm9kZVR5cGUpcmV0dXJuIHIoKTtpZighbihvLl9sZWF2ZUNiKSl7dmFyIHM9YS5jc3MsYz1hLnR5cGUsdT1hLmxlYXZlQ2xhc3MsbD1hLmxlYXZlVG9DbGFzcyxwPWEubGVhdmVBY3RpdmVDbGFzcyxkPWEuYmVmb3JlTGVhdmUsdj1hLmxlYXZlLGg9YS5hZnRlckxlYXZlLG09YS5sZWF2ZUNhbmNlbGxlZCx5PWEuZGVsYXlMZWF2ZSxnPWEuZHVyYXRpb24sXz0hMSE9PXMmJiFxLGI9Y28odiksQz1mKGkoZyk/Zy5sZWF2ZTpnKSwkPW8uX2xlYXZlQ2I9SShmdW5jdGlvbigpe28ucGFyZW50Tm9kZSYmby5wYXJlbnROb2RlLl9wZW5kaW5nJiYoby5wYXJlbnROb2RlLl9wZW5kaW5nW3Qua2V5XT1udWxsKSxfJiYoWXIobyxsKSxZcihvLHApKSwkLmNhbmNlbGxlZD8oXyYmWXIobyx1KSxtJiZtKG8pKToocigpLGgmJmgobykpLG8uX2xlYXZlQ2I9bnVsbH0pO3k/eSh3KTp3KCl9ZnVuY3Rpb24gdygpeyQuY2FuY2VsbGVkfHwoIXQuZGF0YS5zaG93JiZvLnBhcmVudE5vZGUmJigoby5wYXJlbnROb2RlLl9wZW5kaW5nfHwoby5wYXJlbnROb2RlLl9wZW5kaW5nPXt9KSlbdC5rZXldPXQpLGQmJmQobyksXyYmKFFyKG8sdSksUXIobyxwKSxKcihmdW5jdGlvbigpe1lyKG8sdSksJC5jYW5jZWxsZWR8fChRcihvLGwpLGJ8fChzbyhDKT9zZXRUaW1lb3V0KCQsQyk6dG8obyxjLCQpKSl9KSksdiYmdihvLCQpLF98fGJ8fCQoKSl9fWZ1bmN0aW9uIHNvKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0JiYhaXNOYU4odCl9ZnVuY3Rpb24gY28odCl7aWYoZSh0KSlyZXR1cm4hMTt2YXIgcj10LmZucztyZXR1cm4gbihyKT9jbyhBcnJheS5pc0FycmF5KHIpP3JbMF06cik6KHQuX2xlbmd0aHx8dC5sZW5ndGgpPjF9ZnVuY3Rpb24gdW8odCxlKXshMCE9PWUuZGF0YS5zaG93JiZpbyhlKX12YXIgbG89ZnVuY3Rpb24odCl7dmFyIGksYSxzPXt9LGM9dC5tb2R1bGVzLHU9dC5ub2RlT3BzO2ZvcihpPTA7aTxRbi5sZW5ndGg7KytpKWZvcihzW1FuW2ldXT1bXSxhPTA7YTxjLmxlbmd0aDsrK2EpbihjW2FdW1FuW2ldXSkmJnNbUW5baV1dLnB1c2goY1thXVtRbltpXV0pO2Z1bmN0aW9uIGwodCl7dmFyIGU9dS5wYXJlbnROb2RlKHQpO24oZSkmJnUucmVtb3ZlQ2hpbGQoZSx0KX1mdW5jdGlvbiBmKHQsZSxvLGksYSxjLGwpe2lmKG4odC5lbG0pJiZuKGMpJiYodD1jW2xdPXZ0KHQpKSx0LmlzUm9vdEluc2VydD0hYSwhZnVuY3Rpb24odCxlLG8saSl7dmFyIGE9dC5kYXRhO2lmKG4oYSkpe3ZhciBjPW4odC5jb21wb25lbnRJbnN0YW5jZSkmJmEua2VlcEFsaXZlO2lmKG4oYT1hLmhvb2spJiZuKGE9YS5pbml0KSYmYSh0LCExKSxuKHQuY29tcG9uZW50SW5zdGFuY2UpKXJldHVybiBkKHQsZSksdihvLHQuZWxtLGkpLHIoYykmJmZ1bmN0aW9uKHQsZSxyLG8pe2Zvcih2YXIgaSxhPXQ7YS5jb21wb25lbnRJbnN0YW5jZTspaWYoYT1hLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSxuKGk9YS5kYXRhKSYmbihpPWkudHJhbnNpdGlvbikpe2ZvcihpPTA7aTxzLmFjdGl2YXRlLmxlbmd0aDsrK2kpcy5hY3RpdmF0ZVtpXShKbixhKTtlLnB1c2goYSk7YnJlYWt9dihyLHQuZWxtLG8pfSh0LGUsbyxpKSwhMH19KHQsZSxvLGkpKXt2YXIgZj10LmRhdGEscD10LmNoaWxkcmVuLG09dC50YWc7bihtKT8odC5lbG09dC5ucz91LmNyZWF0ZUVsZW1lbnROUyh0Lm5zLG0pOnUuY3JlYXRlRWxlbWVudChtLHQpLGcodCksaCh0LHAsZSksbihmKSYmeSh0LGUpLHYobyx0LmVsbSxpKSk6cih0LmlzQ29tbWVudCk/KHQuZWxtPXUuY3JlYXRlQ29tbWVudCh0LnRleHQpLHYobyx0LmVsbSxpKSk6KHQuZWxtPXUuY3JlYXRlVGV4dE5vZGUodC50ZXh0KSx2KG8sdC5lbG0saSkpfX1mdW5jdGlvbiBkKHQsZSl7bih0LmRhdGEucGVuZGluZ0luc2VydCkmJihlLnB1c2guYXBwbHkoZSx0LmRhdGEucGVuZGluZ0luc2VydCksdC5kYXRhLnBlbmRpbmdJbnNlcnQ9bnVsbCksdC5lbG09dC5jb21wb25lbnRJbnN0YW5jZS4kZWwsbSh0KT8oeSh0LGUpLGcodCkpOihabih0KSxlLnB1c2godCkpfWZ1bmN0aW9uIHYodCxlLHIpe24odCkmJihuKHIpP3UucGFyZW50Tm9kZShyKT09PXQmJnUuaW5zZXJ0QmVmb3JlKHQsZSxyKTp1LmFwcGVuZENoaWxkKHQsZSkpfWZ1bmN0aW9uIGgodCxlLG4pe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciByPTA7cjxlLmxlbmd0aDsrK3IpZihlW3JdLG4sdC5lbG0sbnVsbCwhMCxlLHIpO2Vsc2Ugbyh0LnRleHQpJiZ1LmFwcGVuZENoaWxkKHQuZWxtLHUuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKHQudGV4dCkpKX1mdW5jdGlvbiBtKHQpe2Zvcig7dC5jb21wb25lbnRJbnN0YW5jZTspdD10LmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtyZXR1cm4gbih0LnRhZyl9ZnVuY3Rpb24geSh0LGUpe2Zvcih2YXIgcj0wO3I8cy5jcmVhdGUubGVuZ3RoOysrcilzLmNyZWF0ZVtyXShKbix0KTtuKGk9dC5kYXRhLmhvb2spJiYobihpLmNyZWF0ZSkmJmkuY3JlYXRlKEpuLHQpLG4oaS5pbnNlcnQpJiZlLnB1c2godCkpfWZ1bmN0aW9uIGcodCl7dmFyIGU7aWYobihlPXQuZm5TY29wZUlkKSl1LnNldFN0eWxlU2NvcGUodC5lbG0sZSk7ZWxzZSBmb3IodmFyIHI9dDtyOyluKGU9ci5jb250ZXh0KSYmbihlPWUuJG9wdGlvbnMuX3Njb3BlSWQpJiZ1LnNldFN0eWxlU2NvcGUodC5lbG0sZSkscj1yLnBhcmVudDtuKGU9cWUpJiZlIT09dC5jb250ZXh0JiZlIT09dC5mbkNvbnRleHQmJm4oZT1lLiRvcHRpb25zLl9zY29wZUlkKSYmdS5zZXRTdHlsZVNjb3BlKHQuZWxtLGUpfWZ1bmN0aW9uIF8odCxlLG4scixvLGkpe2Zvcig7cjw9bzsrK3IpZihuW3JdLGksdCxlLCExLG4scil9ZnVuY3Rpb24gYih0KXt2YXIgZSxyLG89dC5kYXRhO2lmKG4obykpZm9yKG4oZT1vLmhvb2spJiZuKGU9ZS5kZXN0cm95KSYmZSh0KSxlPTA7ZTxzLmRlc3Ryb3kubGVuZ3RoOysrZSlzLmRlc3Ryb3lbZV0odCk7aWYobihlPXQuY2hpbGRyZW4pKWZvcihyPTA7cjx0LmNoaWxkcmVuLmxlbmd0aDsrK3IpYih0LmNoaWxkcmVuW3JdKX1mdW5jdGlvbiBDKHQsZSxyKXtmb3IoO2U8PXI7KytlKXt2YXIgbz10W2VdO24obykmJihuKG8udGFnKT8oJChvKSxiKG8pKTpsKG8uZWxtKSl9fWZ1bmN0aW9uICQodCxlKXtpZihuKGUpfHxuKHQuZGF0YSkpe3ZhciByLG89cy5yZW1vdmUubGVuZ3RoKzE7Zm9yKG4oZSk/ZS5saXN0ZW5lcnMrPW86ZT1mdW5jdGlvbih0LGUpe2Z1bmN0aW9uIG4oKXswPT0tLW4ubGlzdGVuZXJzJiZsKHQpfXJldHVybiBuLmxpc3RlbmVycz1lLG59KHQuZWxtLG8pLG4ocj10LmNvbXBvbmVudEluc3RhbmNlKSYmbihyPXIuX3Zub2RlKSYmbihyLmRhdGEpJiYkKHIsZSkscj0wO3I8cy5yZW1vdmUubGVuZ3RoOysrcilzLnJlbW92ZVtyXSh0LGUpO24ocj10LmRhdGEuaG9vaykmJm4ocj1yLnJlbW92ZSk/cih0LGUpOmUoKX1lbHNlIGwodC5lbG0pfWZ1bmN0aW9uIHcodCxlLHIsbyl7Zm9yKHZhciBpPXI7aTxvO2krKyl7dmFyIGE9ZVtpXTtpZihuKGEpJiZZbih0LGEpKXJldHVybiBpfX1mdW5jdGlvbiBBKHQsbyxpLGEsYyxsKXtpZih0IT09byl7bihvLmVsbSkmJm4oYSkmJihvPWFbY109dnQobykpO3ZhciBwPW8uZWxtPXQuZWxtO2lmKHIodC5pc0FzeW5jUGxhY2Vob2xkZXIpKW4oby5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpP2sodC5lbG0sbyxpKTpvLmlzQXN5bmNQbGFjZWhvbGRlcj0hMDtlbHNlIGlmKHIoby5pc1N0YXRpYykmJnIodC5pc1N0YXRpYykmJm8ua2V5PT09dC5rZXkmJihyKG8uaXNDbG9uZWQpfHxyKG8uaXNPbmNlKSkpby5jb21wb25lbnRJbnN0YW5jZT10LmNvbXBvbmVudEluc3RhbmNlO2Vsc2V7dmFyIGQsdj1vLmRhdGE7bih2KSYmbihkPXYuaG9vaykmJm4oZD1kLnByZXBhdGNoKSYmZCh0LG8pO3ZhciBoPXQuY2hpbGRyZW4seT1vLmNoaWxkcmVuO2lmKG4odikmJm0obykpe2ZvcihkPTA7ZDxzLnVwZGF0ZS5sZW5ndGg7KytkKXMudXBkYXRlW2RdKHQsbyk7bihkPXYuaG9vaykmJm4oZD1kLnVwZGF0ZSkmJmQodCxvKX1lKG8udGV4dCk/bihoKSYmbih5KT9oIT09eSYmZnVuY3Rpb24odCxyLG8saSxhKXtmb3IodmFyIHMsYyxsLHA9MCxkPTAsdj1yLmxlbmd0aC0xLGg9clswXSxtPXJbdl0seT1vLmxlbmd0aC0xLGc9b1swXSxiPW9beV0sJD0hYTtwPD12JiZkPD15OyllKGgpP2g9clsrK3BdOmUobSk/bT1yWy0tdl06WW4oaCxnKT8oQShoLGcsaSxvLGQpLGg9clsrK3BdLGc9b1srK2RdKTpZbihtLGIpPyhBKG0sYixpLG8seSksbT1yWy0tdl0sYj1vWy0teV0pOlluKGgsYik/KEEoaCxiLGksbyx5KSwkJiZ1Lmluc2VydEJlZm9yZSh0LGguZWxtLHUubmV4dFNpYmxpbmcobS5lbG0pKSxoPXJbKytwXSxiPW9bLS15XSk6WW4obSxnKT8oQShtLGcsaSxvLGQpLCQmJnUuaW5zZXJ0QmVmb3JlKHQsbS5lbG0saC5lbG0pLG09clstLXZdLGc9b1srK2RdKTooZShzKSYmKHM9dHIocixwLHYpKSxlKGM9bihnLmtleSk/c1tnLmtleV06dyhnLHIscCx2KSk/ZihnLGksdCxoLmVsbSwhMSxvLGQpOlluKGw9cltjXSxnKT8oQShsLGcsaSxvLGQpLHJbY109dm9pZCAwLCQmJnUuaW5zZXJ0QmVmb3JlKHQsbC5lbG0saC5lbG0pKTpmKGcsaSx0LGguZWxtLCExLG8sZCksZz1vWysrZF0pO3A+dj9fKHQsZShvW3krMV0pP251bGw6b1t5KzFdLmVsbSxvLGQseSxpKTpkPnkmJkMocixwLHYpfShwLGgseSxpLGwpOm4oeSk/KG4odC50ZXh0KSYmdS5zZXRUZXh0Q29udGVudChwLFwiXCIpLF8ocCxudWxsLHksMCx5Lmxlbmd0aC0xLGkpKTpuKGgpP0MoaCwwLGgubGVuZ3RoLTEpOm4odC50ZXh0KSYmdS5zZXRUZXh0Q29udGVudChwLFwiXCIpOnQudGV4dCE9PW8udGV4dCYmdS5zZXRUZXh0Q29udGVudChwLG8udGV4dCksbih2KSYmbihkPXYuaG9vaykmJm4oZD1kLnBvc3RwYXRjaCkmJmQodCxvKX19fWZ1bmN0aW9uIHgodCxlLG8pe2lmKHIobykmJm4odC5wYXJlbnQpKXQucGFyZW50LmRhdGEucGVuZGluZ0luc2VydD1lO2Vsc2UgZm9yKHZhciBpPTA7aTxlLmxlbmd0aDsrK2kpZVtpXS5kYXRhLmhvb2suaW5zZXJ0KGVbaV0pfXZhciBPPXAoXCJhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXlcIik7ZnVuY3Rpb24gayh0LGUsbyxpKXt2YXIgYSxzPWUudGFnLGM9ZS5kYXRhLHU9ZS5jaGlsZHJlbjtpZihpPWl8fGMmJmMucHJlLGUuZWxtPXQscihlLmlzQ29tbWVudCkmJm4oZS5hc3luY0ZhY3RvcnkpKXJldHVybiBlLmlzQXN5bmNQbGFjZWhvbGRlcj0hMCwhMDtpZihuKGMpJiYobihhPWMuaG9vaykmJm4oYT1hLmluaXQpJiZhKGUsITApLG4oYT1lLmNvbXBvbmVudEluc3RhbmNlKSkpcmV0dXJuIGQoZSxvKSwhMDtpZihuKHMpKXtpZihuKHUpKWlmKHQuaGFzQ2hpbGROb2RlcygpKWlmKG4oYT1jKSYmbihhPWEuZG9tUHJvcHMpJiZuKGE9YS5pbm5lckhUTUwpKXtpZihhIT09dC5pbm5lckhUTUwpcmV0dXJuITF9ZWxzZXtmb3IodmFyIGw9ITAsZj10LmZpcnN0Q2hpbGQscD0wO3A8dS5sZW5ndGg7cCsrKXtpZighZnx8IWsoZix1W3BdLG8saSkpe2w9ITE7YnJlYWt9Zj1mLm5leHRTaWJsaW5nfWlmKCFsfHxmKXJldHVybiExfWVsc2UgaChlLHUsbyk7aWYobihjKSl7dmFyIHY9ITE7Zm9yKHZhciBtIGluIGMpaWYoIU8obSkpe3Y9ITAseShlLG8pO2JyZWFrfSF2JiZjLmNsYXNzJiZRdChjLmNsYXNzKX19ZWxzZSB0LmRhdGEhPT1lLnRleHQmJih0LmRhdGE9ZS50ZXh0KTtyZXR1cm4hMH1yZXR1cm4gZnVuY3Rpb24odCxvLGksYSl7aWYoIWUobykpe3ZhciBjLGw9ITEscD1bXTtpZihlKHQpKWw9ITAsZihvLHApO2Vsc2V7dmFyIGQ9bih0Lm5vZGVUeXBlKTtpZighZCYmWW4odCxvKSlBKHQsbyxwLG51bGwsbnVsbCxhKTtlbHNle2lmKGQpe2lmKDE9PT10Lm5vZGVUeXBlJiZ0Lmhhc0F0dHJpYnV0ZShEKSYmKHQucmVtb3ZlQXR0cmlidXRlKEQpLGk9ITApLHIoaSkmJmsodCxvLHApKXJldHVybiB4KG8scCwhMCksdDtjPXQsdD1uZXcgbHQodS50YWdOYW1lKGMpLnRvTG93ZXJDYXNlKCkse30sW10sdm9pZCAwLGMpfXZhciB2PXQuZWxtLGg9dS5wYXJlbnROb2RlKHYpO2lmKGYobyxwLHYuX2xlYXZlQ2I/bnVsbDpoLHUubmV4dFNpYmxpbmcodikpLG4oby5wYXJlbnQpKWZvcih2YXIgeT1vLnBhcmVudCxnPW0obyk7eTspe2Zvcih2YXIgXz0wO188cy5kZXN0cm95Lmxlbmd0aDsrK18pcy5kZXN0cm95W19dKHkpO2lmKHkuZWxtPW8uZWxtLGcpe2Zvcih2YXIgJD0wOyQ8cy5jcmVhdGUubGVuZ3RoOysrJClzLmNyZWF0ZVskXShKbix5KTt2YXIgdz15LmRhdGEuaG9vay5pbnNlcnQ7aWYody5tZXJnZWQpZm9yKHZhciBPPTE7Tzx3LmZucy5sZW5ndGg7TysrKXcuZm5zW09dKCl9ZWxzZSBabih5KTt5PXkucGFyZW50fW4oaCk/QyhbdF0sMCwwKTpuKHQudGFnKSYmYih0KX19cmV0dXJuIHgobyxwLGwpLG8uZWxtfW4odCkmJmIodCl9fSh7bm9kZU9wczpYbixtb2R1bGVzOltmcix2cix3cixPcixNcixIP3tjcmVhdGU6dW8sYWN0aXZhdGU6dW8scmVtb3ZlOmZ1bmN0aW9uKHQsZSl7ITAhPT10LmRhdGEuc2hvdz9hbyh0LGUpOmUoKX19Ont9XS5jb25jYXQoc3IpfSk7cSYmZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNlbGVjdGlvbmNoYW5nZVwiLGZ1bmN0aW9uKCl7dmFyIHQ9ZG9jdW1lbnQuYWN0aXZlRWxlbWVudDt0JiZ0LnZtb2RlbCYmX28odCxcImlucHV0XCIpfSk7dmFyIGZvPXtpbnNlcnRlZDpmdW5jdGlvbih0LGUsbixyKXtcInNlbGVjdFwiPT09bi50YWc/KHIuZWxtJiYhci5lbG0uX3ZPcHRpb25zP25lKG4sXCJwb3N0cGF0Y2hcIixmdW5jdGlvbigpe2ZvLmNvbXBvbmVudFVwZGF0ZWQodCxlLG4pfSk6cG8odCxlLG4uY29udGV4dCksdC5fdk9wdGlvbnM9W10ubWFwLmNhbGwodC5vcHRpb25zLG1vKSk6KFwidGV4dGFyZWFcIj09PW4udGFnfHxLbih0LnR5cGUpKSYmKHQuX3ZNb2RpZmllcnM9ZS5tb2RpZmllcnMsZS5tb2RpZmllcnMubGF6eXx8KHQuYWRkRXZlbnRMaXN0ZW5lcihcImNvbXBvc2l0aW9uc3RhcnRcIix5byksdC5hZGRFdmVudExpc3RlbmVyKFwiY29tcG9zaXRpb25lbmRcIixnbyksdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsZ28pLHEmJih0LnZtb2RlbD0hMCkpKX0sY29tcG9uZW50VXBkYXRlZDpmdW5jdGlvbih0LGUsbil7aWYoXCJzZWxlY3RcIj09PW4udGFnKXtwbyh0LGUsbi5jb250ZXh0KTt2YXIgcj10Ll92T3B0aW9ucyxvPXQuX3ZPcHRpb25zPVtdLm1hcC5jYWxsKHQub3B0aW9ucyxtbyk7aWYoby5zb21lKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIWoodCxyW2VdKX0pKSh0Lm11bHRpcGxlP2UudmFsdWUuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gaG8odCxvKX0pOmUudmFsdWUhPT1lLm9sZFZhbHVlJiZobyhlLnZhbHVlLG8pKSYmX28odCxcImNoYW5nZVwiKX19fTtmdW5jdGlvbiBwbyh0LGUsbil7dm8odCxlLG4pLChXfHxLKSYmc2V0VGltZW91dChmdW5jdGlvbigpe3ZvKHQsZSxuKX0sMCl9ZnVuY3Rpb24gdm8odCxlLG4pe3ZhciByPWUudmFsdWUsbz10Lm11bHRpcGxlO2lmKCFvfHxBcnJheS5pc0FycmF5KHIpKXtmb3IodmFyIGksYSxzPTAsYz10Lm9wdGlvbnMubGVuZ3RoO3M8YztzKyspaWYoYT10Lm9wdGlvbnNbc10sbylpPVQocixtbyhhKSk+LTEsYS5zZWxlY3RlZCE9PWkmJihhLnNlbGVjdGVkPWkpO2Vsc2UgaWYoaihtbyhhKSxyKSlyZXR1cm4gdm9pZCh0LnNlbGVjdGVkSW5kZXghPT1zJiYodC5zZWxlY3RlZEluZGV4PXMpKTtvfHwodC5zZWxlY3RlZEluZGV4PS0xKX19ZnVuY3Rpb24gaG8odCxlKXtyZXR1cm4gZS5ldmVyeShmdW5jdGlvbihlKXtyZXR1cm4haihlLHQpfSl9ZnVuY3Rpb24gbW8odCl7cmV0dXJuXCJfdmFsdWVcImluIHQ/dC5fdmFsdWU6dC52YWx1ZX1mdW5jdGlvbiB5byh0KXt0LnRhcmdldC5jb21wb3Npbmc9ITB9ZnVuY3Rpb24gZ28odCl7dC50YXJnZXQuY29tcG9zaW5nJiYodC50YXJnZXQuY29tcG9zaW5nPSExLF9vKHQudGFyZ2V0LFwiaW5wdXRcIikpfWZ1bmN0aW9uIF9vKHQsZSl7dmFyIG49ZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJIVE1MRXZlbnRzXCIpO24uaW5pdEV2ZW50KGUsITAsITApLHQuZGlzcGF0Y2hFdmVudChuKX1mdW5jdGlvbiBibyh0KXtyZXR1cm4hdC5jb21wb25lbnRJbnN0YW5jZXx8dC5kYXRhJiZ0LmRhdGEudHJhbnNpdGlvbj90OmJvKHQuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKX12YXIgQ289e21vZGVsOmZvLHNob3c6e2JpbmQ6ZnVuY3Rpb24odCxlLG4pe3ZhciByPWUudmFsdWUsbz0obj1ibyhuKSkuZGF0YSYmbi5kYXRhLnRyYW5zaXRpb24saT10Ll9fdk9yaWdpbmFsRGlzcGxheT1cIm5vbmVcIj09PXQuc3R5bGUuZGlzcGxheT9cIlwiOnQuc3R5bGUuZGlzcGxheTtyJiZvPyhuLmRhdGEuc2hvdz0hMCxpbyhuLGZ1bmN0aW9uKCl7dC5zdHlsZS5kaXNwbGF5PWl9KSk6dC5zdHlsZS5kaXNwbGF5PXI/aTpcIm5vbmVcIn0sdXBkYXRlOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1lLnZhbHVlOyFyIT0hZS5vbGRWYWx1ZSYmKChuPWJvKG4pKS5kYXRhJiZuLmRhdGEudHJhbnNpdGlvbj8obi5kYXRhLnNob3c9ITAscj9pbyhuLGZ1bmN0aW9uKCl7dC5zdHlsZS5kaXNwbGF5PXQuX192T3JpZ2luYWxEaXNwbGF5fSk6YW8obixmdW5jdGlvbigpe3Quc3R5bGUuZGlzcGxheT1cIm5vbmVcIn0pKTp0LnN0eWxlLmRpc3BsYXk9cj90Ll9fdk9yaWdpbmFsRGlzcGxheTpcIm5vbmVcIil9LHVuYmluZDpmdW5jdGlvbih0LGUsbixyLG8pe298fCh0LnN0eWxlLmRpc3BsYXk9dC5fX3ZPcmlnaW5hbERpc3BsYXkpfX19LCRvPXtuYW1lOlN0cmluZyxhcHBlYXI6Qm9vbGVhbixjc3M6Qm9vbGVhbixtb2RlOlN0cmluZyx0eXBlOlN0cmluZyxlbnRlckNsYXNzOlN0cmluZyxsZWF2ZUNsYXNzOlN0cmluZyxlbnRlclRvQ2xhc3M6U3RyaW5nLGxlYXZlVG9DbGFzczpTdHJpbmcsZW50ZXJBY3RpdmVDbGFzczpTdHJpbmcsbGVhdmVBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyQ2xhc3M6U3RyaW5nLGFwcGVhckFjdGl2ZUNsYXNzOlN0cmluZyxhcHBlYXJUb0NsYXNzOlN0cmluZyxkdXJhdGlvbjpbTnVtYmVyLFN0cmluZyxPYmplY3RdfTtmdW5jdGlvbiB3byh0KXt2YXIgZT10JiZ0LmNvbXBvbmVudE9wdGlvbnM7cmV0dXJuIGUmJmUuQ3Rvci5vcHRpb25zLmFic3RyYWN0P3dvKEhlKGUuY2hpbGRyZW4pKTp0fWZ1bmN0aW9uIEFvKHQpe3ZhciBlPXt9LG49dC4kb3B0aW9ucztmb3IodmFyIHIgaW4gbi5wcm9wc0RhdGEpZVtyXT10W3JdO3ZhciBvPW4uX3BhcmVudExpc3RlbmVycztmb3IodmFyIGkgaW4gbyllW18oaSldPW9baV07cmV0dXJuIGV9ZnVuY3Rpb24geG8odCxlKXtpZigvXFxkLWtlZXAtYWxpdmUkLy50ZXN0KGUudGFnKSlyZXR1cm4gdChcImtlZXAtYWxpdmVcIix7cHJvcHM6ZS5jb21wb25lbnRPcHRpb25zLnByb3BzRGF0YX0pfXZhciBPbz1mdW5jdGlvbih0KXtyZXR1cm4gdC50YWd8fFVlKHQpfSxrbz1mdW5jdGlvbih0KXtyZXR1cm5cInNob3dcIj09PXQubmFtZX0sU289e25hbWU6XCJ0cmFuc2l0aW9uXCIscHJvcHM6JG8sYWJzdHJhY3Q6ITAscmVuZGVyOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLiRzbG90cy5kZWZhdWx0O2lmKG4mJihuPW4uZmlsdGVyKE9vKSkubGVuZ3RoKXt2YXIgcj10aGlzLm1vZGUsaT1uWzBdO2lmKGZ1bmN0aW9uKHQpe2Zvcig7dD10LnBhcmVudDspaWYodC5kYXRhLnRyYW5zaXRpb24pcmV0dXJuITB9KHRoaXMuJHZub2RlKSlyZXR1cm4gaTt2YXIgYT13byhpKTtpZighYSlyZXR1cm4gaTtpZih0aGlzLl9sZWF2aW5nKXJldHVybiB4byh0LGkpO3ZhciBzPVwiX190cmFuc2l0aW9uLVwiK3RoaXMuX3VpZCtcIi1cIjthLmtleT1udWxsPT1hLmtleT9hLmlzQ29tbWVudD9zK1wiY29tbWVudFwiOnMrYS50YWc6byhhLmtleSk/MD09PVN0cmluZyhhLmtleSkuaW5kZXhPZihzKT9hLmtleTpzK2Eua2V5OmEua2V5O3ZhciBjPShhLmRhdGF8fChhLmRhdGE9e30pKS50cmFuc2l0aW9uPUFvKHRoaXMpLHU9dGhpcy5fdm5vZGUsbD13byh1KTtpZihhLmRhdGEuZGlyZWN0aXZlcyYmYS5kYXRhLmRpcmVjdGl2ZXMuc29tZShrbykmJihhLmRhdGEuc2hvdz0hMCksbCYmbC5kYXRhJiYhZnVuY3Rpb24odCxlKXtyZXR1cm4gZS5rZXk9PT10LmtleSYmZS50YWc9PT10LnRhZ30oYSxsKSYmIVVlKGwpJiYoIWwuY29tcG9uZW50SW5zdGFuY2V8fCFsLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpKXt2YXIgZj1sLmRhdGEudHJhbnNpdGlvbj14KHt9LGMpO2lmKFwib3V0LWluXCI9PT1yKXJldHVybiB0aGlzLl9sZWF2aW5nPSEwLG5lKGYsXCJhZnRlckxlYXZlXCIsZnVuY3Rpb24oKXtlLl9sZWF2aW5nPSExLGUuJGZvcmNlVXBkYXRlKCl9KSx4byh0LGkpO2lmKFwiaW4tb3V0XCI9PT1yKXtpZihVZShhKSlyZXR1cm4gdTt2YXIgcCxkPWZ1bmN0aW9uKCl7cCgpfTtuZShjLFwiYWZ0ZXJFbnRlclwiLGQpLG5lKGMsXCJlbnRlckNhbmNlbGxlZFwiLGQpLG5lKGYsXCJkZWxheUxlYXZlXCIsZnVuY3Rpb24odCl7cD10fSl9fXJldHVybiBpfX19LEVvPXgoe3RhZzpTdHJpbmcsbW92ZUNsYXNzOlN0cmluZ30sJG8pO2Z1bmN0aW9uIGpvKHQpe3QuZWxtLl9tb3ZlQ2ImJnQuZWxtLl9tb3ZlQ2IoKSx0LmVsbS5fZW50ZXJDYiYmdC5lbG0uX2VudGVyQ2IoKX1mdW5jdGlvbiBUbyh0KXt0LmRhdGEubmV3UG9zPXQuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpfWZ1bmN0aW9uIElvKHQpe3ZhciBlPXQuZGF0YS5wb3Msbj10LmRhdGEubmV3UG9zLHI9ZS5sZWZ0LW4ubGVmdCxvPWUudG9wLW4udG9wO2lmKHJ8fG8pe3QuZGF0YS5tb3ZlZD0hMDt2YXIgaT10LmVsbS5zdHlsZTtpLnRyYW5zZm9ybT1pLldlYmtpdFRyYW5zZm9ybT1cInRyYW5zbGF0ZShcIityK1wicHgsXCIrbytcInB4KVwiLGkudHJhbnNpdGlvbkR1cmF0aW9uPVwiMHNcIn19ZGVsZXRlIEVvLm1vZGU7dmFyIERvPXtUcmFuc2l0aW9uOlNvLFRyYW5zaXRpb25Hcm91cDp7cHJvcHM6RW8sYmVmb3JlTW91bnQ6ZnVuY3Rpb24oKXt2YXIgdD10aGlzLGU9dGhpcy5fdXBkYXRlO3RoaXMuX3VwZGF0ZT1mdW5jdGlvbihuLHIpe3ZhciBvPUtlKHQpO3QuX19wYXRjaF9fKHQuX3Zub2RlLHQua2VwdCwhMSwhMCksdC5fdm5vZGU9dC5rZXB0LG8oKSxlLmNhbGwodCxuLHIpfX0scmVuZGVyOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnRhZ3x8dGhpcy4kdm5vZGUuZGF0YS50YWd8fFwic3BhblwiLG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPXRoaXMucHJldkNoaWxkcmVuPXRoaXMuY2hpbGRyZW4sbz10aGlzLiRzbG90cy5kZWZhdWx0fHxbXSxpPXRoaXMuY2hpbGRyZW49W10sYT1Bbyh0aGlzKSxzPTA7czxvLmxlbmd0aDtzKyspe3ZhciBjPW9bc107Yy50YWcmJm51bGwhPWMua2V5JiYwIT09U3RyaW5nKGMua2V5KS5pbmRleE9mKFwiX192bGlzdFwiKSYmKGkucHVzaChjKSxuW2Mua2V5XT1jLChjLmRhdGF8fChjLmRhdGE9e30pKS50cmFuc2l0aW9uPWEpfWlmKHIpe2Zvcih2YXIgdT1bXSxsPVtdLGY9MDtmPHIubGVuZ3RoO2YrKyl7dmFyIHA9cltmXTtwLmRhdGEudHJhbnNpdGlvbj1hLHAuZGF0YS5wb3M9cC5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbltwLmtleV0/dS5wdXNoKHApOmwucHVzaChwKX10aGlzLmtlcHQ9dChlLG51bGwsdSksdGhpcy5yZW1vdmVkPWx9cmV0dXJuIHQoZSxudWxsLGkpfSx1cGRhdGVkOmZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5wcmV2Q2hpbGRyZW4sZT10aGlzLm1vdmVDbGFzc3x8KHRoaXMubmFtZXx8XCJ2XCIpK1wiLW1vdmVcIjt0Lmxlbmd0aCYmdGhpcy5oYXNNb3ZlKHRbMF0uZWxtLGUpJiYodC5mb3JFYWNoKGpvKSx0LmZvckVhY2goVG8pLHQuZm9yRWFjaChJbyksdGhpcy5fcmVmbG93PWRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0LHQuZm9yRWFjaChmdW5jdGlvbih0KXtpZih0LmRhdGEubW92ZWQpe3ZhciBuPXQuZWxtLHI9bi5zdHlsZTtRcihuLGUpLHIudHJhbnNmb3JtPXIuV2Via2l0VHJhbnNmb3JtPXIudHJhbnNpdGlvbkR1cmF0aW9uPVwiXCIsbi5hZGRFdmVudExpc3RlbmVyKEtyLG4uX21vdmVDYj1mdW5jdGlvbiB0KHIpe3ImJnIudGFyZ2V0IT09bnx8ciYmIS90cmFuc2Zvcm0kLy50ZXN0KHIucHJvcGVydHlOYW1lKXx8KG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihLcix0KSxuLl9tb3ZlQ2I9bnVsbCxZcihuLGUpKX0pfX0pKX0sbWV0aG9kczp7aGFzTW92ZTpmdW5jdGlvbih0LGUpe2lmKCFWcilyZXR1cm4hMTtpZih0aGlzLl9oYXNNb3ZlKXJldHVybiB0aGlzLl9oYXNNb3ZlO3ZhciBuPXQuY2xvbmVOb2RlKCk7dC5fdHJhbnNpdGlvbkNsYXNzZXMmJnQuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24odCl7VXIobix0KX0pLFJyKG4sZSksbi5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMuJGVsLmFwcGVuZENoaWxkKG4pO3ZhciByPW5vKG4pO3JldHVybiB0aGlzLiRlbC5yZW1vdmVDaGlsZChuKSx0aGlzLl9oYXNNb3ZlPXIuaGFzVHJhbnNmb3JtfX19fTtibi5jb25maWcubXVzdFVzZVByb3A9ZnVuY3Rpb24odCxlLG4pe3JldHVyblwidmFsdWVcIj09PW4mJkVuKHQpJiZcImJ1dHRvblwiIT09ZXx8XCJzZWxlY3RlZFwiPT09biYmXCJvcHRpb25cIj09PXR8fFwiY2hlY2tlZFwiPT09biYmXCJpbnB1dFwiPT09dHx8XCJtdXRlZFwiPT09biYmXCJ2aWRlb1wiPT09dH0sYm4uY29uZmlnLmlzUmVzZXJ2ZWRUYWc9V24sYm4uY29uZmlnLmlzUmVzZXJ2ZWRBdHRyPVNuLGJuLmNvbmZpZy5nZXRUYWdOYW1lc3BhY2U9ZnVuY3Rpb24odCl7cmV0dXJuIHpuKHQpP1wic3ZnXCI6XCJtYXRoXCI9PT10P1wibWF0aFwiOnZvaWQgMH0sYm4uY29uZmlnLmlzVW5rbm93bkVsZW1lbnQ9ZnVuY3Rpb24odCl7aWYoIUgpcmV0dXJuITA7aWYoV24odCkpcmV0dXJuITE7aWYodD10LnRvTG93ZXJDYXNlKCksbnVsbCE9cW5bdF0pcmV0dXJuIHFuW3RdO3ZhciBlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodCk7cmV0dXJuIHQuaW5kZXhPZihcIi1cIik+LTE/cW5bdF09ZS5jb25zdHJ1Y3Rvcj09PXdpbmRvdy5IVE1MVW5rbm93bkVsZW1lbnR8fGUuY29uc3RydWN0b3I9PT13aW5kb3cuSFRNTEVsZW1lbnQ6cW5bdF09L0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlLnRvU3RyaW5nKCkpfSx4KGJuLm9wdGlvbnMuZGlyZWN0aXZlcyxDbykseChibi5vcHRpb25zLmNvbXBvbmVudHMsRG8pLGJuLnByb3RvdHlwZS5fX3BhdGNoX189SD9sbzprLGJuLnByb3RvdHlwZS4kbW91bnQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZhciByO3JldHVybiB0LiRlbD1lLHQuJG9wdGlvbnMucmVuZGVyfHwodC4kb3B0aW9ucy5yZW5kZXI9cHQpLFplKHQsXCJiZWZvcmVNb3VudFwiKSxyPWZ1bmN0aW9uKCl7dC5fdXBkYXRlKHQuX3JlbmRlcigpLG4pfSxuZXcgdW4odCxyLGsse2JlZm9yZTpmdW5jdGlvbigpe3QuX2lzTW91bnRlZCYmIXQuX2lzRGVzdHJveWVkJiZaZSh0LFwiYmVmb3JlVXBkYXRlXCIpfX0sITApLG49ITEsbnVsbD09dC4kdm5vZGUmJih0Ll9pc01vdW50ZWQ9ITAsWmUodCxcIm1vdW50ZWRcIikpLHR9KHRoaXMsdD10JiZIP2Z1bmN0aW9uKHQpe2lmKFwic3RyaW5nXCI9PXR5cGVvZiB0KXt2YXIgZT1kb2N1bWVudC5xdWVyeVNlbGVjdG9yKHQpO3JldHVybiBlfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpfXJldHVybiB0fSh0KTp2b2lkIDAsZSl9LEgmJnNldFRpbWVvdXQoZnVuY3Rpb24oKXtMLmRldnRvb2xzJiZ0dCYmdHQuZW1pdChcImluaXRcIixibil9LDApLG1vZHVsZS5leHBvcnRzPWJuOyJdfQ==
}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],6:[function(require,module,exports){
'use strict'; // *** Importing main tools for development  ***

var _vue = _interopRequireDefault(require("vue"));

var _simonsGame = _interopRequireDefault(require("./simonsGame.vue"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

// *** Importing Vue-components ***
// *** Main Vue development configuration ***
_vue["default"].config.productionTip = false;
_vue["default"].config.devtools = true; // *** Vue instance ***

new _vue["default"]({
  render: function render(h) {
    return h(_simonsGame["default"]);
  }
}).$mount('#simonsGame');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZha2VfN2IyZTNjMGYuanMiXSwibmFtZXMiOlsiVnVlIiwiY29uZmlnIiwicHJvZHVjdGlvblRpcCIsImRldnRvb2xzIiwicmVuZGVyIiwiaCIsInNpbW9uc0dhbWUiLCIkbW91bnQiXSwibWFwcGluZ3MiOiJBQUFBLGEsQ0FFQTs7QUFDQTs7QUFHQTs7OztBQURBO0FBSUE7QUFDQUEsZ0JBQUlDLE1BQUosQ0FBV0MsYUFBWCxHQUEyQixLQUEzQjtBQUNBRixnQkFBSUMsTUFBSixDQUFXRSxRQUFYLEdBQXNCLElBQXRCLEMsQ0FHQTs7QUFDQSxJQUFJSCxlQUFKLENBQVE7QUFDTkksRUFBQUEsTUFBTSxFQUFFLGdCQUFBQyxDQUFDO0FBQUEsV0FBSUEsQ0FBQyxDQUFDQyxzQkFBRCxDQUFMO0FBQUE7QUFESCxDQUFSLEVBRUdDLE1BRkgsQ0FFVSxhQUZWIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuLy8gKioqIEltcG9ydGluZyBtYWluIHRvb2xzIGZvciBkZXZlbG9wbWVudCAgKioqXHJcbmltcG9ydCBWdWUgZnJvbSBcInZ1ZVwiO1xyXG5cclxuLy8gKioqIEltcG9ydGluZyBWdWUtY29tcG9uZW50cyAqKipcclxuaW1wb3J0IHNpbW9uc0dhbWUgZnJvbSBcIi4vc2ltb25zR2FtZS52dWVcIjtcclxuXHJcblxyXG4vLyAqKiogTWFpbiBWdWUgZGV2ZWxvcG1lbnQgY29uZmlndXJhdGlvbiAqKipcclxuVnVlLmNvbmZpZy5wcm9kdWN0aW9uVGlwID0gZmFsc2U7XHJcblZ1ZS5jb25maWcuZGV2dG9vbHMgPSB0cnVlO1xyXG5cclxuXHJcbi8vICoqKiBWdWUgaW5zdGFuY2UgKioqXHJcbm5ldyBWdWUoe1xyXG4gIHJlbmRlcjogaCA9PiBoKHNpbW9uc0dhbWUpXHJcbn0pLiRtb3VudCgnI3NpbW9uc0dhbWUnKTtcclxuIl19
},{"./simonsGame.vue":7,"vue":4}],7:[function(require,module,exports){
;(function(){
//
//
//
//
//
//
//

module.exports = {
  data() {
    return {
      simonsGreeting: 'Hi! I am Simon! :)'
    }
  },
  methods: {}
}

})()
if (module.exports.__esModule) module.exports = module.exports.default
var __vue__options__ = (typeof module.exports === "function"? module.exports.options: module.exports)
if (__vue__options__.functional) {console.error("[vueify] functional components are not supported and should be defined in plain js files using render functions.")}
__vue__options__.render = function render () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:"simons-game-wrapper"},[_c('h1',[_vm._v(_vm._s(_vm.simonsGreeting))])])}
__vue__options__.staticRenderFns = []
if (module.hot) {(function () {  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), true)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-3a5127d5", __vue__options__)
  } else {
    hotAPI.reload("data-v-3a5127d5", __vue__options__)
  }
})()}
},{"vue":4,"vue-hot-reload-api":2}]},{},[6])